(self["webpackChunksr_manager"] = self["webpackChunksr_manager"] || []).push([["default-node_modules_swimlane_ngx-datatable___ivy_ngcc___fesm2015_swimlane-ngx-datatable_js-s-3c42c6"],{

/***/ 38550:
/*!**********************************************************************************************!*\
  !*** ./node_modules/@swimlane/ngx-datatable/__ivy_ngcc__/fesm2015/swimlane-ngx-datatable.js ***!
  \**********************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ClickType": function() { return /* binding */ ClickType; },
/* harmony export */   "ColumnChangesService": function() { return /* binding */ ColumnChangesService; },
/* harmony export */   "ColumnMode": function() { return /* binding */ ColumnMode; },
/* harmony export */   "ContextmenuType": function() { return /* binding */ ContextmenuType; },
/* harmony export */   "DataTableBodyCellComponent": function() { return /* binding */ DataTableBodyCellComponent; },
/* harmony export */   "DataTableBodyComponent": function() { return /* binding */ DataTableBodyComponent; },
/* harmony export */   "DataTableBodyRowComponent": function() { return /* binding */ DataTableBodyRowComponent; },
/* harmony export */   "DataTableColumnCellDirective": function() { return /* binding */ DataTableColumnCellDirective; },
/* harmony export */   "DataTableColumnCellTreeToggle": function() { return /* binding */ DataTableColumnCellTreeToggle; },
/* harmony export */   "DataTableColumnDirective": function() { return /* binding */ DataTableColumnDirective; },
/* harmony export */   "DataTableColumnHeaderDirective": function() { return /* binding */ DataTableColumnHeaderDirective; },
/* harmony export */   "DataTableFooterComponent": function() { return /* binding */ DataTableFooterComponent; },
/* harmony export */   "DataTableFooterTemplateDirective": function() { return /* binding */ DataTableFooterTemplateDirective; },
/* harmony export */   "DataTableHeaderCellComponent": function() { return /* binding */ DataTableHeaderCellComponent; },
/* harmony export */   "DataTableHeaderComponent": function() { return /* binding */ DataTableHeaderComponent; },
/* harmony export */   "DataTablePagerComponent": function() { return /* binding */ DataTablePagerComponent; },
/* harmony export */   "DataTableRowWrapperComponent": function() { return /* binding */ DataTableRowWrapperComponent; },
/* harmony export */   "DataTableSelectionComponent": function() { return /* binding */ DataTableSelectionComponent; },
/* harmony export */   "DataTableSummaryRowComponent": function() { return /* binding */ DataTableSummaryRowComponent; },
/* harmony export */   "DatatableComponent": function() { return /* binding */ DatatableComponent; },
/* harmony export */   "DatatableFooterDirective": function() { return /* binding */ DatatableFooterDirective; },
/* harmony export */   "DatatableGroupHeaderDirective": function() { return /* binding */ DatatableGroupHeaderDirective; },
/* harmony export */   "DatatableGroupHeaderTemplateDirective": function() { return /* binding */ DatatableGroupHeaderTemplateDirective; },
/* harmony export */   "DatatableRowDetailDirective": function() { return /* binding */ DatatableRowDetailDirective; },
/* harmony export */   "DatatableRowDetailTemplateDirective": function() { return /* binding */ DatatableRowDetailTemplateDirective; },
/* harmony export */   "DimensionsHelper": function() { return /* binding */ DimensionsHelper; },
/* harmony export */   "DraggableDirective": function() { return /* binding */ DraggableDirective; },
/* harmony export */   "Keys": function() { return /* binding */ Keys; },
/* harmony export */   "LongPressDirective": function() { return /* binding */ LongPressDirective; },
/* harmony export */   "NgxDatatableModule": function() { return /* binding */ NgxDatatableModule; },
/* harmony export */   "OrderableDirective": function() { return /* binding */ OrderableDirective; },
/* harmony export */   "ProgressBarComponent": function() { return /* binding */ ProgressBarComponent; },
/* harmony export */   "ResizeableDirective": function() { return /* binding */ ResizeableDirective; },
/* harmony export */   "RowHeightCache": function() { return /* binding */ RowHeightCache; },
/* harmony export */   "ScrollbarHelper": function() { return /* binding */ ScrollbarHelper; },
/* harmony export */   "ScrollerComponent": function() { return /* binding */ ScrollerComponent; },
/* harmony export */   "SelectionType": function() { return /* binding */ SelectionType; },
/* harmony export */   "SortDirection": function() { return /* binding */ SortDirection; },
/* harmony export */   "SortType": function() { return /* binding */ SortType; },
/* harmony export */   "VisibilityDirective": function() { return /* binding */ VisibilityDirective; },
/* harmony export */   "adjustColumnWidths": function() { return /* binding */ adjustColumnWidths; },
/* harmony export */   "camelCase": function() { return /* binding */ camelCase; },
/* harmony export */   "columnGroupWidths": function() { return /* binding */ columnGroupWidths; },
/* harmony export */   "columnTotalWidth": function() { return /* binding */ columnTotalWidth; },
/* harmony export */   "columnsByPin": function() { return /* binding */ columnsByPin; },
/* harmony export */   "columnsByPinArr": function() { return /* binding */ columnsByPinArr; },
/* harmony export */   "columnsTotalWidth": function() { return /* binding */ columnsTotalWidth; },
/* harmony export */   "deCamelCase": function() { return /* binding */ deCamelCase; },
/* harmony export */   "deepValueGetter": function() { return /* binding */ deepValueGetter; },
/* harmony export */   "elementsFromPoint": function() { return /* binding */ elementsFromPoint; },
/* harmony export */   "emptyStringGetter": function() { return /* binding */ emptyStringGetter; },
/* harmony export */   "forceFillColumnWidths": function() { return /* binding */ forceFillColumnWidths; },
/* harmony export */   "getTotalFlexGrow": function() { return /* binding */ getTotalFlexGrow; },
/* harmony export */   "getVendorPrefixedName": function() { return /* binding */ getVendorPrefixedName; },
/* harmony export */   "getterForProp": function() { return /* binding */ getterForProp; },
/* harmony export */   "groupRowsByParents": function() { return /* binding */ groupRowsByParents; },
/* harmony export */   "id": function() { return /* binding */ id; },
/* harmony export */   "isNullOrUndefined": function() { return /* binding */ isNullOrUndefined; },
/* harmony export */   "nextSortDir": function() { return /* binding */ nextSortDir; },
/* harmony export */   "numericIndexGetter": function() { return /* binding */ numericIndexGetter; },
/* harmony export */   "optionalGetterForProp": function() { return /* binding */ optionalGetterForProp; },
/* harmony export */   "orderByComparator": function() { return /* binding */ orderByComparator; },
/* harmony export */   "selectRows": function() { return /* binding */ selectRows; },
/* harmony export */   "selectRowsBetween": function() { return /* binding */ selectRowsBetween; },
/* harmony export */   "setColumnDefaults": function() { return /* binding */ setColumnDefaults; },
/* harmony export */   "shallowValueGetter": function() { return /* binding */ shallowValueGetter; },
/* harmony export */   "sortRows": function() { return /* binding */ sortRows; },
/* harmony export */   "throttle": function() { return /* binding */ throttle; },
/* harmony export */   "throttleable": function() { return /* binding */ throttleable; },
/* harmony export */   "translateTemplates": function() { return /* binding */ translateTemplates; },
/* harmony export */   "translateXY": function() { return /* binding */ translateXY; },
/* harmony export */   "ɵ0": function() { return /* binding */ ɵ0; }
/* harmony export */ });
/* harmony import */ var C_Users_SAAD_Desktop_frontend_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/toConsumableArray */ 66581);
/* harmony import */ var C_Users_SAAD_Desktop_frontend_node_modules_babel_runtime_helpers_esm_createForOfIteratorHelper__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper */ 72454);
/* harmony import */ var C_Users_SAAD_Desktop_frontend_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/classCallCheck */ 31112);
/* harmony import */ var C_Users_SAAD_Desktop_frontend_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/createClass */ 41998);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/core */ 37716);
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/common */ 38583);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! rxjs */ 79765);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! rxjs */ 22759);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! rxjs */ 26215);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! rxjs/operators */ 46782);
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! tslib */ 64762);









/**
 * Gets the width of the scrollbar.  Nesc for windows
 * http://stackoverflow.com/a/13382873/888165
 */



var _c0 = ["*"];

function DataTableBodyComponent_datatable_progress_0_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelement"](0, "datatable-progress");
  }
}

function DataTableBodyComponent_datatable_scroller_3_datatable_summary_row_1_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelement"](0, "datatable-summary-row", 9);
  }

  if (rf & 2) {
    var ctx_r4 = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵnextContext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("rowHeight", ctx_r4.summaryHeight)("offsetX", ctx_r4.offsetX)("innerWidth", ctx_r4.innerWidth)("rows", ctx_r4.rows)("columns", ctx_r4.columns);
  }
}

function DataTableBodyComponent_datatable_scroller_3_datatable_row_wrapper_2_datatable_body_row_1_Template(rf, ctx) {
  if (rf & 1) {
    var _r14 = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵgetCurrentView"]();

    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](0, "datatable-body-row", 13);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵlistener"]("treeAction", function DataTableBodyComponent_datatable_scroller_3_datatable_row_wrapper_2_datatable_body_row_1_Template_datatable_body_row_treeAction_0_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵrestoreView"](_r14);
      var group_r7 = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵnextContext"]().$implicit;
      var ctx_r12 = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵnextContext"](2);
      return ctx_r12.onTreeAction(group_r7);
    })("activate", function DataTableBodyComponent_datatable_scroller_3_datatable_row_wrapper_2_datatable_body_row_1_Template_datatable_body_row_activate_0_listener($event) {
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵrestoreView"](_r14);
      var i_r8 = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵnextContext"]().index;
      var ctx_r15 = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵnextContext"](2);

      var _r1 = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵreference"](2);

      return _r1.onActivate($event, ctx_r15.indexes.first + i_r8);
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]();
  }

  if (rf & 2) {
    var group_r7 = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵnextContext"]().$implicit;
    var ctx_r9 = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵnextContext"](2);

    var _r1 = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵreference"](2);

    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("isSelected", _r1.getRowSelected(group_r7))("innerWidth", ctx_r9.innerWidth)("offsetX", ctx_r9.offsetX)("columns", ctx_r9.columns)("rowHeight", ctx_r9.getRowHeight(group_r7))("row", group_r7)("rowIndex", ctx_r9.getRowIndex(group_r7))("expanded", ctx_r9.getRowExpanded(group_r7))("rowClass", ctx_r9.rowClass)("displayCheck", ctx_r9.displayCheck)("treeStatus", group_r7 && group_r7.treeStatus);
  }
}

function DataTableBodyComponent_datatable_scroller_3_datatable_row_wrapper_2_ng_template_2_datatable_body_row_0_Template(rf, ctx) {
  if (rf & 1) {
    var _r22 = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵgetCurrentView"]();

    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](0, "datatable-body-row", 15);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵlistener"]("activate", function DataTableBodyComponent_datatable_scroller_3_datatable_row_wrapper_2_ng_template_2_datatable_body_row_0_Template_datatable_body_row_activate_0_listener($event) {
      var restoredCtx = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵrestoreView"](_r22);
      var i_r20 = restoredCtx.index;
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵnextContext"](4);

      var _r1 = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵreference"](2);

      return _r1.onActivate($event, i_r20);
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]();
  }

  if (rf & 2) {
    var row_r19 = ctx.$implicit;
    var group_r7 = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵnextContext"](2).$implicit;
    var ctx_r18 = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵnextContext"](2);

    var _r1 = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵreference"](2);

    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("isSelected", _r1.getRowSelected(row_r19))("innerWidth", ctx_r18.innerWidth)("offsetX", ctx_r18.offsetX)("columns", ctx_r18.columns)("rowHeight", ctx_r18.getRowHeight(row_r19))("row", row_r19)("group", group_r7.value)("rowIndex", ctx_r18.getRowIndex(row_r19))("expanded", ctx_r18.getRowExpanded(row_r19))("rowClass", ctx_r18.rowClass);
  }
}

function DataTableBodyComponent_datatable_scroller_3_datatable_row_wrapper_2_ng_template_2_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtemplate"](0, DataTableBodyComponent_datatable_scroller_3_datatable_row_wrapper_2_ng_template_2_datatable_body_row_0_Template, 1, 10, "datatable-body-row", 14);
  }

  if (rf & 2) {
    var group_r7 = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵnextContext"]().$implicit;
    var ctx_r11 = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵnextContext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("ngForOf", group_r7.value)("ngForTrackBy", ctx_r11.rowTrackingFn);
  }
}

function DataTableBodyComponent_datatable_scroller_3_datatable_row_wrapper_2_Template(rf, ctx) {
  if (rf & 1) {
    var _r26 = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵgetCurrentView"]();

    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](0, "datatable-row-wrapper", 10);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵlistener"]("rowContextmenu", function DataTableBodyComponent_datatable_scroller_3_datatable_row_wrapper_2_Template_datatable_row_wrapper_rowContextmenu_0_listener($event) {
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵrestoreView"](_r26);
      var ctx_r25 = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵnextContext"](2);
      return ctx_r25.rowContextmenu.emit($event);
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtemplate"](1, DataTableBodyComponent_datatable_scroller_3_datatable_row_wrapper_2_datatable_body_row_1_Template, 1, 11, "datatable-body-row", 11);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtemplate"](2, DataTableBodyComponent_datatable_scroller_3_datatable_row_wrapper_2_ng_template_2_Template, 1, 2, "ng-template", null, 12, _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtemplateRefExtractor"]);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]();
  }

  if (rf & 2) {
    var group_r7 = ctx.$implicit;
    var i_r8 = ctx.index;

    var _r10 = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵreference"](3);

    var ctx_r5 = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵnextContext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("groupedRows", ctx_r5.groupedRows)("innerWidth", ctx_r5.innerWidth)("ngStyle", ctx_r5.getRowsStyles(group_r7))("rowDetail", ctx_r5.rowDetail)("groupHeader", ctx_r5.groupHeader)("offsetX", ctx_r5.offsetX)("detailRowHeight", ctx_r5.getDetailRowHeight(group_r7 && group_r7[i_r8], i_r8))("row", group_r7)("expanded", ctx_r5.getRowExpanded(group_r7))("rowIndex", ctx_r5.getRowIndex(group_r7 && group_r7[i_r8]));
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("ngIf", !ctx_r5.groupedRows)("ngIfElse", _r10);
  }
}

function DataTableBodyComponent_datatable_scroller_3_datatable_summary_row_3_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelement"](0, "datatable-summary-row", 16);
  }

  if (rf & 2) {
    var ctx_r6 = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵnextContext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("ngStyle", ctx_r6.getBottomSummaryRowStyles())("rowHeight", ctx_r6.summaryHeight)("offsetX", ctx_r6.offsetX)("innerWidth", ctx_r6.innerWidth)("rows", ctx_r6.rows)("columns", ctx_r6.columns);
  }
}

function DataTableBodyComponent_datatable_scroller_3_Template(rf, ctx) {
  if (rf & 1) {
    var _r28 = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵgetCurrentView"]();

    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](0, "datatable-scroller", 5);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵlistener"]("scroll", function DataTableBodyComponent_datatable_scroller_3_Template_datatable_scroller_scroll_0_listener($event) {
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵrestoreView"](_r28);
      var ctx_r27 = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵnextContext"]();
      return ctx_r27.onBodyScroll($event);
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtemplate"](1, DataTableBodyComponent_datatable_scroller_3_datatable_summary_row_1_Template, 1, 5, "datatable-summary-row", 6);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtemplate"](2, DataTableBodyComponent_datatable_scroller_3_datatable_row_wrapper_2_Template, 4, 12, "datatable-row-wrapper", 7);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtemplate"](3, DataTableBodyComponent_datatable_scroller_3_datatable_summary_row_3_Template, 1, 6, "datatable-summary-row", 8);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]();
  }

  if (rf & 2) {
    var ctx_r2 = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("scrollbarV", ctx_r2.scrollbarV)("scrollbarH", ctx_r2.scrollbarH)("scrollHeight", ctx_r2.scrollHeight)("scrollWidth", ctx_r2.columnGroupWidths == null ? null : ctx_r2.columnGroupWidths.total);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("ngIf", ctx_r2.summaryRow && ctx_r2.summaryPosition === "top");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("ngForOf", ctx_r2.temp)("ngForTrackBy", ctx_r2.rowTrackingFn);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("ngIf", ctx_r2.summaryRow && ctx_r2.summaryPosition === "bottom");
  }
}

function DataTableBodyComponent_div_4_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelement"](0, "div", 17);
  }

  if (rf & 2) {
    var ctx_r3 = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("innerHTML", ctx_r3.emptyMessage, _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵsanitizeHtml"]);
  }
}

function DataTableHeaderComponent_div_1_datatable_header_cell_1_Template(rf, ctx) {
  if (rf & 1) {
    var _r5 = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵgetCurrentView"]();

    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](0, "datatable-header-cell", 4);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵlistener"]("resize", function DataTableHeaderComponent_div_1_datatable_header_cell_1_Template_datatable_header_cell_resize_0_listener($event) {
      var restoredCtx = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵrestoreView"](_r5);
      var column_r3 = restoredCtx.$implicit;
      var ctx_r4 = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵnextContext"](2);
      return ctx_r4.onColumnResized($event, column_r3);
    })("longPressStart", function DataTableHeaderComponent_div_1_datatable_header_cell_1_Template_datatable_header_cell_longPressStart_0_listener($event) {
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵrestoreView"](_r5);
      var ctx_r6 = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵnextContext"](2);
      return ctx_r6.onLongPressStart($event);
    })("longPressEnd", function DataTableHeaderComponent_div_1_datatable_header_cell_1_Template_datatable_header_cell_longPressEnd_0_listener($event) {
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵrestoreView"](_r5);
      var ctx_r7 = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵnextContext"](2);
      return ctx_r7.onLongPressEnd($event);
    })("sort", function DataTableHeaderComponent_div_1_datatable_header_cell_1_Template_datatable_header_cell_sort_0_listener($event) {
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵrestoreView"](_r5);
      var ctx_r8 = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵnextContext"](2);
      return ctx_r8.onSort($event);
    })("select", function DataTableHeaderComponent_div_1_datatable_header_cell_1_Template_datatable_header_cell_select_0_listener($event) {
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵrestoreView"](_r5);
      var ctx_r9 = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵnextContext"](2);
      return ctx_r9.select.emit($event);
    })("columnContextmenu", function DataTableHeaderComponent_div_1_datatable_header_cell_1_Template_datatable_header_cell_columnContextmenu_0_listener($event) {
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵrestoreView"](_r5);
      var ctx_r10 = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵnextContext"](2);
      return ctx_r10.columnContextmenu.emit($event);
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]();
  }

  if (rf & 2) {
    var column_r3 = ctx.$implicit;
    var ctx_r2 = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵnextContext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("resizeEnabled", column_r3.resizeable)("pressModel", column_r3)("pressEnabled", ctx_r2.reorderable && column_r3.draggable)("dragX", ctx_r2.reorderable && column_r3.draggable && column_r3.dragging)("dragY", false)("dragModel", column_r3)("dragEventTarget", ctx_r2.dragEventTarget)("headerHeight", ctx_r2.headerHeight)("isTarget", column_r3.isTarget)("targetMarkerTemplate", ctx_r2.targetMarkerTemplate)("targetMarkerContext", column_r3.targetMarkerContext)("column", column_r3)("sortType", ctx_r2.sortType)("sorts", ctx_r2.sorts)("selectionType", ctx_r2.selectionType)("sortAscendingIcon", ctx_r2.sortAscendingIcon)("sortDescendingIcon", ctx_r2.sortDescendingIcon)("sortUnsetIcon", ctx_r2.sortUnsetIcon)("allRowsSelected", ctx_r2.allRowsSelected);
  }
}

function DataTableHeaderComponent_div_1_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](0, "div", 2);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtemplate"](1, DataTableHeaderComponent_div_1_datatable_header_cell_1_Template, 1, 19, "datatable-header-cell", 3);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]();
  }

  if (rf & 2) {
    var colGroup_r1 = ctx.$implicit;
    var ctx_r0 = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵclassMap"]("datatable-row-" + colGroup_r1.type);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("ngStyle", ctx_r0._styleByGroup[colGroup_r1.type]);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("ngForOf", colGroup_r1.columns)("ngForTrackBy", ctx_r0.columnTrackingFn);
  }
}

function DatatableComponent_datatable_header_1_Template(rf, ctx) {
  if (rf & 1) {
    var _r3 = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵgetCurrentView"]();

    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](0, "datatable-header", 4);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵlistener"]("sort", function DatatableComponent_datatable_header_1_Template_datatable_header_sort_0_listener($event) {
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵrestoreView"](_r3);
      var ctx_r2 = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵnextContext"]();
      return ctx_r2.onColumnSort($event);
    })("resize", function DatatableComponent_datatable_header_1_Template_datatable_header_resize_0_listener($event) {
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵrestoreView"](_r3);
      var ctx_r4 = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵnextContext"]();
      return ctx_r4.onColumnResize($event);
    })("reorder", function DatatableComponent_datatable_header_1_Template_datatable_header_reorder_0_listener($event) {
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵrestoreView"](_r3);
      var ctx_r5 = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵnextContext"]();
      return ctx_r5.onColumnReorder($event);
    })("select", function DatatableComponent_datatable_header_1_Template_datatable_header_select_0_listener($event) {
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵrestoreView"](_r3);
      var ctx_r6 = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵnextContext"]();
      return ctx_r6.onHeaderSelect($event);
    })("columnContextmenu", function DatatableComponent_datatable_header_1_Template_datatable_header_columnContextmenu_0_listener($event) {
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵrestoreView"](_r3);
      var ctx_r7 = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵnextContext"]();
      return ctx_r7.onColumnContextmenu($event);
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵpipe"](1, "async");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]();
  }

  if (rf & 2) {
    var ctx_r0 = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("sorts", ctx_r0.sorts)("sortType", ctx_r0.sortType)("scrollbarH", ctx_r0.scrollbarH)("innerWidth", ctx_r0._innerWidth)("offsetX", _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵpipeBind1"](1, 15, ctx_r0._offsetX))("dealsWithGroup", ctx_r0.groupedRows !== undefined)("columns", ctx_r0._internalColumns)("headerHeight", ctx_r0.headerHeight)("reorderable", ctx_r0.reorderable)("targetMarkerTemplate", ctx_r0.targetMarkerTemplate)("sortAscendingIcon", ctx_r0.cssClasses.sortAscending)("sortDescendingIcon", ctx_r0.cssClasses.sortDescending)("sortUnsetIcon", ctx_r0.cssClasses.sortUnset)("allRowsSelected", ctx_r0.allRowsSelected)("selectionType", ctx_r0.selectionType);
  }
}

function DatatableComponent_datatable_footer_4_Template(rf, ctx) {
  if (rf & 1) {
    var _r9 = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵgetCurrentView"]();

    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](0, "datatable-footer", 5);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵlistener"]("page", function DatatableComponent_datatable_footer_4_Template_datatable_footer_page_0_listener($event) {
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵrestoreView"](_r9);
      var ctx_r8 = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵnextContext"]();
      return ctx_r8.onFooterPage($event);
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]();
  }

  if (rf & 2) {
    var ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("rowCount", ctx_r1.rowCount)("pageSize", ctx_r1.pageSize)("offset", ctx_r1.offset)("footerHeight", ctx_r1.footerHeight)("footerTemplate", ctx_r1.footer)("totalMessage", ctx_r1.messages.totalMessage)("pagerLeftArrowIcon", ctx_r1.cssClasses.pagerLeftArrow)("pagerRightArrowIcon", ctx_r1.cssClasses.pagerRightArrow)("pagerPreviousIcon", ctx_r1.cssClasses.pagerPrevious)("selectedCount", ctx_r1.selected.length)("selectedMessage", !!ctx_r1.selectionType && ctx_r1.messages.selectedMessage)("pagerNextIcon", ctx_r1.cssClasses.pagerNext);
  }
}

function DataTableHeaderCellComponent_1_ng_template_0_Template(rf, ctx) {}

function DataTableHeaderCellComponent_1_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtemplate"](0, DataTableHeaderCellComponent_1_ng_template_0_Template, 0, 0, "ng-template", 5);
  }

  if (rf & 2) {
    var ctx_r0 = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("ngTemplateOutlet", ctx_r0.targetMarkerTemplate)("ngTemplateOutletContext", ctx_r0.targetMarkerContext);
  }
}

function DataTableHeaderCellComponent_label_2_Template(rf, ctx) {
  if (rf & 1) {
    var _r6 = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵgetCurrentView"]();

    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](0, "label", 6);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](1, "input", 7);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵlistener"]("change", function DataTableHeaderCellComponent_label_2_Template_input_change_1_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵrestoreView"](_r6);
      var ctx_r5 = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵnextContext"]();
      return ctx_r5.select.emit(!ctx_r5.allRowsSelected);
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]();
  }

  if (rf & 2) {
    var ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("checked", ctx_r1.allRowsSelected);
  }
}

function DataTableHeaderCellComponent_span_3_Template(rf, ctx) {
  if (rf & 1) {
    var _r8 = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵgetCurrentView"]();

    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](0, "span", 8);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](1, "span", 9);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵlistener"]("click", function DataTableHeaderCellComponent_span_3_Template_span_click_1_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵrestoreView"](_r8);
      var ctx_r7 = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵnextContext"]();
      return ctx_r7.onSort();
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]();
  }

  if (rf & 2) {
    var ctx_r2 = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("innerHTML", ctx_r2.name, _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵsanitizeHtml"]);
  }
}

function DataTableHeaderCellComponent_4_ng_template_0_Template(rf, ctx) {}

function DataTableHeaderCellComponent_4_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtemplate"](0, DataTableHeaderCellComponent_4_ng_template_0_Template, 0, 0, "ng-template", 5);
  }

  if (rf & 2) {
    var ctx_r3 = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("ngTemplateOutlet", ctx_r3.column.headerTemplate)("ngTemplateOutletContext", ctx_r3.cellContext);
  }
}

function DataTableFooterComponent_1_ng_template_0_Template(rf, ctx) {}

var _c1 = function _c1(a0, a1, a2, a3, a4) {
  return {
    rowCount: a0,
    pageSize: a1,
    selectedCount: a2,
    curPage: a3,
    offset: a4
  };
};

function DataTableFooterComponent_1_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtemplate"](0, DataTableFooterComponent_1_ng_template_0_Template, 0, 0, "ng-template", 4);
  }

  if (rf & 2) {
    var ctx_r0 = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("ngTemplateOutlet", ctx_r0.footerTemplate.template)("ngTemplateOutletContext", _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵpureFunction5"](2, _c1, ctx_r0.rowCount, ctx_r0.pageSize, ctx_r0.selectedCount, ctx_r0.curPage, ctx_r0.offset));
  }
}

function DataTableFooterComponent_div_2_span_1_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](0, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]();
  }

  if (rf & 2) {
    var ctx_r4 = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵnextContext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtextInterpolate2"](" ", ctx_r4.selectedCount == null ? null : ctx_r4.selectedCount.toLocaleString(), " ", ctx_r4.selectedMessage, " / ");
  }
}

function DataTableFooterComponent_div_2_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](0, "div", 5);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtemplate"](1, DataTableFooterComponent_div_2_span_1_Template, 2, 2, "span", 1);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]();
  }

  if (rf & 2) {
    var ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("ngIf", ctx_r1.selectedMessage);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtextInterpolate2"](" ", ctx_r1.rowCount == null ? null : ctx_r1.rowCount.toLocaleString(), " ", ctx_r1.totalMessage, " ");
  }
}

function DataTableFooterComponent_datatable_pager_3_Template(rf, ctx) {
  if (rf & 1) {
    var _r6 = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵgetCurrentView"]();

    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](0, "datatable-pager", 6);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵlistener"]("change", function DataTableFooterComponent_datatable_pager_3_Template_datatable_pager_change_0_listener($event) {
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵrestoreView"](_r6);
      var ctx_r5 = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵnextContext"]();
      return ctx_r5.page.emit($event);
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]();
  }

  if (rf & 2) {
    var ctx_r2 = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("pagerLeftArrowIcon", ctx_r2.pagerLeftArrowIcon)("pagerRightArrowIcon", ctx_r2.pagerRightArrowIcon)("pagerPreviousIcon", ctx_r2.pagerPreviousIcon)("pagerNextIcon", ctx_r2.pagerNextIcon)("page", ctx_r2.curPage)("size", ctx_r2.pageSize)("count", ctx_r2.rowCount)("hidden", !ctx_r2.isVisible);
  }
}

var _c2 = function _c2(a0) {
  return {
    "selected-count": a0
  };
};

function DataTablePagerComponent_li_7_Template(rf, ctx) {
  if (rf & 1) {
    var _r3 = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵgetCurrentView"]();

    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](0, "li", 6);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](1, "a", 7);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵlistener"]("click", function DataTablePagerComponent_li_7_Template_a_click_1_listener() {
      var restoredCtx = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵrestoreView"](_r3);
      var pg_r1 = restoredCtx.$implicit;
      var ctx_r2 = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵnextContext"]();
      return ctx_r2.selectPage(pg_r1.number);
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]();
  }

  if (rf & 2) {
    var pg_r1 = ctx.$implicit;
    var ctx_r0 = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵclassProp"]("active", pg_r1.number === ctx_r0.page);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵattribute"]("aria-label", "page " + pg_r1.number);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtextInterpolate1"](" ", pg_r1.text, " ");
  }
}

function DataTableBodyRowComponent_div_0_datatable_body_cell_1_Template(rf, ctx) {
  if (rf & 1) {
    var _r7 = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵgetCurrentView"]();

    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](0, "datatable-body-cell", 3);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵlistener"]("activate", function DataTableBodyRowComponent_div_0_datatable_body_cell_1_Template_datatable_body_cell_activate_0_listener($event) {
      var restoredCtx = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵrestoreView"](_r7);
      var ii_r5 = restoredCtx.index;
      var ctx_r6 = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵnextContext"](2);
      return ctx_r6.onActivate($event, ii_r5);
    })("treeAction", function DataTableBodyRowComponent_div_0_datatable_body_cell_1_Template_datatable_body_cell_treeAction_0_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵrestoreView"](_r7);
      var ctx_r8 = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵnextContext"](2);
      return ctx_r8.onTreeAction();
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]();
  }

  if (rf & 2) {
    var column_r4 = ctx.$implicit;
    var ctx_r3 = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵnextContext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("row", ctx_r3.row)("group", ctx_r3.group)("expanded", ctx_r3.expanded)("isSelected", ctx_r3.isSelected)("rowIndex", ctx_r3.rowIndex)("column", column_r4)("rowHeight", ctx_r3.rowHeight)("displayCheck", ctx_r3.displayCheck)("treeStatus", ctx_r3.treeStatus);
  }
}

function DataTableBodyRowComponent_div_0_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](0, "div", 1);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtemplate"](1, DataTableBodyRowComponent_div_0_datatable_body_cell_1_Template, 1, 9, "datatable-body-cell", 2);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]();
  }

  if (rf & 2) {
    var colGroup_r1 = ctx.$implicit;
    var ctx_r0 = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵclassMapInterpolate1"]("datatable-row-", colGroup_r1.type, " datatable-row-group");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("ngStyle", ctx_r0._groupStyles[colGroup_r1.type]);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("ngForOf", colGroup_r1.columns)("ngForTrackBy", ctx_r0.columnTrackingFn);
  }
}

function DataTableRowWrapperComponent_div_0_1_ng_template_0_Template(rf, ctx) {}

function DataTableRowWrapperComponent_div_0_1_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtemplate"](0, DataTableRowWrapperComponent_div_0_1_ng_template_0_Template, 0, 0, "ng-template", 4);
  }

  if (rf & 2) {
    var ctx_r3 = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵnextContext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("ngTemplateOutlet", ctx_r3.groupHeader.template)("ngTemplateOutletContext", ctx_r3.groupContext);
  }
}

function DataTableRowWrapperComponent_div_0_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](0, "div", 3);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtemplate"](1, DataTableRowWrapperComponent_div_0_1_Template, 1, 2, undefined, 1);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]();
  }

  if (rf & 2) {
    var ctx_r0 = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("ngStyle", ctx_r0.getGroupHeaderStyle());
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("ngIf", ctx_r0.groupHeader && ctx_r0.groupHeader.template);
  }
}

function DataTableRowWrapperComponent_ng_content_1_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵprojection"](0, 0, ["*ngIf", "(groupHeader && groupHeader.template && expanded) || !groupHeader || !groupHeader.template"]);
  }
}

function DataTableRowWrapperComponent_div_2_1_ng_template_0_Template(rf, ctx) {}

function DataTableRowWrapperComponent_div_2_1_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtemplate"](0, DataTableRowWrapperComponent_div_2_1_ng_template_0_Template, 0, 0, "ng-template", 4);
  }

  if (rf & 2) {
    var ctx_r5 = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵnextContext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("ngTemplateOutlet", ctx_r5.rowDetail.template)("ngTemplateOutletContext", ctx_r5.rowContext);
  }
}

function DataTableRowWrapperComponent_div_2_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](0, "div", 5);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtemplate"](1, DataTableRowWrapperComponent_div_2_1_Template, 1, 2, undefined, 1);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]();
  }

  if (rf & 2) {
    var ctx_r2 = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵstyleProp"]("height", ctx_r2.detailRowHeight, "px");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("ngIf", ctx_r2.rowDetail && ctx_r2.rowDetail.template);
  }
}

var _c3 = ["cellTemplate"];

function DataTableBodyCellComponent_label_1_Template(rf, ctx) {
  if (rf & 1) {
    var _r5 = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵgetCurrentView"]();

    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](0, "label", 4);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](1, "input", 5);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵlistener"]("click", function DataTableBodyCellComponent_label_1_Template_input_click_1_listener($event) {
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵrestoreView"](_r5);
      var ctx_r4 = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵnextContext"]();
      return ctx_r4.onCheckboxChange($event);
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]();
  }

  if (rf & 2) {
    var ctx_r0 = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("checked", ctx_r0.isSelected);
  }
}

function DataTableBodyCellComponent_ng_container_2_button_1_i_2_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelement"](0, "i", 11);
  }
}

function DataTableBodyCellComponent_ng_container_2_button_1_i_3_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelement"](0, "i", 12);
  }
}

function DataTableBodyCellComponent_ng_container_2_button_1_i_4_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelement"](0, "i", 13);
  }
}

function DataTableBodyCellComponent_ng_container_2_button_1_Template(rf, ctx) {
  if (rf & 1) {
    var _r12 = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵgetCurrentView"]();

    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](0, "button", 7);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵlistener"]("click", function DataTableBodyCellComponent_ng_container_2_button_1_Template_button_click_0_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵrestoreView"](_r12);
      var ctx_r11 = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵnextContext"](2);
      return ctx_r11.onTreeAction();
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](1, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtemplate"](2, DataTableBodyCellComponent_ng_container_2_button_1_i_2_Template, 1, 0, "i", 8);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtemplate"](3, DataTableBodyCellComponent_ng_container_2_button_1_i_3_Template, 1, 0, "i", 9);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtemplate"](4, DataTableBodyCellComponent_ng_container_2_button_1_i_4_Template, 1, 0, "i", 10);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]();
  }

  if (rf & 2) {
    var ctx_r6 = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵnextContext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("disabled", ctx_r6.treeStatus === "disabled");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("ngIf", ctx_r6.treeStatus === "loading");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("ngIf", ctx_r6.treeStatus === "collapsed");
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("ngIf", ctx_r6.treeStatus === "expanded" || ctx_r6.treeStatus === "disabled");
  }
}

function DataTableBodyCellComponent_ng_container_2_2_ng_template_0_Template(rf, ctx) {}

var _c4 = function _c4(a0) {
  return {
    cellContext: a0
  };
};

function DataTableBodyCellComponent_ng_container_2_2_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtemplate"](0, DataTableBodyCellComponent_ng_container_2_2_ng_template_0_Template, 0, 0, "ng-template", 14);
  }

  if (rf & 2) {
    var ctx_r7 = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵnextContext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("ngTemplateOutlet", ctx_r7.column.treeToggleTemplate)("ngTemplateOutletContext", _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵpureFunction1"](2, _c4, ctx_r7.cellContext));
  }
}

function DataTableBodyCellComponent_ng_container_2_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementContainerStart"](0);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtemplate"](1, DataTableBodyCellComponent_ng_container_2_button_1_Template, 5, 4, "button", 6);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtemplate"](2, DataTableBodyCellComponent_ng_container_2_2_Template, 1, 4, undefined, 2);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementContainerEnd"]();
  }

  if (rf & 2) {
    var ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("ngIf", !ctx_r1.column.treeToggleTemplate);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("ngIf", ctx_r1.column.treeToggleTemplate);
  }
}

function DataTableBodyCellComponent_span_3_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelement"](0, "span", 15);
  }

  if (rf & 2) {
    var ctx_r2 = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("title", ctx_r2.sanitizedValue)("innerHTML", ctx_r2.value, _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵsanitizeHtml"]);
  }
}

function DataTableBodyCellComponent_4_ng_template_0_Template(rf, ctx) {}

function DataTableBodyCellComponent_4_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtemplate"](0, DataTableBodyCellComponent_4_ng_template_0_Template, 0, 0, "ng-template", 14, 16, _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtemplateRefExtractor"]);
  }

  if (rf & 2) {
    var ctx_r3 = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("ngTemplateOutlet", ctx_r3.column.cellTemplate)("ngTemplateOutletContext", ctx_r3.cellContext);
  }
}

function DataTableSummaryRowComponent_datatable_body_row_0_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelement"](0, "datatable-body-row", 1);
  }

  if (rf & 2) {
    var ctx_r0 = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("innerWidth", ctx_r0.innerWidth)("offsetX", ctx_r0.offsetX)("columns", ctx_r0._internalColumns)("rowHeight", ctx_r0.rowHeight)("row", ctx_r0.summaryRow)("rowIndex", -1);
  }
}

var ScrollbarHelper = /*#__PURE__*/function () {
  function ScrollbarHelper(document) {
    (0,C_Users_SAAD_Desktop_frontend_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_2__.default)(this, ScrollbarHelper);

    this.document = document;
    this.width = this.getWidth();
  }

  (0,C_Users_SAAD_Desktop_frontend_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_3__.default)(ScrollbarHelper, [{
    key: "getWidth",
    value: function getWidth() {
      var outer = this.document.createElement('div');
      outer.style.visibility = 'hidden';
      outer.style.width = '100px';
      outer.style.msOverflowStyle = 'scrollbar';
      this.document.body.appendChild(outer);
      var widthNoScroll = outer.offsetWidth;
      outer.style.overflow = 'scroll';
      var inner = this.document.createElement('div');
      inner.style.width = '100%';
      outer.appendChild(inner);
      var widthWithScroll = inner.offsetWidth;
      outer.parentNode.removeChild(outer);
      return widthNoScroll - widthWithScroll;
    }
  }]);

  return ScrollbarHelper;
}();

ScrollbarHelper.ɵfac = function ScrollbarHelper_Factory(t) {
  return new (t || ScrollbarHelper)(_angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵinject"](_angular_common__WEBPACK_IMPORTED_MODULE_5__.DOCUMENT));
};

ScrollbarHelper.ɵprov = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵdefineInjectable"]({
  token: ScrollbarHelper,
  factory: ScrollbarHelper.ɵfac
});

ScrollbarHelper.ctorParameters = function () {
  return [{
    type: undefined,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Inject,
      args: [_angular_common__WEBPACK_IMPORTED_MODULE_5__.DOCUMENT]
    }]
  }];
};
/**
 * Gets the width of the scrollbar.  Nesc for windows
 * http://stackoverflow.com/a/13382873/888165
 */


var DimensionsHelper = /*#__PURE__*/function () {
  function DimensionsHelper() {
    (0,C_Users_SAAD_Desktop_frontend_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_2__.default)(this, DimensionsHelper);
  }

  (0,C_Users_SAAD_Desktop_frontend_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_3__.default)(DimensionsHelper, [{
    key: "getDimensions",
    value: function getDimensions(element) {
      return element.getBoundingClientRect();
    }
  }]);

  return DimensionsHelper;
}();

DimensionsHelper.ɵfac = function DimensionsHelper_Factory(t) {
  return new (t || DimensionsHelper)();
};

DimensionsHelper.ɵprov = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵdefineInjectable"]({
  token: DimensionsHelper,
  factory: DimensionsHelper.ɵfac
});
/**
 * service to make DatatableComponent aware of changes to
 * input bindings of DataTableColumnDirective
 */

var ColumnChangesService = /*#__PURE__*/function () {
  function ColumnChangesService() {
    (0,C_Users_SAAD_Desktop_frontend_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_2__.default)(this, ColumnChangesService);

    this.columnInputChanges = new rxjs__WEBPACK_IMPORTED_MODULE_6__.Subject();
  }

  (0,C_Users_SAAD_Desktop_frontend_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_3__.default)(ColumnChangesService, [{
    key: "columnInputChanges$",
    get: function get() {
      return this.columnInputChanges.asObservable();
    }
  }, {
    key: "onInputChange",
    value: function onInputChange() {
      this.columnInputChanges.next();
    }
  }]);

  return ColumnChangesService;
}();

ColumnChangesService.ɵfac = function ColumnChangesService_Factory(t) {
  return new (t || ColumnChangesService)();
};

ColumnChangesService.ɵprov = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵdefineInjectable"]({
  token: ColumnChangesService,
  factory: ColumnChangesService.ɵfac
});

var DataTableFooterTemplateDirective = function DataTableFooterTemplateDirective(template) {
  (0,C_Users_SAAD_Desktop_frontend_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_2__.default)(this, DataTableFooterTemplateDirective);

  this.template = template;
};

DataTableFooterTemplateDirective.ɵfac = function DataTableFooterTemplateDirective_Factory(t) {
  return new (t || DataTableFooterTemplateDirective)(_angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_4__.TemplateRef));
};

DataTableFooterTemplateDirective.ɵdir = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵdefineDirective"]({
  type: DataTableFooterTemplateDirective,
  selectors: [["", "ngx-datatable-footer-template", ""]]
});

DataTableFooterTemplateDirective.ctorParameters = function () {
  return [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.TemplateRef
  }];
};
/**
 * Visibility Observer Directive
 *
 * Usage:
 *
 * 		<div
 * 			visibilityObserver
 * 			(visible)="onVisible($event)">
 * 		</div>
 *
 */


var VisibilityDirective = /*#__PURE__*/function () {
  function VisibilityDirective(element, zone) {
    (0,C_Users_SAAD_Desktop_frontend_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_2__.default)(this, VisibilityDirective);

    this.element = element;
    this.zone = zone;
    this.isVisible = false;
    this.visible = new _angular_core__WEBPACK_IMPORTED_MODULE_4__.EventEmitter();
  }

  (0,C_Users_SAAD_Desktop_frontend_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_3__.default)(VisibilityDirective, [{
    key: "ngOnInit",
    value: function ngOnInit() {
      this.runCheck();
    }
  }, {
    key: "ngOnDestroy",
    value: function ngOnDestroy() {
      clearTimeout(this.timeout);
    }
  }, {
    key: "onVisibilityChange",
    value: function onVisibilityChange() {
      var _this = this;

      // trigger zone recalc for columns
      this.zone.run(function () {
        _this.isVisible = true;

        _this.visible.emit(true);
      });
    }
  }, {
    key: "runCheck",
    value: function runCheck() {
      var _this2 = this;

      var check = function check() {
        // https://davidwalsh.name/offsetheight-visibility
        var _this2$element$native = _this2.element.nativeElement,
            offsetHeight = _this2$element$native.offsetHeight,
            offsetWidth = _this2$element$native.offsetWidth;

        if (offsetHeight && offsetWidth) {
          clearTimeout(_this2.timeout);

          _this2.onVisibilityChange();
        } else {
          clearTimeout(_this2.timeout);

          _this2.zone.runOutsideAngular(function () {
            _this2.timeout = setTimeout(function () {
              return check();
            }, 50);
          });
        }
      };

      this.timeout = setTimeout(function () {
        return check();
      });
    }
  }]);

  return VisibilityDirective;
}();

VisibilityDirective.ɵfac = function VisibilityDirective_Factory(t) {
  return new (t || VisibilityDirective)(_angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_4__.ElementRef), _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_4__.NgZone));
};

VisibilityDirective.ɵdir = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵdefineDirective"]({
  type: VisibilityDirective,
  selectors: [["", "visibilityObserver", ""]],
  hostVars: 2,
  hostBindings: function VisibilityDirective_HostBindings(rf, ctx) {
    if (rf & 2) {
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵclassProp"]("visible", ctx.isVisible);
    }
  },
  outputs: {
    visible: "visible"
  }
});

VisibilityDirective.ctorParameters = function () {
  return [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.ElementRef
  }, {
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.NgZone
  }];
};

VisibilityDirective.propDecorators = {
  isVisible: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.HostBinding,
    args: ['class.visible']
  }],
  visible: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Output
  }]
};
/**
 * Draggable Directive for Angular2
 *
 * Inspiration:
 *   https://github.com/AngularClass/angular2-examples/blob/master/rx-draggable/directives/draggable.ts
 *   http://stackoverflow.com/questions/35662530/how-to-implement-drag-and-drop-in-angular2
 *
 */

var DraggableDirective = /*#__PURE__*/function () {
  function DraggableDirective(element) {
    (0,C_Users_SAAD_Desktop_frontend_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_2__.default)(this, DraggableDirective);

    this.dragX = true;
    this.dragY = true;
    this.dragStart = new _angular_core__WEBPACK_IMPORTED_MODULE_4__.EventEmitter();
    this.dragging = new _angular_core__WEBPACK_IMPORTED_MODULE_4__.EventEmitter();
    this.dragEnd = new _angular_core__WEBPACK_IMPORTED_MODULE_4__.EventEmitter();
    this.isDragging = false;
    this.element = element.nativeElement;
  }

  (0,C_Users_SAAD_Desktop_frontend_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_3__.default)(DraggableDirective, [{
    key: "ngOnChanges",
    value: function ngOnChanges(changes) {
      if (changes['dragEventTarget'] && changes['dragEventTarget'].currentValue && this.dragModel.dragging) {
        this.onMousedown(changes['dragEventTarget'].currentValue);
      }
    }
  }, {
    key: "ngOnDestroy",
    value: function ngOnDestroy() {
      this._destroySubscription();
    }
  }, {
    key: "onMouseup",
    value: function onMouseup(event) {
      if (!this.isDragging) return;
      this.isDragging = false;
      this.element.classList.remove('dragging');

      if (this.subscription) {
        this._destroySubscription();

        this.dragEnd.emit({
          event: event,
          element: this.element,
          model: this.dragModel
        });
      }
    }
  }, {
    key: "onMousedown",
    value: function onMousedown(event) {
      var _this3 = this;

      // we only want to drag the inner header text
      var isDragElm = event.target.classList.contains('draggable');

      if (isDragElm && (this.dragX || this.dragY)) {
        event.preventDefault();
        this.isDragging = true;
        var mouseDownPos = {
          x: event.clientX,
          y: event.clientY
        };
        var mouseup = (0,rxjs__WEBPACK_IMPORTED_MODULE_7__.fromEvent)(document, 'mouseup');
        this.subscription = mouseup.subscribe(function (ev) {
          return _this3.onMouseup(ev);
        });
        var mouseMoveSub = (0,rxjs__WEBPACK_IMPORTED_MODULE_7__.fromEvent)(document, 'mousemove').pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_8__.takeUntil)(mouseup)).subscribe(function (ev) {
          return _this3.move(ev, mouseDownPos);
        });
        this.subscription.add(mouseMoveSub);
        this.dragStart.emit({
          event: event,
          element: this.element,
          model: this.dragModel
        });
      }
    }
  }, {
    key: "move",
    value: function move(event, mouseDownPos) {
      if (!this.isDragging) return;
      var x = event.clientX - mouseDownPos.x;
      var y = event.clientY - mouseDownPos.y;
      if (this.dragX) this.element.style.left = "".concat(x, "px");
      if (this.dragY) this.element.style.top = "".concat(y, "px");
      this.element.classList.add('dragging');
      this.dragging.emit({
        event: event,
        element: this.element,
        model: this.dragModel
      });
    }
  }, {
    key: "_destroySubscription",
    value: function _destroySubscription() {
      if (this.subscription) {
        this.subscription.unsubscribe();
        this.subscription = undefined;
      }
    }
  }]);

  return DraggableDirective;
}();

DraggableDirective.ɵfac = function DraggableDirective_Factory(t) {
  return new (t || DraggableDirective)(_angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_4__.ElementRef));
};

DraggableDirective.ɵdir = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵdefineDirective"]({
  type: DraggableDirective,
  selectors: [["", "draggable", ""]],
  inputs: {
    dragX: "dragX",
    dragY: "dragY",
    dragEventTarget: "dragEventTarget",
    dragModel: "dragModel"
  },
  outputs: {
    dragStart: "dragStart",
    dragging: "dragging",
    dragEnd: "dragEnd"
  },
  features: [_angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵNgOnChangesFeature"]]
});

DraggableDirective.ctorParameters = function () {
  return [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.ElementRef
  }];
};

DraggableDirective.propDecorators = {
  dragEventTarget: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
  }],
  dragModel: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
  }],
  dragX: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
  }],
  dragY: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
  }],
  dragStart: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Output
  }],
  dragging: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Output
  }],
  dragEnd: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Output
  }]
};

var ResizeableDirective = /*#__PURE__*/function () {
  function ResizeableDirective(element, renderer) {
    (0,C_Users_SAAD_Desktop_frontend_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_2__.default)(this, ResizeableDirective);

    this.renderer = renderer;
    this.resizeEnabled = true;
    this.resize = new _angular_core__WEBPACK_IMPORTED_MODULE_4__.EventEmitter();
    this.resizing = false;
    this.element = element.nativeElement;
  }

  (0,C_Users_SAAD_Desktop_frontend_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_3__.default)(ResizeableDirective, [{
    key: "ngAfterViewInit",
    value: function ngAfterViewInit() {
      var renderer2 = this.renderer;
      this.resizeHandle = renderer2.createElement('span');

      if (this.resizeEnabled) {
        renderer2.addClass(this.resizeHandle, 'resize-handle');
      } else {
        renderer2.addClass(this.resizeHandle, 'resize-handle--not-resizable');
      }

      renderer2.appendChild(this.element, this.resizeHandle);
    }
  }, {
    key: "ngOnDestroy",
    value: function ngOnDestroy() {
      this._destroySubscription();

      if (this.renderer.destroyNode) {
        this.renderer.destroyNode(this.resizeHandle);
      } else if (this.resizeHandle) {
        this.renderer.removeChild(this.renderer.parentNode(this.resizeHandle), this.resizeHandle);
      }
    }
  }, {
    key: "onMouseup",
    value: function onMouseup() {
      this.resizing = false;

      if (this.subscription && !this.subscription.closed) {
        this._destroySubscription();

        this.resize.emit(this.element.clientWidth);
      }
    }
  }, {
    key: "onMousedown",
    value: function onMousedown(event) {
      var _this4 = this;

      var isHandle = event.target.classList.contains('resize-handle');
      var initialWidth = this.element.clientWidth;
      var mouseDownScreenX = event.screenX;

      if (isHandle) {
        event.stopPropagation();
        this.resizing = true;
        var mouseup = (0,rxjs__WEBPACK_IMPORTED_MODULE_7__.fromEvent)(document, 'mouseup');
        this.subscription = mouseup.subscribe(function (ev) {
          return _this4.onMouseup();
        });
        var mouseMoveSub = (0,rxjs__WEBPACK_IMPORTED_MODULE_7__.fromEvent)(document, 'mousemove').pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_8__.takeUntil)(mouseup)).subscribe(function (e) {
          return _this4.move(e, initialWidth, mouseDownScreenX);
        });
        this.subscription.add(mouseMoveSub);
      }
    }
  }, {
    key: "move",
    value: function move(event, initialWidth, mouseDownScreenX) {
      var movementX = event.screenX - mouseDownScreenX;
      var newWidth = initialWidth + movementX;
      var overMinWidth = !this.minWidth || newWidth >= this.minWidth;
      var underMaxWidth = !this.maxWidth || newWidth <= this.maxWidth;

      if (overMinWidth && underMaxWidth) {
        this.element.style.width = "".concat(newWidth, "px");
      }
    }
  }, {
    key: "_destroySubscription",
    value: function _destroySubscription() {
      if (this.subscription) {
        this.subscription.unsubscribe();
        this.subscription = undefined;
      }
    }
  }]);

  return ResizeableDirective;
}();

ResizeableDirective.ɵfac = function ResizeableDirective_Factory(t) {
  return new (t || ResizeableDirective)(_angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_4__.ElementRef), _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_4__.Renderer2));
};

ResizeableDirective.ɵdir = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵdefineDirective"]({
  type: ResizeableDirective,
  selectors: [["", "resizeable", ""]],
  hostVars: 2,
  hostBindings: function ResizeableDirective_HostBindings(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵlistener"]("mousedown", function ResizeableDirective_mousedown_HostBindingHandler($event) {
        return ctx.onMousedown($event);
      });
    }

    if (rf & 2) {
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵclassProp"]("resizeable", ctx.resizeEnabled);
    }
  },
  inputs: {
    resizeEnabled: "resizeEnabled",
    minWidth: "minWidth",
    maxWidth: "maxWidth"
  },
  outputs: {
    resize: "resize"
  }
});

ResizeableDirective.ctorParameters = function () {
  return [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.ElementRef
  }, {
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Renderer2
  }];
};

ResizeableDirective.propDecorators = {
  resizeEnabled: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
  }],
  minWidth: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
  }],
  maxWidth: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
  }],
  resize: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Output
  }],
  onMousedown: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.HostListener,
    args: ['mousedown', ['$event']]
  }]
};

var OrderableDirective = /*#__PURE__*/function () {
  function OrderableDirective(differs, document) {
    (0,C_Users_SAAD_Desktop_frontend_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_2__.default)(this, OrderableDirective);

    this.document = document;
    this.reorder = new _angular_core__WEBPACK_IMPORTED_MODULE_4__.EventEmitter();
    this.targetChanged = new _angular_core__WEBPACK_IMPORTED_MODULE_4__.EventEmitter();
    this.differ = differs.find({}).create();
  }

  (0,C_Users_SAAD_Desktop_frontend_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_3__.default)(OrderableDirective, [{
    key: "ngAfterContentInit",
    value: function ngAfterContentInit() {
      // HACK: Investigate Better Way
      this.updateSubscriptions();
      this.draggables.changes.subscribe(this.updateSubscriptions.bind(this));
    }
  }, {
    key: "ngOnDestroy",
    value: function ngOnDestroy() {
      this.draggables.forEach(function (d) {
        d.dragStart.unsubscribe();
        d.dragging.unsubscribe();
        d.dragEnd.unsubscribe();
      });
    }
  }, {
    key: "updateSubscriptions",
    value: function updateSubscriptions() {
      var _this5 = this;

      var diffs = this.differ.diff(this.createMapDiffs());

      if (diffs) {
        var subscribe = function subscribe(_ref) {
          var currentValue = _ref.currentValue,
              previousValue = _ref.previousValue;
          unsubscribe({
            previousValue: previousValue
          });

          if (currentValue) {
            currentValue.dragStart.subscribe(_this5.onDragStart.bind(_this5));
            currentValue.dragging.subscribe(_this5.onDragging.bind(_this5));
            currentValue.dragEnd.subscribe(_this5.onDragEnd.bind(_this5));
          }
        };

        var unsubscribe = function unsubscribe(_ref2) {
          var previousValue = _ref2.previousValue;

          if (previousValue) {
            previousValue.dragStart.unsubscribe();
            previousValue.dragging.unsubscribe();
            previousValue.dragEnd.unsubscribe();
          }
        };

        diffs.forEachAddedItem(subscribe); // diffs.forEachChangedItem(subscribe.bind(this));

        diffs.forEachRemovedItem(unsubscribe);
      }
    }
  }, {
    key: "onDragStart",
    value: function onDragStart() {
      this.positions = {};
      var i = 0;

      var _iterator = (0,C_Users_SAAD_Desktop_frontend_node_modules_babel_runtime_helpers_esm_createForOfIteratorHelper__WEBPACK_IMPORTED_MODULE_1__.default)(this.draggables.toArray()),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var dragger = _step.value;
          var elm = dragger.element;
          var left = parseInt(elm.offsetLeft.toString(), 0);
          this.positions[dragger.dragModel.prop] = {
            left: left,
            right: left + parseInt(elm.offsetWidth.toString(), 0),
            index: i++,
            element: elm
          };
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }
  }, {
    key: "onDragging",
    value: function onDragging(_ref3) {
      var element = _ref3.element,
          model = _ref3.model,
          event = _ref3.event;
      var prevPos = this.positions[model.prop];
      var target = this.isTarget(model, event);

      if (target) {
        if (this.lastDraggingIndex !== target.i) {
          this.targetChanged.emit({
            prevIndex: this.lastDraggingIndex,
            newIndex: target.i,
            initialIndex: prevPos.index
          });
          this.lastDraggingIndex = target.i;
        }
      } else if (this.lastDraggingIndex !== prevPos.index) {
        this.targetChanged.emit({
          prevIndex: this.lastDraggingIndex,
          initialIndex: prevPos.index
        });
        this.lastDraggingIndex = prevPos.index;
      }
    }
  }, {
    key: "onDragEnd",
    value: function onDragEnd(_ref4) {
      var element = _ref4.element,
          model = _ref4.model,
          event = _ref4.event;
      var prevPos = this.positions[model.prop];
      var target = this.isTarget(model, event);

      if (target) {
        this.reorder.emit({
          prevIndex: prevPos.index,
          newIndex: target.i,
          model: model
        });
      }

      this.lastDraggingIndex = undefined;
      element.style.left = 'auto';
    }
  }, {
    key: "isTarget",
    value: function isTarget(model, event) {
      var _this6 = this;

      var i = 0;
      var x = event.x || event.clientX;
      var y = event.y || event.clientY;
      var targets = this.document.elementsFromPoint(x, y);

      var _loop = function _loop(prop) {
        // current column position which throws event.
        var pos = _this6.positions[prop]; // since we drag the inner span, we need to find it in the elements at the cursor

        if (model.prop !== prop && targets.find(function (el) {
          return el === pos.element;
        })) {
          return {
            v: {
              pos: pos,
              i: i
            }
          };
        }

        i++;
      };

      for (var prop in this.positions) {
        var _ret = _loop(prop);

        if (typeof _ret === "object") return _ret.v;
      }
    }
  }, {
    key: "createMapDiffs",
    value: function createMapDiffs() {
      return this.draggables.toArray().reduce(function (acc, curr) {
        acc[curr.dragModel.$$id] = curr;
        return acc;
      }, {});
    }
  }]);

  return OrderableDirective;
}();

OrderableDirective.ɵfac = function OrderableDirective_Factory(t) {
  return new (t || OrderableDirective)(_angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_4__.KeyValueDiffers), _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵdirectiveInject"](_angular_common__WEBPACK_IMPORTED_MODULE_5__.DOCUMENT));
};

OrderableDirective.ɵdir = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵdefineDirective"]({
  type: OrderableDirective,
  selectors: [["", "orderable", ""]],
  contentQueries: function OrderableDirective_ContentQueries(rf, ctx, dirIndex) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵcontentQuery"](dirIndex, DraggableDirective, 5);
    }

    if (rf & 2) {
      var _t;

      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵloadQuery"]()) && (ctx.draggables = _t);
    }
  },
  outputs: {
    reorder: "reorder",
    targetChanged: "targetChanged"
  }
});

OrderableDirective.ctorParameters = function () {
  return [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.KeyValueDiffers
  }, {
    type: undefined,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Inject,
      args: [_angular_common__WEBPACK_IMPORTED_MODULE_5__.DOCUMENT]
    }]
  }];
};

OrderableDirective.propDecorators = {
  reorder: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Output
  }],
  targetChanged: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Output
  }],
  draggables: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.ContentChildren,
    args: [DraggableDirective, {
      descendants: true
    }]
  }]
};

var LongPressDirective = /*#__PURE__*/function () {
  function LongPressDirective() {
    (0,C_Users_SAAD_Desktop_frontend_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_2__.default)(this, LongPressDirective);

    this.pressEnabled = true;
    this.duration = 500;
    this.longPressStart = new _angular_core__WEBPACK_IMPORTED_MODULE_4__.EventEmitter();
    this.longPressing = new _angular_core__WEBPACK_IMPORTED_MODULE_4__.EventEmitter();
    this.longPressEnd = new _angular_core__WEBPACK_IMPORTED_MODULE_4__.EventEmitter();
    this.mouseX = 0;
    this.mouseY = 0;
  }

  (0,C_Users_SAAD_Desktop_frontend_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_3__.default)(LongPressDirective, [{
    key: "press",
    get: function get() {
      return this.pressing;
    }
  }, {
    key: "isLongPress",
    get: function get() {
      return this.isLongPressing;
    }
  }, {
    key: "onMouseDown",
    value: function onMouseDown(event) {
      var _this7 = this;

      // don't do right/middle clicks
      if (event.which !== 1 || !this.pressEnabled) return; // don't start drag if its on resize handle

      var target = event.target;
      if (target.classList.contains('resize-handle')) return;
      this.mouseX = event.clientX;
      this.mouseY = event.clientY;
      this.pressing = true;
      this.isLongPressing = false;
      var mouseup = (0,rxjs__WEBPACK_IMPORTED_MODULE_7__.fromEvent)(document, 'mouseup');
      this.subscription = mouseup.subscribe(function (ev) {
        return _this7.onMouseup();
      });
      this.timeout = setTimeout(function () {
        _this7.isLongPressing = true;

        _this7.longPressStart.emit({
          event: event,
          model: _this7.pressModel
        });

        _this7.subscription.add((0,rxjs__WEBPACK_IMPORTED_MODULE_7__.fromEvent)(document, 'mousemove').pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_8__.takeUntil)(mouseup)).subscribe(function (mouseEvent) {
          return _this7.onMouseMove(mouseEvent);
        }));

        _this7.loop(event);
      }, this.duration);
      this.loop(event);
    }
  }, {
    key: "onMouseMove",
    value: function onMouseMove(event) {
      if (this.pressing && !this.isLongPressing) {
        var xThres = Math.abs(event.clientX - this.mouseX) > 10;
        var yThres = Math.abs(event.clientY - this.mouseY) > 10;

        if (xThres || yThres) {
          this.endPress();
        }
      }
    }
  }, {
    key: "loop",
    value: function loop(event) {
      var _this8 = this;

      if (this.isLongPressing) {
        this.timeout = setTimeout(function () {
          _this8.longPressing.emit({
            event: event,
            model: _this8.pressModel
          });

          _this8.loop(event);
        }, 50);
      }
    }
  }, {
    key: "endPress",
    value: function endPress() {
      clearTimeout(this.timeout);
      this.isLongPressing = false;
      this.pressing = false;

      this._destroySubscription();

      this.longPressEnd.emit({
        model: this.pressModel
      });
    }
  }, {
    key: "onMouseup",
    value: function onMouseup() {
      this.endPress();
    }
  }, {
    key: "ngOnDestroy",
    value: function ngOnDestroy() {
      this._destroySubscription();
    }
  }, {
    key: "_destroySubscription",
    value: function _destroySubscription() {
      if (this.subscription) {
        this.subscription.unsubscribe();
        this.subscription = undefined;
      }
    }
  }]);

  return LongPressDirective;
}();

LongPressDirective.ɵfac = function LongPressDirective_Factory(t) {
  return new (t || LongPressDirective)();
};

LongPressDirective.ɵdir = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵdefineDirective"]({
  type: LongPressDirective,
  selectors: [["", "long-press", ""]],
  hostVars: 4,
  hostBindings: function LongPressDirective_HostBindings(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵlistener"]("mousedown", function LongPressDirective_mousedown_HostBindingHandler($event) {
        return ctx.onMouseDown($event);
      });
    }

    if (rf & 2) {
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵclassProp"]("press", ctx.press)("longpress", ctx.isLongPress);
    }
  },
  inputs: {
    pressEnabled: "pressEnabled",
    duration: "duration",
    pressModel: "pressModel"
  },
  outputs: {
    longPressStart: "longPressStart",
    longPressing: "longPressing",
    longPressEnd: "longPressEnd"
  }
});
LongPressDirective.propDecorators = {
  pressEnabled: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
  }],
  pressModel: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
  }],
  duration: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
  }],
  longPressStart: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Output
  }],
  longPressing: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Output
  }],
  longPressEnd: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Output
  }],
  press: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.HostBinding,
    args: ['class.press']
  }],
  isLongPress: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.HostBinding,
    args: ['class.longpress']
  }],
  onMouseDown: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.HostListener,
    args: ['mousedown', ['$event']]
  }]
};

var ScrollerComponent = /*#__PURE__*/function () {
  function ScrollerComponent(ngZone, element, renderer) {
    (0,C_Users_SAAD_Desktop_frontend_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_2__.default)(this, ScrollerComponent);

    this.ngZone = ngZone;
    this.renderer = renderer;
    this.scrollbarV = false;
    this.scrollbarH = false;
    this.scroll = new _angular_core__WEBPACK_IMPORTED_MODULE_4__.EventEmitter();
    this.scrollYPos = 0;
    this.scrollXPos = 0;
    this.prevScrollYPos = 0;
    this.prevScrollXPos = 0;
    this._scrollEventListener = null;
    this.element = element.nativeElement;
  }

  (0,C_Users_SAAD_Desktop_frontend_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_3__.default)(ScrollerComponent, [{
    key: "ngOnInit",
    value: function ngOnInit() {
      // manual bind so we don't always listen
      if (this.scrollbarV || this.scrollbarH) {
        var renderer = this.renderer;
        this.parentElement = renderer.parentNode(renderer.parentNode(this.element));
        this._scrollEventListener = this.onScrolled.bind(this);
        this.parentElement.addEventListener('scroll', this._scrollEventListener);
      }
    }
  }, {
    key: "ngOnDestroy",
    value: function ngOnDestroy() {
      if (this._scrollEventListener) {
        this.parentElement.removeEventListener('scroll', this._scrollEventListener);
        this._scrollEventListener = null;
      }
    }
  }, {
    key: "setOffset",
    value: function setOffset(offsetY) {
      if (this.parentElement) {
        this.parentElement.scrollTop = offsetY;
      }
    }
  }, {
    key: "onScrolled",
    value: function onScrolled(event) {
      var _this9 = this;

      var dom = event.currentTarget;
      requestAnimationFrame(function () {
        _this9.scrollYPos = dom.scrollTop;
        _this9.scrollXPos = dom.scrollLeft;

        _this9.updateOffset();
      });
    }
  }, {
    key: "updateOffset",
    value: function updateOffset() {
      var direction;

      if (this.scrollYPos < this.prevScrollYPos) {
        direction = 'down';
      } else if (this.scrollYPos > this.prevScrollYPos) {
        direction = 'up';
      }

      this.scroll.emit({
        direction: direction,
        scrollYPos: this.scrollYPos,
        scrollXPos: this.scrollXPos
      });
      this.prevScrollYPos = this.scrollYPos;
      this.prevScrollXPos = this.scrollXPos;
    }
  }]);

  return ScrollerComponent;
}();

ScrollerComponent.ɵfac = function ScrollerComponent_Factory(t) {
  return new (t || ScrollerComponent)(_angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_4__.NgZone), _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_4__.ElementRef), _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_4__.Renderer2));
};

ScrollerComponent.ɵcmp = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵdefineComponent"]({
  type: ScrollerComponent,
  selectors: [["datatable-scroller"]],
  hostAttrs: [1, "datatable-scroll"],
  hostVars: 4,
  hostBindings: function ScrollerComponent_HostBindings(rf, ctx) {
    if (rf & 2) {
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵstyleProp"]("height", ctx.scrollHeight, "px")("width", ctx.scrollWidth, "px");
    }
  },
  inputs: {
    scrollbarV: "scrollbarV",
    scrollbarH: "scrollbarH",
    scrollHeight: "scrollHeight",
    scrollWidth: "scrollWidth"
  },
  outputs: {
    scroll: "scroll"
  },
  ngContentSelectors: _c0,
  decls: 1,
  vars: 0,
  template: function ScrollerComponent_Template(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵprojectionDef"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵprojection"](0);
    }
  },
  encapsulation: 2,
  changeDetection: 0
});

ScrollerComponent.ctorParameters = function () {
  return [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.NgZone
  }, {
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.ElementRef
  }, {
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Renderer2
  }];
};

ScrollerComponent.propDecorators = {
  scrollbarV: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
  }],
  scrollbarH: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
  }],
  scrollHeight: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.HostBinding,
    args: ['style.height.px']
  }, {
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
  }],
  scrollWidth: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.HostBinding,
    args: ['style.width.px']
  }, {
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
  }],
  scroll: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Output
  }]
};

var DatatableGroupHeaderTemplateDirective = function DatatableGroupHeaderTemplateDirective(template) {
  (0,C_Users_SAAD_Desktop_frontend_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_2__.default)(this, DatatableGroupHeaderTemplateDirective);

  this.template = template;
};

DatatableGroupHeaderTemplateDirective.ɵfac = function DatatableGroupHeaderTemplateDirective_Factory(t) {
  return new (t || DatatableGroupHeaderTemplateDirective)(_angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_4__.TemplateRef));
};

DatatableGroupHeaderTemplateDirective.ɵdir = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵdefineDirective"]({
  type: DatatableGroupHeaderTemplateDirective,
  selectors: [["", "ngx-datatable-group-header-template", ""]]
});

DatatableGroupHeaderTemplateDirective.ctorParameters = function () {
  return [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.TemplateRef
  }];
};

var DatatableGroupHeaderDirective = /*#__PURE__*/function () {
  function DatatableGroupHeaderDirective() {
    (0,C_Users_SAAD_Desktop_frontend_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_2__.default)(this, DatatableGroupHeaderDirective);

    /**
     * Row height is required when virtual scroll is enabled.
     */
    this.rowHeight = 0;
    /**
     * Track toggling of group visibility
     */

    this.toggle = new _angular_core__WEBPACK_IMPORTED_MODULE_4__.EventEmitter();
  }

  (0,C_Users_SAAD_Desktop_frontend_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_3__.default)(DatatableGroupHeaderDirective, [{
    key: "template",
    get: function get() {
      return this._templateInput || this._templateQuery;
    }
    /**
     * Toggle the expansion of a group
     */

  }, {
    key: "toggleExpandGroup",
    value: function toggleExpandGroup(group) {
      this.toggle.emit({
        type: 'group',
        value: group
      });
    }
    /**
     * Expand all groups
     */

  }, {
    key: "expandAllGroups",
    value: function expandAllGroups() {
      this.toggle.emit({
        type: 'all',
        value: true
      });
    }
    /**
     * Collapse all groups
     */

  }, {
    key: "collapseAllGroups",
    value: function collapseAllGroups() {
      this.toggle.emit({
        type: 'all',
        value: false
      });
    }
  }]);

  return DatatableGroupHeaderDirective;
}();

DatatableGroupHeaderDirective.ɵfac = function DatatableGroupHeaderDirective_Factory(t) {
  return new (t || DatatableGroupHeaderDirective)();
};

DatatableGroupHeaderDirective.ɵdir = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵdefineDirective"]({
  type: DatatableGroupHeaderDirective,
  selectors: [["ngx-datatable-group-header"]],
  contentQueries: function DatatableGroupHeaderDirective_ContentQueries(rf, ctx, dirIndex) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵcontentQuery"](dirIndex, DatatableGroupHeaderTemplateDirective, 7, _angular_core__WEBPACK_IMPORTED_MODULE_4__.TemplateRef);
    }

    if (rf & 2) {
      var _t;

      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵloadQuery"]()) && (ctx._templateQuery = _t.first);
    }
  },
  inputs: {
    rowHeight: "rowHeight",
    _templateInput: ["template", "_templateInput"]
  },
  outputs: {
    toggle: "toggle"
  }
});
DatatableGroupHeaderDirective.propDecorators = {
  rowHeight: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
  }],
  _templateInput: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input,
    args: ['template']
  }],
  _templateQuery: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.ContentChild,
    args: [DatatableGroupHeaderTemplateDirective, {
      read: _angular_core__WEBPACK_IMPORTED_MODULE_4__.TemplateRef,
      static: true
    }]
  }],
  toggle: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Output
  }]
};
/**
 * Always returns the empty string ''
 */

function emptyStringGetter() {
  return '';
}
/**
 * Returns the appropriate getter function for this kind of prop.
 * If prop == null, returns the emptyStringGetter.
 */


function getterForProp(prop) {
  if (prop == null) {
    return emptyStringGetter;
  }

  if (typeof prop === 'number') {
    return numericIndexGetter;
  } else {
    // deep or simple
    if (prop.indexOf('.') !== -1) {
      return deepValueGetter;
    } else {
      return shallowValueGetter;
    }
  }
}
/**
 * Returns the value at this numeric index.
 * @param row array of values
 * @param index numeric index
 * @returns any or '' if invalid index
 */


function numericIndexGetter(row, index) {
  if (row == null) {
    return '';
  } // mimic behavior of deepValueGetter


  if (!row || index == null) {
    return row;
  }

  var value = row[index];

  if (value == null) {
    return '';
  }

  return value;
}
/**
 * Returns the value of a field.
 * (more efficient than deepValueGetter)
 * @param obj object containing the field
 * @param fieldName field name string
 */


function shallowValueGetter(obj, fieldName) {
  if (obj == null) {
    return '';
  }

  if (!obj || !fieldName) {
    return obj;
  }

  var value = obj[fieldName];

  if (value == null) {
    return '';
  }

  return value;
}
/**
 * Returns a deep object given a string. zoo['animal.type']
 */


function deepValueGetter(obj, path) {
  if (obj == null) {
    return '';
  }

  if (!obj || !path) {
    return obj;
  } // check if path matches a root-level field
  // { "a.b.c": 123 }


  var current = obj[path];

  if (current !== undefined) {
    return current;
  }

  current = obj;
  var split = path.split('.');

  if (split.length) {
    for (var i = 0; i < split.length; i++) {
      current = current[split[i]]; // if found undefined, return empty string

      if (current === undefined || current === null) {
        return '';
      }
    }
  }

  return current;
}

function optionalGetterForProp(prop) {
  return prop && function (row) {
    return getterForProp(prop)(row, prop);
  };
}
/**
 * This functions rearrange items by their parents
 * Also sets the level value to each of the items
 *
 * Note: Expecting each item has a property called parentId
 * Note: This algorithm will fail if a list has two or more items with same ID
 * NOTE: This algorithm will fail if there is a deadlock of relationship
 *
 * For example,
 *
 * Input
 *
 * id -> parent
 * 1  -> 0
 * 2  -> 0
 * 3  -> 1
 * 4  -> 1
 * 5  -> 2
 * 7  -> 8
 * 6  -> 3
 *
 *
 * Output
 * id -> level
 * 1      -> 0
 * --3    -> 1
 * ----6  -> 2
 * --4    -> 1
 * 2      -> 0
 * --5    -> 1
 * 7     -> 8
 *
 *
 * @param rows
 *
 */


function groupRowsByParents(rows, from, to) {
  if (from && to) {
    var nodeById = {};
    var l = rows.length;
    var node = null;
    nodeById[0] = new TreeNode(); // that's the root node

    var uniqIDs = rows.reduce(function (arr, item) {
      var toValue = to(item);

      if (arr.indexOf(toValue) === -1) {
        arr.push(toValue);
      }

      return arr;
    }, []);

    for (var i = 0; i < l; i++) {
      // make TreeNode objects for each item
      nodeById[to(rows[i])] = new TreeNode(rows[i]);
    }

    for (var _i = 0; _i < l; _i++) {
      // link all TreeNode objects
      node = nodeById[to(rows[_i])];
      var parent = 0;
      var fromValue = from(node.row);

      if (!!fromValue && uniqIDs.indexOf(fromValue) > -1) {
        parent = fromValue;
      }

      node.parent = nodeById[parent];
      node.row['level'] = node.parent.row['level'] + 1;
      node.parent.children.push(node);
    }

    var resolvedRows = [];
    nodeById[0].flatten(function () {
      resolvedRows = [].concat((0,C_Users_SAAD_Desktop_frontend_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__.default)(resolvedRows), [this.row]);
    }, true);
    return resolvedRows;
  } else {
    return rows;
  }
}

var TreeNode = /*#__PURE__*/function () {
  function TreeNode() {
    var row = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

    (0,C_Users_SAAD_Desktop_frontend_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_2__.default)(this, TreeNode);

    if (!row) {
      row = {
        level: -1,
        treeStatus: 'expanded'
      };
    }

    this.row = row;
    this.parent = null;
    this.children = [];
  }

  (0,C_Users_SAAD_Desktop_frontend_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_3__.default)(TreeNode, [{
    key: "flatten",
    value: function flatten(f, recursive) {
      if (this.row['treeStatus'] === 'expanded') {
        for (var i = 0, l = this.children.length; i < l; i++) {
          var child = this.children[i];
          f.apply(child, Array.prototype.slice.call(arguments, 2));
          if (recursive) child.flatten.apply(child, arguments);
        }
      }
    }
  }]);

  return TreeNode;
}();
/**
 * Converts strings from something to camel case
 * http://stackoverflow.com/questions/10425287/convert-dash-separated-string-to-camelcase
 */


function camelCase(str) {
  // Replace special characters with a space
  str = str.replace(/[^a-zA-Z0-9 ]/g, ' '); // put a space before an uppercase letter

  str = str.replace(/([a-z](?=[A-Z]))/g, '$1 '); // Lower case first character and some other stuff

  str = str.replace(/([^a-zA-Z0-9 ])|^[0-9]+/g, '').trim().toLowerCase(); // uppercase characters preceded by a space or number

  str = str.replace(/([ 0-9]+)([a-zA-Z])/g, function (a, b, c) {
    return b.trim() + c.toUpperCase();
  });
  return str;
}
/**
 * Converts strings from camel case to words
 * http://stackoverflow.com/questions/7225407/convert-camelcasetext-to-camel-case-text
 */


function deCamelCase(str) {
  return str.replace(/([A-Z])/g, function (match) {
    return " ".concat(match);
  }).replace(/^./, function (match) {
    return match.toUpperCase();
  });
}
/**
 * Creates a unique object id.
 * http://stackoverflow.com/questions/6248666/how-to-generate-short-uid-like-ax4j9z-in-js
 */


function id() {
  return ('0000' + (Math.random() * Math.pow(36, 4) << 0).toString(36)).slice(-4);
}
/**
 * Sets the column defaults
 */


function setColumnDefaults(columns) {
  if (!columns) return; // Only one column should hold the tree view
  // Thus if multiple columns are provided with
  // isTreeColumn as true we take only the first one

  var treeColumnFound = false;

  var _iterator2 = (0,C_Users_SAAD_Desktop_frontend_node_modules_babel_runtime_helpers_esm_createForOfIteratorHelper__WEBPACK_IMPORTED_MODULE_1__.default)(columns),
      _step2;

  try {
    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
      var column = _step2.value;

      if (!column.$$id) {
        column.$$id = id();
      } // prop can be numeric; zero is valid not a missing prop
      // translate name => prop


      if (isNullOrUndefined(column.prop) && column.name) {
        column.prop = camelCase(column.name);
      }

      if (!column.$$valueGetter) {
        column.$$valueGetter = getterForProp(column.prop);
      } // format props if no name passed


      if (!isNullOrUndefined(column.prop) && isNullOrUndefined(column.name)) {
        column.name = deCamelCase(String(column.prop));
      }

      if (isNullOrUndefined(column.prop) && isNullOrUndefined(column.name)) {
        column.name = ''; // Fixes IE and Edge displaying `null`
      }

      if (!column.hasOwnProperty('resizeable')) {
        column.resizeable = true;
      }

      if (!column.hasOwnProperty('sortable')) {
        column.sortable = true;
      }

      if (!column.hasOwnProperty('draggable')) {
        column.draggable = true;
      }

      if (!column.hasOwnProperty('canAutoResize')) {
        column.canAutoResize = true;
      }

      if (!column.hasOwnProperty('width')) {
        column.width = 150;
      }

      if (!column.hasOwnProperty('isTreeColumn')) {
        column.isTreeColumn = false;
      } else {
        if (column.isTreeColumn && !treeColumnFound) {
          // If the first column with isTreeColumn is true found
          // we mark that treeCoulmn is found
          treeColumnFound = true;
        } else {
          // After that isTreeColumn property for any other column
          // will be set as false
          column.isTreeColumn = false;
        }
      }
    }
  } catch (err) {
    _iterator2.e(err);
  } finally {
    _iterator2.f();
  }
}

function isNullOrUndefined(value) {
  return value === null || value === undefined;
}
/**
 * Translates templates definitions to objects
 */


function translateTemplates(templates) {
  var result = [];

  var _iterator3 = (0,C_Users_SAAD_Desktop_frontend_node_modules_babel_runtime_helpers_esm_createForOfIteratorHelper__WEBPACK_IMPORTED_MODULE_1__.default)(templates),
      _step3;

  try {
    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
      var temp = _step3.value;
      var col = {};
      var props = Object.getOwnPropertyNames(temp);

      var _iterator4 = (0,C_Users_SAAD_Desktop_frontend_node_modules_babel_runtime_helpers_esm_createForOfIteratorHelper__WEBPACK_IMPORTED_MODULE_1__.default)(props),
          _step4;

      try {
        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
          var prop = _step4.value;
          col[prop] = temp[prop];
        }
      } catch (err) {
        _iterator4.e(err);
      } finally {
        _iterator4.f();
      }

      if (temp.headerTemplate) {
        col.headerTemplate = temp.headerTemplate;
      }

      if (temp.cellTemplate) {
        col.cellTemplate = temp.cellTemplate;
      }

      if (temp.summaryFunc) {
        col.summaryFunc = temp.summaryFunc;
      }

      if (temp.summaryTemplate) {
        col.summaryTemplate = temp.summaryTemplate;
      }

      result.push(col);
    }
  } catch (err) {
    _iterator3.e(err);
  } finally {
    _iterator3.f();
  }

  return result;
}

var ColumnMode;

(function (ColumnMode) {
  ColumnMode["standard"] = "standard";
  ColumnMode["flex"] = "flex";
  ColumnMode["force"] = "force";
})(ColumnMode || (ColumnMode = {}));

var SelectionType;

(function (SelectionType) {
  SelectionType["single"] = "single";
  SelectionType["multi"] = "multi";
  SelectionType["multiClick"] = "multiClick";
  SelectionType["cell"] = "cell";
  SelectionType["checkbox"] = "checkbox";
})(SelectionType || (SelectionType = {}));

var SortType;

(function (SortType) {
  SortType["single"] = "single";
  SortType["multi"] = "multi";
})(SortType || (SortType = {}));

var ContextmenuType;

(function (ContextmenuType) {
  ContextmenuType["header"] = "header";
  ContextmenuType["body"] = "body";
})(ContextmenuType || (ContextmenuType = {}));

var DataTableColumnHeaderDirective = function DataTableColumnHeaderDirective(template) {
  (0,C_Users_SAAD_Desktop_frontend_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_2__.default)(this, DataTableColumnHeaderDirective);

  this.template = template;
};

DataTableColumnHeaderDirective.ɵfac = function DataTableColumnHeaderDirective_Factory(t) {
  return new (t || DataTableColumnHeaderDirective)(_angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_4__.TemplateRef));
};

DataTableColumnHeaderDirective.ɵdir = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵdefineDirective"]({
  type: DataTableColumnHeaderDirective,
  selectors: [["", "ngx-datatable-header-template", ""]]
});

DataTableColumnHeaderDirective.ctorParameters = function () {
  return [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.TemplateRef
  }];
};

var DataTableColumnCellDirective = function DataTableColumnCellDirective(template) {
  (0,C_Users_SAAD_Desktop_frontend_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_2__.default)(this, DataTableColumnCellDirective);

  this.template = template;
};

DataTableColumnCellDirective.ɵfac = function DataTableColumnCellDirective_Factory(t) {
  return new (t || DataTableColumnCellDirective)(_angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_4__.TemplateRef));
};

DataTableColumnCellDirective.ɵdir = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵdefineDirective"]({
  type: DataTableColumnCellDirective,
  selectors: [["", "ngx-datatable-cell-template", ""]]
});

DataTableColumnCellDirective.ctorParameters = function () {
  return [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.TemplateRef
  }];
};

var DataTableColumnCellTreeToggle = function DataTableColumnCellTreeToggle(template) {
  (0,C_Users_SAAD_Desktop_frontend_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_2__.default)(this, DataTableColumnCellTreeToggle);

  this.template = template;
};

DataTableColumnCellTreeToggle.ɵfac = function DataTableColumnCellTreeToggle_Factory(t) {
  return new (t || DataTableColumnCellTreeToggle)(_angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_4__.TemplateRef));
};

DataTableColumnCellTreeToggle.ɵdir = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵdefineDirective"]({
  type: DataTableColumnCellTreeToggle,
  selectors: [["", "ngx-datatable-tree-toggle", ""]]
});

DataTableColumnCellTreeToggle.ctorParameters = function () {
  return [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.TemplateRef
  }];
};

var DataTableColumnDirective = /*#__PURE__*/function () {
  function DataTableColumnDirective(columnChangesService) {
    (0,C_Users_SAAD_Desktop_frontend_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_2__.default)(this, DataTableColumnDirective);

    this.columnChangesService = columnChangesService;
    this.isFirstChange = true;
  }

  (0,C_Users_SAAD_Desktop_frontend_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_3__.default)(DataTableColumnDirective, [{
    key: "cellTemplate",
    get: function get() {
      return this._cellTemplateInput || this._cellTemplateQuery;
    }
  }, {
    key: "headerTemplate",
    get: function get() {
      return this._headerTemplateInput || this._headerTemplateQuery;
    }
  }, {
    key: "treeToggleTemplate",
    get: function get() {
      return this._treeToggleTemplateInput || this._treeToggleTemplateQuery;
    }
  }, {
    key: "ngOnChanges",
    value: function ngOnChanges() {
      if (this.isFirstChange) {
        this.isFirstChange = false;
      } else {
        this.columnChangesService.onInputChange();
      }
    }
  }]);

  return DataTableColumnDirective;
}();

DataTableColumnDirective.ɵfac = function DataTableColumnDirective_Factory(t) {
  return new (t || DataTableColumnDirective)(_angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵdirectiveInject"](ColumnChangesService));
};

DataTableColumnDirective.ɵdir = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵdefineDirective"]({
  type: DataTableColumnDirective,
  selectors: [["ngx-datatable-column"]],
  contentQueries: function DataTableColumnDirective_ContentQueries(rf, ctx, dirIndex) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵcontentQuery"](dirIndex, DataTableColumnCellDirective, 7, _angular_core__WEBPACK_IMPORTED_MODULE_4__.TemplateRef);
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵcontentQuery"](dirIndex, DataTableColumnHeaderDirective, 7, _angular_core__WEBPACK_IMPORTED_MODULE_4__.TemplateRef);
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵcontentQuery"](dirIndex, DataTableColumnCellTreeToggle, 7, _angular_core__WEBPACK_IMPORTED_MODULE_4__.TemplateRef);
    }

    if (rf & 2) {
      var _t;

      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵloadQuery"]()) && (ctx._cellTemplateQuery = _t.first);
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵloadQuery"]()) && (ctx._headerTemplateQuery = _t.first);
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵloadQuery"]()) && (ctx._treeToggleTemplateQuery = _t.first);
    }
  },
  inputs: {
    name: "name",
    prop: "prop",
    frozenLeft: "frozenLeft",
    frozenRight: "frozenRight",
    flexGrow: "flexGrow",
    resizeable: "resizeable",
    comparator: "comparator",
    pipe: "pipe",
    sortable: "sortable",
    draggable: "draggable",
    canAutoResize: "canAutoResize",
    minWidth: "minWidth",
    width: "width",
    maxWidth: "maxWidth",
    checkboxable: "checkboxable",
    headerCheckboxable: "headerCheckboxable",
    headerClass: "headerClass",
    cellClass: "cellClass",
    isTreeColumn: "isTreeColumn",
    treeLevelIndent: "treeLevelIndent",
    summaryFunc: "summaryFunc",
    summaryTemplate: "summaryTemplate",
    _cellTemplateInput: ["cellTemplate", "_cellTemplateInput"],
    _headerTemplateInput: ["headerTemplate", "_headerTemplateInput"],
    _treeToggleTemplateInput: ["treeToggleTemplate", "_treeToggleTemplateInput"]
  },
  features: [_angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵNgOnChangesFeature"]]
});

DataTableColumnDirective.ctorParameters = function () {
  return [{
    type: ColumnChangesService
  }];
};

DataTableColumnDirective.propDecorators = {
  name: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
  }],
  prop: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
  }],
  frozenLeft: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
  }],
  frozenRight: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
  }],
  flexGrow: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
  }],
  resizeable: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
  }],
  comparator: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
  }],
  pipe: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
  }],
  sortable: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
  }],
  draggable: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
  }],
  canAutoResize: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
  }],
  minWidth: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
  }],
  width: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
  }],
  maxWidth: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
  }],
  checkboxable: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
  }],
  headerCheckboxable: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
  }],
  headerClass: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
  }],
  cellClass: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
  }],
  isTreeColumn: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
  }],
  treeLevelIndent: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
  }],
  summaryFunc: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
  }],
  summaryTemplate: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
  }],
  _cellTemplateInput: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input,
    args: ['cellTemplate']
  }],
  _cellTemplateQuery: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.ContentChild,
    args: [DataTableColumnCellDirective, {
      read: _angular_core__WEBPACK_IMPORTED_MODULE_4__.TemplateRef,
      static: true
    }]
  }],
  _headerTemplateInput: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input,
    args: ['headerTemplate']
  }],
  _headerTemplateQuery: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.ContentChild,
    args: [DataTableColumnHeaderDirective, {
      read: _angular_core__WEBPACK_IMPORTED_MODULE_4__.TemplateRef,
      static: true
    }]
  }],
  _treeToggleTemplateInput: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input,
    args: ['treeToggleTemplate']
  }],
  _treeToggleTemplateQuery: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.ContentChild,
    args: [DataTableColumnCellTreeToggle, {
      read: _angular_core__WEBPACK_IMPORTED_MODULE_4__.TemplateRef,
      static: true
    }]
  }]
};

var DatatableRowDetailTemplateDirective = function DatatableRowDetailTemplateDirective(template) {
  (0,C_Users_SAAD_Desktop_frontend_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_2__.default)(this, DatatableRowDetailTemplateDirective);

  this.template = template;
};

DatatableRowDetailTemplateDirective.ɵfac = function DatatableRowDetailTemplateDirective_Factory(t) {
  return new (t || DatatableRowDetailTemplateDirective)(_angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_4__.TemplateRef));
};

DatatableRowDetailTemplateDirective.ɵdir = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵdefineDirective"]({
  type: DatatableRowDetailTemplateDirective,
  selectors: [["", "ngx-datatable-row-detail-template", ""]]
});

DatatableRowDetailTemplateDirective.ctorParameters = function () {
  return [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.TemplateRef
  }];
};

var DatatableRowDetailDirective = /*#__PURE__*/function () {
  function DatatableRowDetailDirective() {
    (0,C_Users_SAAD_Desktop_frontend_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_2__.default)(this, DatatableRowDetailDirective);

    /**
     * The detail row height is required especially
     * when virtual scroll is enabled.
     */
    this.rowHeight = 0;
    /**
     * Row detail row visbility was toggled.
     */

    this.toggle = new _angular_core__WEBPACK_IMPORTED_MODULE_4__.EventEmitter();
  }

  (0,C_Users_SAAD_Desktop_frontend_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_3__.default)(DatatableRowDetailDirective, [{
    key: "template",
    get: function get() {
      return this._templateInput || this._templateQuery;
    }
    /**
     * Toggle the expansion of the row
     */

  }, {
    key: "toggleExpandRow",
    value: function toggleExpandRow(row) {
      this.toggle.emit({
        type: 'row',
        value: row
      });
    }
    /**
     * API method to expand all the rows.
     */

  }, {
    key: "expandAllRows",
    value: function expandAllRows() {
      this.toggle.emit({
        type: 'all',
        value: true
      });
    }
    /**
     * API method to collapse all the rows.
     */

  }, {
    key: "collapseAllRows",
    value: function collapseAllRows() {
      this.toggle.emit({
        type: 'all',
        value: false
      });
    }
  }]);

  return DatatableRowDetailDirective;
}();

DatatableRowDetailDirective.ɵfac = function DatatableRowDetailDirective_Factory(t) {
  return new (t || DatatableRowDetailDirective)();
};

DatatableRowDetailDirective.ɵdir = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵdefineDirective"]({
  type: DatatableRowDetailDirective,
  selectors: [["ngx-datatable-row-detail"]],
  contentQueries: function DatatableRowDetailDirective_ContentQueries(rf, ctx, dirIndex) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵcontentQuery"](dirIndex, DatatableRowDetailTemplateDirective, 7, _angular_core__WEBPACK_IMPORTED_MODULE_4__.TemplateRef);
    }

    if (rf & 2) {
      var _t;

      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵloadQuery"]()) && (ctx._templateQuery = _t.first);
    }
  },
  inputs: {
    rowHeight: "rowHeight",
    _templateInput: ["template", "_templateInput"]
  },
  outputs: {
    toggle: "toggle"
  }
});
DatatableRowDetailDirective.propDecorators = {
  rowHeight: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
  }],
  _templateInput: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input,
    args: ['template']
  }],
  _templateQuery: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.ContentChild,
    args: [DatatableRowDetailTemplateDirective, {
      read: _angular_core__WEBPACK_IMPORTED_MODULE_4__.TemplateRef,
      static: true
    }]
  }],
  toggle: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Output
  }]
};

var DatatableFooterDirective = /*#__PURE__*/function () {
  function DatatableFooterDirective() {
    (0,C_Users_SAAD_Desktop_frontend_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_2__.default)(this, DatatableFooterDirective);
  }

  (0,C_Users_SAAD_Desktop_frontend_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_3__.default)(DatatableFooterDirective, [{
    key: "template",
    get: function get() {
      return this._templateInput || this._templateQuery;
    }
  }]);

  return DatatableFooterDirective;
}();

DatatableFooterDirective.ɵfac = function DatatableFooterDirective_Factory(t) {
  return new (t || DatatableFooterDirective)();
};

DatatableFooterDirective.ɵdir = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵdefineDirective"]({
  type: DatatableFooterDirective,
  selectors: [["ngx-datatable-footer"]],
  contentQueries: function DatatableFooterDirective_ContentQueries(rf, ctx, dirIndex) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵcontentQuery"](dirIndex, DataTableFooterTemplateDirective, 5, _angular_core__WEBPACK_IMPORTED_MODULE_4__.TemplateRef);
    }

    if (rf & 2) {
      var _t;

      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵloadQuery"]()) && (ctx._templateQuery = _t.first);
    }
  },
  inputs: {
    footerHeight: "footerHeight",
    totalMessage: "totalMessage",
    selectedMessage: "selectedMessage",
    pagerLeftArrowIcon: "pagerLeftArrowIcon",
    pagerRightArrowIcon: "pagerRightArrowIcon",
    pagerPreviousIcon: "pagerPreviousIcon",
    pagerNextIcon: "pagerNextIcon",
    _templateInput: ["template", "_templateInput"]
  }
});
DatatableFooterDirective.propDecorators = {
  footerHeight: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
  }],
  totalMessage: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
  }],
  selectedMessage: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
  }],
  pagerLeftArrowIcon: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
  }],
  pagerRightArrowIcon: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
  }],
  pagerPreviousIcon: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
  }],
  pagerNextIcon: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
  }],
  _templateInput: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input,
    args: ['template']
  }],
  _templateQuery: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.ContentChild,
    args: [DataTableFooterTemplateDirective, {
      read: _angular_core__WEBPACK_IMPORTED_MODULE_4__.TemplateRef
    }]
  }]
};
/**
 * Returns the columns by pin.
 */

function columnsByPin(cols) {
  var ret = {
    left: [],
    center: [],
    right: []
  };

  if (cols) {
    var _iterator5 = (0,C_Users_SAAD_Desktop_frontend_node_modules_babel_runtime_helpers_esm_createForOfIteratorHelper__WEBPACK_IMPORTED_MODULE_1__.default)(cols),
        _step5;

    try {
      for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
        var col = _step5.value;

        if (col.frozenLeft) {
          ret.left.push(col);
        } else if (col.frozenRight) {
          ret.right.push(col);
        } else {
          ret.center.push(col);
        }
      }
    } catch (err) {
      _iterator5.e(err);
    } finally {
      _iterator5.f();
    }
  }

  return ret;
}
/**
 * Returns the widths of all group sets of a column
 */


function columnGroupWidths(groups, all) {
  return {
    left: columnTotalWidth(groups.left),
    center: columnTotalWidth(groups.center),
    right: columnTotalWidth(groups.right),
    total: Math.floor(columnTotalWidth(all))
  };
}
/**
 * Calculates the total width of all columns and their groups
 */


function columnTotalWidth(columns, prop) {
  var totalWidth = 0;

  if (columns) {
    var _iterator6 = (0,C_Users_SAAD_Desktop_frontend_node_modules_babel_runtime_helpers_esm_createForOfIteratorHelper__WEBPACK_IMPORTED_MODULE_1__.default)(columns),
        _step6;

    try {
      for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
        var c = _step6.value;
        var has = prop && c[prop];
        var width = has ? c[prop] : c.width;
        totalWidth = totalWidth + parseFloat(width);
      }
    } catch (err) {
      _iterator6.e(err);
    } finally {
      _iterator6.f();
    }
  }

  return totalWidth;
}
/**
 * Calculates the total width of all columns and their groups
 */


function columnsTotalWidth(columns, prop) {
  var totalWidth = 0;

  var _iterator7 = (0,C_Users_SAAD_Desktop_frontend_node_modules_babel_runtime_helpers_esm_createForOfIteratorHelper__WEBPACK_IMPORTED_MODULE_1__.default)(columns),
      _step7;

  try {
    for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
      var column = _step7.value;
      var has = prop && column[prop];
      totalWidth = totalWidth + (has ? column[prop] : column.width);
    }
  } catch (err) {
    _iterator7.e(err);
  } finally {
    _iterator7.f();
  }

  return totalWidth;
}

function columnsByPinArr(val) {
  var colsByPinArr = [];
  var colsByPin = columnsByPin(val);
  colsByPinArr.push({
    type: 'left',
    columns: colsByPin['left']
  });
  colsByPinArr.push({
    type: 'center',
    columns: colsByPin['center']
  });
  colsByPinArr.push({
    type: 'right',
    columns: colsByPin['right']
  });
  return colsByPinArr;
}
/**
 * This object contains the cache of the various row heights that are present inside
 * the data table.   Its based on Fenwick tree data structure that helps with
 * querying sums that have time complexity of log n.
 *
 * Fenwick Tree Credits: http://petr-mitrichev.blogspot.com/2013/05/fenwick-tree-range-updates.html
 * https://github.com/mikolalysenko/fenwick-tree
 *
 */


var RowHeightCache = /*#__PURE__*/function () {
  function RowHeightCache() {
    (0,C_Users_SAAD_Desktop_frontend_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_2__.default)(this, RowHeightCache);

    /**
     * Tree Array stores the cumulative information of the row heights to perform efficient
     * range queries and updates.  Currently the tree is initialized to the base row
     * height instead of the detail row height.
     */
    this.treeArray = [];
  }
  /**
   * Clear the Tree array.
   */


  (0,C_Users_SAAD_Desktop_frontend_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_3__.default)(RowHeightCache, [{
    key: "clearCache",
    value: function clearCache() {
      this.treeArray = [];
    }
    /**
     * Initialize the Fenwick tree with row Heights.
     *
     * @param rows The array of rows which contain the expanded status.
     * @param rowHeight The row height.
     * @param detailRowHeight The detail row height.
     */

  }, {
    key: "initCache",
    value: function initCache(details) {
      var rows = details.rows,
          rowHeight = details.rowHeight,
          detailRowHeight = details.detailRowHeight,
          externalVirtual = details.externalVirtual,
          rowCount = details.rowCount,
          rowIndexes = details.rowIndexes,
          rowExpansions = details.rowExpansions;
      var isFn = typeof rowHeight === 'function';
      var isDetailFn = typeof detailRowHeight === 'function';

      if (!isFn && isNaN(rowHeight)) {
        throw new Error("Row Height cache initialization failed. Please ensure that 'rowHeight' is a\n        valid number or function value: (".concat(rowHeight, ") when 'scrollbarV' is enabled."));
      } // Add this additional guard in case detailRowHeight is set to 'auto' as it wont work.


      if (!isDetailFn && isNaN(detailRowHeight)) {
        throw new Error("Row Height cache initialization failed. Please ensure that 'detailRowHeight' is a\n        valid number or function value: (".concat(detailRowHeight, ") when 'scrollbarV' is enabled."));
      }

      var n = externalVirtual ? rowCount : rows.length;
      this.treeArray = new Array(n);

      for (var i = 0; i < n; ++i) {
        this.treeArray[i] = 0;
      }

      for (var _i2 = 0; _i2 < n; ++_i2) {
        var row = rows[_i2];
        var currentRowHeight = rowHeight;

        if (isFn) {
          currentRowHeight = rowHeight(row);
        } // Add the detail row height to the already expanded rows.
        // This is useful for the table that goes through a filter or sort.


        var expanded = rowExpansions.has(row);

        if (row && expanded) {
          if (isDetailFn) {
            var index = rowIndexes.get(row);
            currentRowHeight += detailRowHeight(row, index);
          } else {
            currentRowHeight += detailRowHeight;
          }
        }

        this.update(_i2, currentRowHeight);
      }
    }
    /**
     * Given the ScrollY position i.e. sum, provide the rowIndex
     * that is present in the current view port.  Below handles edge cases.
     */

  }, {
    key: "getRowIndex",
    value: function getRowIndex(scrollY) {
      if (scrollY === 0) return 0;
      return this.calcRowIndex(scrollY);
    }
    /**
     * When a row is expanded or rowHeight is changed, update the height.  This can
     * be utilized in future when Angular Data table supports dynamic row heights.
     */

  }, {
    key: "update",
    value: function update(atRowIndex, byRowHeight) {
      if (!this.treeArray.length) {
        throw new Error("Update at index ".concat(atRowIndex, " with value ").concat(byRowHeight, " failed:\n        Row Height cache not initialized."));
      }

      var n = this.treeArray.length;
      atRowIndex |= 0;

      while (atRowIndex < n) {
        this.treeArray[atRowIndex] += byRowHeight;
        atRowIndex |= atRowIndex + 1;
      }
    }
    /**
     * Range Sum query from 1 to the rowIndex
     */

  }, {
    key: "query",
    value: function query(atIndex) {
      if (!this.treeArray.length) {
        throw new Error("query at index ".concat(atIndex, " failed: Fenwick tree array not initialized."));
      }

      var sum = 0;
      atIndex |= 0;

      while (atIndex >= 0) {
        sum += this.treeArray[atIndex];
        atIndex = (atIndex & atIndex + 1) - 1;
      }

      return sum;
    }
    /**
     * Find the total height between 2 row indexes
     */

  }, {
    key: "queryBetween",
    value: function queryBetween(atIndexA, atIndexB) {
      return this.query(atIndexB) - this.query(atIndexA - 1);
    }
    /**
     * Given the ScrollY position i.e. sum, provide the rowIndex
     * that is present in the current view port.
     */

  }, {
    key: "calcRowIndex",
    value: function calcRowIndex(sum) {
      if (!this.treeArray.length) return 0;
      var pos = -1;
      var dataLength = this.treeArray.length; // Get the highest bit for the block size.

      var highestBit = Math.pow(2, dataLength.toString(2).length - 1);

      for (var blockSize = highestBit; blockSize !== 0; blockSize >>= 1) {
        var nextPos = pos + blockSize;

        if (nextPos < dataLength && sum >= this.treeArray[nextPos]) {
          sum -= this.treeArray[nextPos];
          pos = nextPos;
        }
      }

      return pos + 1;
    }
  }]);

  return RowHeightCache;
}();

var cache = {};
var testStyle = typeof document !== 'undefined' ? document.createElement('div').style : undefined;

var ɵ0 = function ɵ0() {
  var styles = typeof window !== 'undefined' ? window.getComputedStyle(document.documentElement, '') : undefined;
  var match = typeof styles !== 'undefined' ? Array.prototype.slice.call(styles).join('').match(/-(moz|webkit|ms)-/) : null;
  var pre = match !== null ? match[1] : undefined; // tslint:disable-next-line: tsr-detect-non-literal-regexp

  var dom = typeof pre !== 'undefined' ? 'WebKit|Moz|MS|O'.match(new RegExp('(' + pre + ')', 'i'))[1] : undefined;
  return dom ? {
    dom: dom,
    lowercase: pre,
    css: "-".concat(pre, "-"),
    js: pre[0].toUpperCase() + pre.substr(1)
  } : undefined;
}; // Get Prefix
// http://davidwalsh.name/vendor-prefix


var prefix = ɵ0();

function getVendorPrefixedName(property) {
  var name = camelCase(property);

  if (!cache[name]) {
    if (prefix !== undefined && testStyle[prefix.css + property] !== undefined) {
      cache[name] = prefix.css + property;
    } else if (testStyle[property] !== undefined) {
      cache[name] = property;
    }
  }

  return cache[name];
} // browser detection and prefixing tools


var transform = typeof window !== 'undefined' ? getVendorPrefixedName('transform') : undefined;
var backfaceVisibility = typeof window !== 'undefined' ? getVendorPrefixedName('backfaceVisibility') : undefined;
var hasCSSTransforms = typeof window !== 'undefined' ? !!getVendorPrefixedName('transform') : undefined;
var hasCSS3DTransforms = typeof window !== 'undefined' ? !!getVendorPrefixedName('perspective') : undefined;
var ua = typeof window !== 'undefined' ? window.navigator.userAgent : 'Chrome';
var isSafari = /Safari\//.test(ua) && !/Chrome\//.test(ua);

function translateXY(styles, x, y) {
  if (typeof transform !== 'undefined' && hasCSSTransforms) {
    if (!isSafari && hasCSS3DTransforms) {
      styles[transform] = "translate3d(".concat(x, "px, ").concat(y, "px, 0)");
      styles[backfaceVisibility] = 'hidden';
    } else {
      styles[camelCase(transform)] = "translate(".concat(x, "px, ").concat(y, "px)");
    }
  } else {
    styles.top = "".concat(y, "px");
    styles.left = "".concat(x, "px");
  }
}

var DataTableBodyComponent = /*#__PURE__*/function () {
  /**
   * Creates an instance of DataTableBodyComponent.
   */
  function DataTableBodyComponent(cd) {
    var _this10 = this;

    (0,C_Users_SAAD_Desktop_frontend_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_2__.default)(this, DataTableBodyComponent);

    this.cd = cd;
    this.selected = [];
    this.scroll = new _angular_core__WEBPACK_IMPORTED_MODULE_4__.EventEmitter();
    this.page = new _angular_core__WEBPACK_IMPORTED_MODULE_4__.EventEmitter();
    this.activate = new _angular_core__WEBPACK_IMPORTED_MODULE_4__.EventEmitter();
    this.select = new _angular_core__WEBPACK_IMPORTED_MODULE_4__.EventEmitter();
    this.detailToggle = new _angular_core__WEBPACK_IMPORTED_MODULE_4__.EventEmitter();
    this.rowContextmenu = new _angular_core__WEBPACK_IMPORTED_MODULE_4__.EventEmitter(false);
    this.treeAction = new _angular_core__WEBPACK_IMPORTED_MODULE_4__.EventEmitter();
    this.rowHeightsCache = new RowHeightCache();
    this.temp = [];
    this.offsetY = 0;
    this.indexes = {};
    this.rowIndexes = new WeakMap();
    this.rowExpansions = [];
    /**
     * Get the height of the detail row.
     */

    this.getDetailRowHeight = function (row, index) {
      if (!_this10.rowDetail) {
        return 0;
      }

      var rowHeight = _this10.rowDetail.rowHeight;
      return typeof rowHeight === 'function' ? rowHeight(row, index) : rowHeight;
    }; // declare fn here so we can get access to the `this` property


    this.rowTrackingFn = function (index, row) {
      var idx = _this10.getRowIndex(row);

      if (_this10.trackByProp) {
        return row[_this10.trackByProp];
      } else {
        return idx;
      }
    };
  }

  (0,C_Users_SAAD_Desktop_frontend_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_3__.default)(DataTableBodyComponent, [{
    key: "pageSize",
    get: function get() {
      return this._pageSize;
    },
    set: function set(val) {
      this._pageSize = val;
      this.recalcLayout();
    }
  }, {
    key: "rows",
    get: function get() {
      return this._rows;
    },
    set: function set(val) {
      this._rows = val;
      this.recalcLayout();
    }
  }, {
    key: "columns",
    get: function get() {
      return this._columns;
    },
    set: function set(val) {
      this._columns = val;
      var colsByPin = columnsByPin(val);
      this.columnGroupWidths = columnGroupWidths(colsByPin, val);
    }
  }, {
    key: "offset",
    get: function get() {
      return this._offset;
    },
    set: function set(val) {
      this._offset = val;
      if (!this.scrollbarV || this.scrollbarV && !this.virtualization) this.recalcLayout();
    }
  }, {
    key: "rowCount",
    get: function get() {
      return this._rowCount;
    },
    set: function set(val) {
      this._rowCount = val;
      this.recalcLayout();
    }
  }, {
    key: "bodyWidth",
    get: function get() {
      if (this.scrollbarH) {
        return this.innerWidth + 'px';
      } else {
        return '100%';
      }
    }
  }, {
    key: "bodyHeight",
    get: function get() {
      return this._bodyHeight;
    }
    /**
     * Returns if selection is enabled.
     */
    ,
    set: function set(val) {
      if (this.scrollbarV) {
        this._bodyHeight = val + 'px';
      } else {
        this._bodyHeight = 'auto';
      }

      this.recalcLayout();
    }
  }, {
    key: "selectEnabled",
    get: function get() {
      return !!this.selectionType;
    }
    /**
     * Property that would calculate the height of scroll bar
     * based on the row heights cache for virtual scroll and virtualization. Other scenarios
     * calculate scroll height automatically (as height will be undefined).
     */

  }, {
    key: "scrollHeight",
    get: function get() {
      if (this.scrollbarV && this.virtualization && this.rowCount) {
        return this.rowHeightsCache.query(this.rowCount - 1);
      } // avoid TS7030: Not all code paths return a value.


      return undefined;
    }
    /**
     * Called after the constructor, initializing input properties
     */

  }, {
    key: "ngOnInit",
    value: function ngOnInit() {
      var _this11 = this;

      if (this.rowDetail) {
        this.listener = this.rowDetail.toggle.subscribe(function (_ref5) {
          var type = _ref5.type,
              value = _ref5.value;

          if (type === 'row') {
            _this11.toggleRowExpansion(value);
          }

          if (type === 'all') {
            _this11.toggleAllRows(value);
          } // Refresh rows after toggle
          // Fixes #883


          _this11.updateIndexes();

          _this11.updateRows();

          _this11.cd.markForCheck();
        });
      }

      if (this.groupHeader) {
        this.listener = this.groupHeader.toggle.subscribe(function (_ref6) {
          var type = _ref6.type,
              value = _ref6.value;

          if (type === 'group') {
            _this11.toggleRowExpansion(value);
          }

          if (type === 'all') {
            _this11.toggleAllRows(value);
          } // Refresh rows after toggle
          // Fixes #883


          _this11.updateIndexes();

          _this11.updateRows();

          _this11.cd.markForCheck();
        });
      }
    }
    /**
     * Called once, before the instance is destroyed.
     */

  }, {
    key: "ngOnDestroy",
    value: function ngOnDestroy() {
      if (this.rowDetail || this.groupHeader) {
        this.listener.unsubscribe();
      }
    }
    /**
     * Updates the Y offset given a new offset.
     */

  }, {
    key: "updateOffsetY",
    value: function updateOffsetY(offset) {
      // scroller is missing on empty table
      if (!this.scroller) {
        return;
      }

      if (this.scrollbarV && this.virtualization && offset) {
        // First get the row Index that we need to move to.
        var rowIndex = this.pageSize * offset;
        offset = this.rowHeightsCache.query(rowIndex - 1);
      } else if (this.scrollbarV && !this.virtualization) {
        offset = 0;
      }

      this.scroller.setOffset(offset || 0);
    }
    /**
     * Body was scrolled, this is mainly useful for
     * when a user is server-side pagination via virtual scroll.
     */

  }, {
    key: "onBodyScroll",
    value: function onBodyScroll(event) {
      var scrollYPos = event.scrollYPos;
      var scrollXPos = event.scrollXPos; // if scroll change, trigger update
      // this is mainly used for header cell positions

      if (this.offsetY !== scrollYPos || this.offsetX !== scrollXPos) {
        this.scroll.emit({
          offsetY: scrollYPos,
          offsetX: scrollXPos
        });
      }

      this.offsetY = scrollYPos;
      this.offsetX = scrollXPos;
      this.updateIndexes();
      this.updatePage(event.direction);
      this.updateRows();
    }
    /**
     * Updates the page given a direction.
     */

  }, {
    key: "updatePage",
    value: function updatePage(direction) {
      var offset = this.indexes.first / this.pageSize;

      if (direction === 'up') {
        offset = Math.ceil(offset);
      } else if (direction === 'down') {
        offset = Math.floor(offset);
      }

      if (direction !== undefined && !isNaN(offset)) {
        this.page.emit({
          offset: offset
        });
      }
    }
    /**
     * Updates the rows in the view port
     */

  }, {
    key: "updateRows",
    value: function updateRows() {
      var _this12 = this;

      var _this$indexes = this.indexes,
          first = _this$indexes.first,
          last = _this$indexes.last;
      var rowIndex = first;
      var idx = 0;
      var temp = []; // if grouprowsby has been specified treat row paging
      // parameters as group paging parameters ie if limit 10 has been
      // specified treat it as 10 groups rather than 10 rows

      if (this.groupedRows) {
        var maxRowsPerGroup = 3; // if there is only one group set the maximum number of
        // rows per group the same as the total number of rows

        if (this.groupedRows.length === 1) {
          maxRowsPerGroup = this.groupedRows[0].value.length;
        }

        while (rowIndex < last && rowIndex < this.groupedRows.length) {
          // Add the groups into this page
          var group = this.groupedRows[rowIndex];
          this.rowIndexes.set(group, rowIndex);

          if (group.value) {
            // add indexes for each group item
            group.value.forEach(function (g, i) {
              var _idx = "".concat(rowIndex, "-").concat(i);

              _this12.rowIndexes.set(g, _idx);
            });
          }

          temp[idx] = group;
          idx++; // Group index in this context

          rowIndex++;
        }
      } else {
        while (rowIndex < last && rowIndex < this.rowCount) {
          var row = this.rows[rowIndex];

          if (row) {
            // add indexes for each row
            this.rowIndexes.set(row, rowIndex);
            temp[idx] = row;
          }

          idx++;
          rowIndex++;
        }
      }

      this.temp = temp;
    }
    /**
     * Get the row height
     */

  }, {
    key: "getRowHeight",
    value: function getRowHeight(row) {
      // if its a function return it
      if (typeof this.rowHeight === 'function') {
        return this.rowHeight(row);
      }

      return this.rowHeight;
    }
    /**
     * @param group the group with all rows
     */

  }, {
    key: "getGroupHeight",
    value: function getGroupHeight(group) {
      var rowHeight = 0;

      if (group.value) {
        for (var index = 0; index < group.value.length; index++) {
          rowHeight += this.getRowAndDetailHeight(group.value[index]);
        }
      }

      return rowHeight;
    }
    /**
     * Calculate row height based on the expanded state of the row.
     */

  }, {
    key: "getRowAndDetailHeight",
    value: function getRowAndDetailHeight(row) {
      var rowHeight = this.getRowHeight(row);
      var expanded = this.getRowExpanded(row); // Adding detail row height if its expanded.

      if (expanded) {
        rowHeight += this.getDetailRowHeight(row);
      }

      return rowHeight;
    }
    /**
     * Calculates the styles for the row so that the rows can be moved in 2D space
     * during virtual scroll inside the DOM.   In the below case the Y position is
     * manipulated.   As an example, if the height of row 0 is 30 px and row 1 is
     * 100 px then following styles are generated:
     *
     * transform: translate3d(0px, 0px, 0px);    ->  row0
     * transform: translate3d(0px, 30px, 0px);   ->  row1
     * transform: translate3d(0px, 130px, 0px);  ->  row2
     *
     * Row heights have to be calculated based on the row heights cache as we wont
     * be able to determine which row is of what height before hand.  In the above
     * case the positionY of the translate3d for row2 would be the sum of all the
     * heights of the rows before it (i.e. row0 and row1).
     *
     * @param rows the row that needs to be placed in the 2D space.
     * @returns the CSS3 style to be applied
     *
     * @memberOf DataTableBodyComponent
     */

  }, {
    key: "getRowsStyles",
    value: function getRowsStyles(rows) {
      var styles = {}; // only add styles for the group if there is a group

      if (this.groupedRows) {
        styles.width = this.columnGroupWidths.total;
      }

      if (this.scrollbarV && this.virtualization) {
        var idx = 0;

        if (this.groupedRows) {
          // Get the latest row rowindex in a group
          var row = rows[rows.length - 1];
          idx = row ? this.getRowIndex(row) : 0;
        } else {
          idx = this.getRowIndex(rows);
        } // const pos = idx * rowHeight;
        // The position of this row would be the sum of all row heights
        // until the previous row position.


        var pos = this.rowHeightsCache.query(idx - 1);
        translateXY(styles, 0, pos);
      }

      return styles;
    }
    /**
     * Calculate bottom summary row offset for scrollbar mode.
     * For more information about cache and offset calculation
     * see description for `getRowsStyles` method
     *
     * @returns the CSS3 style to be applied
     *
     * @memberOf DataTableBodyComponent
     */

  }, {
    key: "getBottomSummaryRowStyles",
    value: function getBottomSummaryRowStyles() {
      if (!this.scrollbarV || !this.rows || !this.rows.length) {
        return null;
      }

      var styles = {
        position: 'absolute'
      };
      var pos = this.rowHeightsCache.query(this.rows.length - 1);
      translateXY(styles, 0, pos);
      return styles;
    }
    /**
     * Hides the loading indicator
     */

  }, {
    key: "hideIndicator",
    value: function hideIndicator() {
      var _this13 = this;

      setTimeout(function () {
        return _this13.loadingIndicator = false;
      }, 500);
    }
    /**
     * Updates the index of the rows in the viewport
     */

  }, {
    key: "updateIndexes",
    value: function updateIndexes() {
      var first = 0;
      var last = 0;

      if (this.scrollbarV) {
        if (this.virtualization) {
          // Calculation of the first and last indexes will be based on where the
          // scrollY position would be at.  The last index would be the one
          // that shows up inside the view port the last.
          var height = parseInt(this.bodyHeight, 0);
          first = this.rowHeightsCache.getRowIndex(this.offsetY);
          last = this.rowHeightsCache.getRowIndex(height + this.offsetY) + 1;
        } else {
          // If virtual rows are not needed
          // We render all in one go
          first = 0;
          last = this.rowCount;
        }
      } else {
        // The server is handling paging and will pass an array that begins with the
        // element at a specified offset.  first should always be 0 with external paging.
        if (!this.externalPaging) {
          first = Math.max(this.offset * this.pageSize, 0);
        }

        last = Math.min(first + this.pageSize, this.rowCount);
      }

      this.indexes = {
        first: first,
        last: last
      };
    }
    /**
     * Refreshes the full Row Height cache.  Should be used
     * when the entire row array state has changed.
     */

  }, {
    key: "refreshRowHeightCache",
    value: function refreshRowHeightCache() {
      if (!this.scrollbarV || this.scrollbarV && !this.virtualization) {
        return;
      } // clear the previous row height cache if already present.
      // this is useful during sorts, filters where the state of the
      // rows array is changed.


      this.rowHeightsCache.clearCache(); // Initialize the tree only if there are rows inside the tree.

      if (this.rows && this.rows.length) {
        var rowExpansions = new Set();

        var _iterator8 = (0,C_Users_SAAD_Desktop_frontend_node_modules_babel_runtime_helpers_esm_createForOfIteratorHelper__WEBPACK_IMPORTED_MODULE_1__.default)(this.rows),
            _step8;

        try {
          for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {
            var row = _step8.value;

            if (this.getRowExpanded(row)) {
              rowExpansions.add(row);
            }
          }
        } catch (err) {
          _iterator8.e(err);
        } finally {
          _iterator8.f();
        }

        this.rowHeightsCache.initCache({
          rows: this.rows,
          rowHeight: this.rowHeight,
          detailRowHeight: this.getDetailRowHeight,
          externalVirtual: this.scrollbarV && this.externalPaging,
          rowCount: this.rowCount,
          rowIndexes: this.rowIndexes,
          rowExpansions: rowExpansions
        });
      }
    }
    /**
     * Gets the index for the view port
     */

  }, {
    key: "getAdjustedViewPortIndex",
    value: function getAdjustedViewPortIndex() {
      // Capture the row index of the first row that is visible on the viewport.
      // If the scroll bar is just below the row which is highlighted then make that as the
      // first index.
      var viewPortFirstRowIndex = this.indexes.first;

      if (this.scrollbarV && this.virtualization) {
        var offsetScroll = this.rowHeightsCache.query(viewPortFirstRowIndex - 1);
        return offsetScroll <= this.offsetY ? viewPortFirstRowIndex - 1 : viewPortFirstRowIndex;
      }

      return viewPortFirstRowIndex;
    }
    /**
     * Toggle the Expansion of the row i.e. if the row is expanded then it will
     * collapse and vice versa.   Note that the expanded status is stored as
     * a part of the row object itself as we have to preserve the expanded row
     * status in case of sorting and filtering of the row set.
     */

  }, {
    key: "toggleRowExpansion",
    value: function toggleRowExpansion(row) {
      // Capture the row index of the first row that is visible on the viewport.
      var viewPortFirstRowIndex = this.getAdjustedViewPortIndex();
      var rowExpandedIdx = this.getRowExpandedIdx(row, this.rowExpansions);
      var expanded = rowExpandedIdx > -1; // If the detailRowHeight is auto --> only in case of non-virtualized scroll

      if (this.scrollbarV && this.virtualization) {
        var detailRowHeight = this.getDetailRowHeight(row) * (expanded ? -1 : 1); // const idx = this.rowIndexes.get(row) || 0;

        var idx = this.getRowIndex(row);
        this.rowHeightsCache.update(idx, detailRowHeight);
      } // Update the toggled row and update thive nevere heights in the cache.


      if (expanded) {
        this.rowExpansions.splice(rowExpandedIdx, 1);
      } else {
        this.rowExpansions.push(row);
      }

      this.detailToggle.emit({
        rows: [row],
        currentIndex: viewPortFirstRowIndex
      });
    }
    /**
     * Expand/Collapse all the rows no matter what their state is.
     */

  }, {
    key: "toggleAllRows",
    value: function toggleAllRows(expanded) {
      // clear prev expansions
      this.rowExpansions = []; // Capture the row index of the first row that is visible on the viewport.

      var viewPortFirstRowIndex = this.getAdjustedViewPortIndex();

      if (expanded) {
        var _iterator9 = (0,C_Users_SAAD_Desktop_frontend_node_modules_babel_runtime_helpers_esm_createForOfIteratorHelper__WEBPACK_IMPORTED_MODULE_1__.default)(this.rows),
            _step9;

        try {
          for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {
            var row = _step9.value;
            this.rowExpansions.push(row);
          }
        } catch (err) {
          _iterator9.e(err);
        } finally {
          _iterator9.f();
        }
      }

      if (this.scrollbarV) {
        // Refresh the full row heights cache since every row was affected.
        this.recalcLayout();
      } // Emit all rows that have been expanded.


      this.detailToggle.emit({
        rows: this.rows,
        currentIndex: viewPortFirstRowIndex
      });
    }
    /**
     * Recalculates the table
     */

  }, {
    key: "recalcLayout",
    value: function recalcLayout() {
      this.refreshRowHeightCache();
      this.updateIndexes();
      this.updateRows();
    }
    /**
     * Tracks the column
     */

  }, {
    key: "columnTrackingFn",
    value: function columnTrackingFn(index, column) {
      return column.$$id;
    }
    /**
     * Gets the row pinning group styles
     */

  }, {
    key: "stylesByGroup",
    value: function stylesByGroup(group) {
      var widths = this.columnGroupWidths;
      var offsetX = this.offsetX;
      var styles = {
        width: "".concat(widths[group], "px")
      };

      if (group === 'left') {
        translateXY(styles, offsetX, 0);
      } else if (group === 'right') {
        var bodyWidth = parseInt(this.innerWidth + '', 0);
        var totalDiff = widths.total - bodyWidth;
        var offsetDiff = totalDiff - offsetX;
        var offset = offsetDiff * -1;
        translateXY(styles, offset, 0);
      }

      return styles;
    }
    /**
     * Returns if the row was expanded and set default row expansion when row expansion is empty
     */

  }, {
    key: "getRowExpanded",
    value: function getRowExpanded(row) {
      if (this.rowExpansions.length === 0 && this.groupExpansionDefault) {
        var _iterator10 = (0,C_Users_SAAD_Desktop_frontend_node_modules_babel_runtime_helpers_esm_createForOfIteratorHelper__WEBPACK_IMPORTED_MODULE_1__.default)(this.groupedRows),
            _step10;

        try {
          for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {
            var group = _step10.value;
            this.rowExpansions.push(group);
          }
        } catch (err) {
          _iterator10.e(err);
        } finally {
          _iterator10.f();
        }
      }

      return this.getRowExpandedIdx(row, this.rowExpansions) > -1;
    }
  }, {
    key: "getRowExpandedIdx",
    value: function getRowExpandedIdx(row, expanded) {
      var _this14 = this;

      if (!expanded || !expanded.length) return -1;
      var rowId = this.rowIdentity(row);
      return expanded.findIndex(function (r) {
        var id = _this14.rowIdentity(r);

        return id === rowId;
      });
    }
    /**
     * Gets the row index given a row
     */

  }, {
    key: "getRowIndex",
    value: function getRowIndex(row) {
      return this.rowIndexes.get(row) || 0;
    }
  }, {
    key: "onTreeAction",
    value: function onTreeAction(row) {
      this.treeAction.emit({
        row: row
      });
    }
  }]);

  return DataTableBodyComponent;
}();

DataTableBodyComponent.ɵfac = function DataTableBodyComponent_Factory(t) {
  return new (t || DataTableBodyComponent)(_angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_4__.ChangeDetectorRef));
};

DataTableBodyComponent.ɵcmp = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵdefineComponent"]({
  type: DataTableBodyComponent,
  selectors: [["datatable-body"]],
  viewQuery: function DataTableBodyComponent_Query(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵviewQuery"](ScrollerComponent, 5);
    }

    if (rf & 2) {
      var _t;

      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵloadQuery"]()) && (ctx.scroller = _t.first);
    }
  },
  hostAttrs: [1, "datatable-body"],
  hostVars: 4,
  hostBindings: function DataTableBodyComponent_HostBindings(rf, ctx) {
    if (rf & 2) {
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵstyleProp"]("width", ctx.bodyWidth)("height", ctx.bodyHeight);
    }
  },
  inputs: {
    selected: "selected",
    pageSize: "pageSize",
    rows: "rows",
    columns: "columns",
    offset: "offset",
    rowCount: "rowCount",
    bodyHeight: "bodyHeight",
    offsetX: "offsetX",
    loadingIndicator: "loadingIndicator",
    scrollbarV: "scrollbarV",
    scrollbarH: "scrollbarH",
    externalPaging: "externalPaging",
    rowHeight: "rowHeight",
    emptyMessage: "emptyMessage",
    selectionType: "selectionType",
    rowIdentity: "rowIdentity",
    rowDetail: "rowDetail",
    groupHeader: "groupHeader",
    selectCheck: "selectCheck",
    displayCheck: "displayCheck",
    trackByProp: "trackByProp",
    rowClass: "rowClass",
    groupedRows: "groupedRows",
    groupExpansionDefault: "groupExpansionDefault",
    innerWidth: "innerWidth",
    groupRowsBy: "groupRowsBy",
    virtualization: "virtualization",
    summaryRow: "summaryRow",
    summaryPosition: "summaryPosition",
    summaryHeight: "summaryHeight"
  },
  outputs: {
    scroll: "scroll",
    page: "page",
    activate: "activate",
    select: "select",
    detailToggle: "detailToggle",
    rowContextmenu: "rowContextmenu",
    treeAction: "treeAction"
  },
  decls: 5,
  vars: 9,
  consts: [[4, "ngIf"], [3, "selected", "rows", "selectCheck", "selectEnabled", "selectionType", "rowIdentity", "select", "activate"], ["selector", ""], [3, "scrollbarV", "scrollbarH", "scrollHeight", "scrollWidth", "scroll", 4, "ngIf"], ["class", "empty-row", 3, "innerHTML", 4, "ngIf"], [3, "scrollbarV", "scrollbarH", "scrollHeight", "scrollWidth", "scroll"], [3, "rowHeight", "offsetX", "innerWidth", "rows", "columns", 4, "ngIf"], [3, "groupedRows", "innerWidth", "ngStyle", "rowDetail", "groupHeader", "offsetX", "detailRowHeight", "row", "expanded", "rowIndex", "rowContextmenu", 4, "ngFor", "ngForOf", "ngForTrackBy"], [3, "ngStyle", "rowHeight", "offsetX", "innerWidth", "rows", "columns", 4, "ngIf"], [3, "rowHeight", "offsetX", "innerWidth", "rows", "columns"], [3, "groupedRows", "innerWidth", "ngStyle", "rowDetail", "groupHeader", "offsetX", "detailRowHeight", "row", "expanded", "rowIndex", "rowContextmenu"], ["tabindex", "-1", 3, "isSelected", "innerWidth", "offsetX", "columns", "rowHeight", "row", "rowIndex", "expanded", "rowClass", "displayCheck", "treeStatus", "treeAction", "activate", 4, "ngIf", "ngIfElse"], ["groupedRowsTemplate", ""], ["tabindex", "-1", 3, "isSelected", "innerWidth", "offsetX", "columns", "rowHeight", "row", "rowIndex", "expanded", "rowClass", "displayCheck", "treeStatus", "treeAction", "activate"], ["tabindex", "-1", 3, "isSelected", "innerWidth", "offsetX", "columns", "rowHeight", "row", "group", "rowIndex", "expanded", "rowClass", "activate", 4, "ngFor", "ngForOf", "ngForTrackBy"], ["tabindex", "-1", 3, "isSelected", "innerWidth", "offsetX", "columns", "rowHeight", "row", "group", "rowIndex", "expanded", "rowClass", "activate"], [3, "ngStyle", "rowHeight", "offsetX", "innerWidth", "rows", "columns"], [1, "empty-row", 3, "innerHTML"]],
  template: function DataTableBodyComponent_Template(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtemplate"](0, DataTableBodyComponent_datatable_progress_0_Template, 1, 0, "datatable-progress", 0);
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](1, "datatable-selection", 1, 2);
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵlistener"]("select", function DataTableBodyComponent_Template_datatable_selection_select_1_listener($event) {
        return ctx.select.emit($event);
      })("activate", function DataTableBodyComponent_Template_datatable_selection_activate_1_listener($event) {
        return ctx.activate.emit($event);
      });
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtemplate"](3, DataTableBodyComponent_datatable_scroller_3_Template, 4, 8, "datatable-scroller", 3);
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtemplate"](4, DataTableBodyComponent_div_4_Template, 1, 1, "div", 4);
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]();
    }

    if (rf & 2) {
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("ngIf", ctx.loadingIndicator);
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("selected", ctx.selected)("rows", ctx.rows)("selectCheck", ctx.selectCheck)("selectEnabled", ctx.selectEnabled)("selectionType", ctx.selectionType)("rowIdentity", ctx.rowIdentity);
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"](2);
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("ngIf", ctx.rows == null ? null : ctx.rows.length);
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("ngIf", !(ctx.rows == null ? null : ctx.rows.length) && !ctx.loadingIndicator);
    }
  },
  directives: function directives() {
    return [_angular_common__WEBPACK_IMPORTED_MODULE_5__.NgIf, DataTableSelectionComponent, ProgressBarComponent, ScrollerComponent, _angular_common__WEBPACK_IMPORTED_MODULE_5__.NgForOf, DataTableSummaryRowComponent, DataTableRowWrapperComponent, _angular_common__WEBPACK_IMPORTED_MODULE_5__.NgStyle, DataTableBodyRowComponent];
  },
  encapsulation: 2,
  changeDetection: 0
});

DataTableBodyComponent.ctorParameters = function () {
  return [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.ChangeDetectorRef
  }];
};

DataTableBodyComponent.propDecorators = {
  scrollbarV: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
  }],
  scrollbarH: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
  }],
  loadingIndicator: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
  }],
  externalPaging: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
  }],
  rowHeight: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
  }],
  offsetX: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
  }],
  emptyMessage: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
  }],
  selectionType: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
  }],
  selected: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
  }],
  rowIdentity: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
  }],
  rowDetail: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
  }],
  groupHeader: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
  }],
  selectCheck: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
  }],
  displayCheck: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
  }],
  trackByProp: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
  }],
  rowClass: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
  }],
  groupedRows: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
  }],
  groupExpansionDefault: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
  }],
  innerWidth: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
  }],
  groupRowsBy: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
  }],
  virtualization: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
  }],
  summaryRow: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
  }],
  summaryPosition: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
  }],
  summaryHeight: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
  }],
  pageSize: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
  }],
  rows: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
  }],
  columns: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
  }],
  offset: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
  }],
  rowCount: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
  }],
  bodyWidth: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.HostBinding,
    args: ['style.width']
  }],
  bodyHeight: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
  }, {
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.HostBinding,
    args: ['style.height']
  }],
  scroll: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Output
  }],
  page: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Output
  }],
  activate: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Output
  }],
  select: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Output
  }],
  detailToggle: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Output
  }],
  rowContextmenu: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Output
  }],
  treeAction: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Output
  }],
  scroller: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.ViewChild,
    args: [ScrollerComponent]
  }]
};

var DataTableHeaderComponent = /*#__PURE__*/function () {
  function DataTableHeaderComponent(cd) {
    (0,C_Users_SAAD_Desktop_frontend_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_2__.default)(this, DataTableHeaderComponent);

    this.cd = cd;
    this.sort = new _angular_core__WEBPACK_IMPORTED_MODULE_4__.EventEmitter();
    this.reorder = new _angular_core__WEBPACK_IMPORTED_MODULE_4__.EventEmitter();
    this.resize = new _angular_core__WEBPACK_IMPORTED_MODULE_4__.EventEmitter();
    this.select = new _angular_core__WEBPACK_IMPORTED_MODULE_4__.EventEmitter();
    this.columnContextmenu = new _angular_core__WEBPACK_IMPORTED_MODULE_4__.EventEmitter(false);
    this._columnGroupWidths = {
      total: 100
    };
    this._styleByGroup = {
      left: {},
      center: {},
      right: {}
    };
    this.destroyed = false;
  }

  (0,C_Users_SAAD_Desktop_frontend_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_3__.default)(DataTableHeaderComponent, [{
    key: "innerWidth",
    get: function get() {
      return this._innerWidth;
    },
    set: function set(val) {
      var _this15 = this;

      this._innerWidth = val;
      setTimeout(function () {
        if (_this15._columns) {
          var colByPin = columnsByPin(_this15._columns);
          _this15._columnGroupWidths = columnGroupWidths(colByPin, _this15._columns);

          _this15.setStylesByGroup();
        }
      });
    }
  }, {
    key: "headerHeight",
    get: function get() {
      return this._headerHeight;
    },
    set: function set(val) {
      if (val !== 'auto') {
        this._headerHeight = "".concat(val, "px");
      } else {
        this._headerHeight = val;
      }
    }
  }, {
    key: "columns",
    get: function get() {
      return this._columns;
    },
    set: function set(val) {
      var _this16 = this;

      this._columns = val;
      var colsByPin = columnsByPin(val);
      this._columnsByPin = columnsByPinArr(val);
      setTimeout(function () {
        _this16._columnGroupWidths = columnGroupWidths(colsByPin, val);

        _this16.setStylesByGroup();
      });
    }
  }, {
    key: "offsetX",
    get: function get() {
      return this._offsetX;
    },
    set: function set(val) {
      this._offsetX = val;
      this.setStylesByGroup();
    }
  }, {
    key: "ngOnDestroy",
    value: function ngOnDestroy() {
      this.destroyed = true;
    }
  }, {
    key: "onLongPressStart",
    value: function onLongPressStart(_ref7) {
      var event = _ref7.event,
          model = _ref7.model;
      model.dragging = true;
      this.dragEventTarget = event;
    }
  }, {
    key: "onLongPressEnd",
    value: function onLongPressEnd(_ref8) {
      var _this17 = this;

      var event = _ref8.event,
          model = _ref8.model;
      this.dragEventTarget = event; // delay resetting so sort can be
      // prevented if we were dragging

      setTimeout(function () {
        // datatable component creates copies from columns on reorder
        // set dragging to false on new objects
        var column = _this17._columns.find(function (c) {
          return c.$$id === model.$$id;
        });

        if (column) {
          column.dragging = false;
        }
      }, 5);
    }
  }, {
    key: "headerWidth",
    get: function get() {
      if (this.scrollbarH) {
        return this.innerWidth + 'px';
      }

      return '100%';
    }
  }, {
    key: "trackByGroups",
    value: function trackByGroups(index, colGroup) {
      return colGroup.type;
    }
  }, {
    key: "columnTrackingFn",
    value: function columnTrackingFn(index, column) {
      return column.$$id;
    }
  }, {
    key: "onColumnResized",
    value: function onColumnResized(width, column) {
      if (width <= column.minWidth) {
        width = column.minWidth;
      } else if (width >= column.maxWidth) {
        width = column.maxWidth;
      }

      this.resize.emit({
        column: column,
        prevValue: column.width,
        newValue: width
      });
    }
  }, {
    key: "onColumnReordered",
    value: function onColumnReordered(_ref9) {
      var prevIndex = _ref9.prevIndex,
          newIndex = _ref9.newIndex,
          model = _ref9.model;
      var column = this.getColumn(newIndex);
      column.isTarget = false;
      column.targetMarkerContext = undefined;
      this.reorder.emit({
        column: model,
        prevValue: prevIndex,
        newValue: newIndex
      });
    }
  }, {
    key: "onTargetChanged",
    value: function onTargetChanged(_ref10) {
      var prevIndex = _ref10.prevIndex,
          newIndex = _ref10.newIndex,
          initialIndex = _ref10.initialIndex;

      if (prevIndex || prevIndex === 0) {
        var oldColumn = this.getColumn(prevIndex);
        oldColumn.isTarget = false;
        oldColumn.targetMarkerContext = undefined;
      }

      if (newIndex || newIndex === 0) {
        var newColumn = this.getColumn(newIndex);
        newColumn.isTarget = true;

        if (initialIndex !== newIndex) {
          newColumn.targetMarkerContext = {
            class: 'targetMarker '.concat(initialIndex > newIndex ? 'dragFromRight' : 'dragFromLeft')
          };
        }
      }
    }
  }, {
    key: "getColumn",
    value: function getColumn(index) {
      var leftColumnCount = this._columnsByPin[0].columns.length;

      if (index < leftColumnCount) {
        return this._columnsByPin[0].columns[index];
      }

      var centerColumnCount = this._columnsByPin[1].columns.length;

      if (index < leftColumnCount + centerColumnCount) {
        return this._columnsByPin[1].columns[index - leftColumnCount];
      }

      return this._columnsByPin[2].columns[index - leftColumnCount - centerColumnCount];
    }
  }, {
    key: "onSort",
    value: function onSort(_ref11) {
      var column = _ref11.column,
          prevValue = _ref11.prevValue,
          newValue = _ref11.newValue;

      // if we are dragging don't sort!
      if (column.dragging) {
        return;
      }

      var sorts = this.calcNewSorts(column, prevValue, newValue);
      this.sort.emit({
        sorts: sorts,
        column: column,
        prevValue: prevValue,
        newValue: newValue
      });
    }
  }, {
    key: "calcNewSorts",
    value: function calcNewSorts(column, prevValue, newValue) {
      var idx = 0;

      if (!this.sorts) {
        this.sorts = [];
      }

      var sorts = this.sorts.map(function (s, i) {
        s = Object.assign({}, s);

        if (s.prop === column.prop) {
          idx = i;
        }

        return s;
      });

      if (newValue === undefined) {
        sorts.splice(idx, 1);
      } else if (prevValue) {
        sorts[idx].dir = newValue;
      } else {
        if (this.sortType === SortType.single) {
          sorts.splice(0, this.sorts.length);
        }

        sorts.push({
          dir: newValue,
          prop: column.prop
        });
      }

      return sorts;
    }
  }, {
    key: "setStylesByGroup",
    value: function setStylesByGroup() {
      this._styleByGroup.left = this.calcStylesByGroup('left');
      this._styleByGroup.center = this.calcStylesByGroup('center');
      this._styleByGroup.right = this.calcStylesByGroup('right');

      if (!this.destroyed) {
        this.cd.detectChanges();
      }
    }
  }, {
    key: "calcStylesByGroup",
    value: function calcStylesByGroup(group) {
      var widths = this._columnGroupWidths;
      var offsetX = this.offsetX;
      var styles = {
        width: "".concat(widths[group], "px")
      };

      if (group === 'center') {
        translateXY(styles, offsetX * -1, 0);
      } else if (group === 'right') {
        var totalDiff = widths.total - this.innerWidth;
        var offset = totalDiff * -1;
        translateXY(styles, offset, 0);
      }

      return styles;
    }
  }]);

  return DataTableHeaderComponent;
}();

DataTableHeaderComponent.ɵfac = function DataTableHeaderComponent_Factory(t) {
  return new (t || DataTableHeaderComponent)(_angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_4__.ChangeDetectorRef));
};

DataTableHeaderComponent.ɵcmp = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵdefineComponent"]({
  type: DataTableHeaderComponent,
  selectors: [["datatable-header"]],
  hostAttrs: [1, "datatable-header"],
  hostVars: 4,
  hostBindings: function DataTableHeaderComponent_HostBindings(rf, ctx) {
    if (rf & 2) {
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵstyleProp"]("height", ctx.headerHeight)("width", ctx.headerWidth);
    }
  },
  inputs: {
    innerWidth: "innerWidth",
    headerHeight: "headerHeight",
    columns: "columns",
    offsetX: "offsetX",
    sorts: "sorts",
    sortAscendingIcon: "sortAscendingIcon",
    sortDescendingIcon: "sortDescendingIcon",
    sortUnsetIcon: "sortUnsetIcon",
    scrollbarH: "scrollbarH",
    dealsWithGroup: "dealsWithGroup",
    targetMarkerTemplate: "targetMarkerTemplate",
    sortType: "sortType",
    allRowsSelected: "allRowsSelected",
    selectionType: "selectionType",
    reorderable: "reorderable"
  },
  outputs: {
    sort: "sort",
    reorder: "reorder",
    resize: "resize",
    select: "select",
    columnContextmenu: "columnContextmenu"
  },
  decls: 2,
  vars: 4,
  consts: [["orderable", "", 1, "datatable-header-inner", 3, "reorder", "targetChanged"], [3, "class", "ngStyle", 4, "ngFor", "ngForOf", "ngForTrackBy"], [3, "ngStyle"], ["resizeable", "", "long-press", "", "draggable", "", 3, "resizeEnabled", "pressModel", "pressEnabled", "dragX", "dragY", "dragModel", "dragEventTarget", "headerHeight", "isTarget", "targetMarkerTemplate", "targetMarkerContext", "column", "sortType", "sorts", "selectionType", "sortAscendingIcon", "sortDescendingIcon", "sortUnsetIcon", "allRowsSelected", "resize", "longPressStart", "longPressEnd", "sort", "select", "columnContextmenu", 4, "ngFor", "ngForOf", "ngForTrackBy"], ["resizeable", "", "long-press", "", "draggable", "", 3, "resizeEnabled", "pressModel", "pressEnabled", "dragX", "dragY", "dragModel", "dragEventTarget", "headerHeight", "isTarget", "targetMarkerTemplate", "targetMarkerContext", "column", "sortType", "sorts", "selectionType", "sortAscendingIcon", "sortDescendingIcon", "sortUnsetIcon", "allRowsSelected", "resize", "longPressStart", "longPressEnd", "sort", "select", "columnContextmenu"]],
  template: function DataTableHeaderComponent_Template(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](0, "div", 0);
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵlistener"]("reorder", function DataTableHeaderComponent_Template_div_reorder_0_listener($event) {
        return ctx.onColumnReordered($event);
      })("targetChanged", function DataTableHeaderComponent_Template_div_targetChanged_0_listener($event) {
        return ctx.onTargetChanged($event);
      });
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtemplate"](1, DataTableHeaderComponent_div_1_Template, 2, 5, "div", 1);
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]();
    }

    if (rf & 2) {
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵstyleProp"]("width", ctx._columnGroupWidths.total, "px");
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("ngForOf", ctx._columnsByPin)("ngForTrackBy", ctx.trackByGroups);
    }
  },
  directives: function directives() {
    return [OrderableDirective, _angular_common__WEBPACK_IMPORTED_MODULE_5__.NgForOf, _angular_common__WEBPACK_IMPORTED_MODULE_5__.NgStyle, DataTableHeaderCellComponent, ResizeableDirective, LongPressDirective, DraggableDirective];
  },
  encapsulation: 2,
  changeDetection: 0
});

DataTableHeaderComponent.ctorParameters = function () {
  return [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.ChangeDetectorRef
  }];
};

DataTableHeaderComponent.propDecorators = {
  sortAscendingIcon: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
  }],
  sortDescendingIcon: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
  }],
  sortUnsetIcon: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
  }],
  scrollbarH: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
  }],
  dealsWithGroup: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
  }],
  targetMarkerTemplate: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
  }],
  innerWidth: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
  }],
  sorts: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
  }],
  sortType: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
  }],
  allRowsSelected: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
  }],
  selectionType: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
  }],
  reorderable: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
  }],
  headerHeight: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.HostBinding,
    args: ['style.height']
  }, {
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
  }],
  columns: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
  }],
  offsetX: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
  }],
  sort: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Output
  }],
  reorder: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Output
  }],
  resize: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Output
  }],
  select: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Output
  }],
  columnContextmenu: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Output
  }],
  headerWidth: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.HostBinding,
    args: ['style.width']
  }]
};
/**
 * Throttle a function
 */

function throttle(func, wait, options) {
  options = options || {};
  var context;
  var args;
  var result;
  var timeout = null;
  var previous = 0;

  function later() {
    previous = options.leading === false ? 0 : +new Date();
    timeout = null;
    result = func.apply(context, args);
  }

  return function () {
    var now = +new Date();

    if (!previous && options.leading === false) {
      previous = now;
    }

    var remaining = wait - (now - previous);
    context = this;
    args = arguments;

    if (remaining <= 0) {
      clearTimeout(timeout);
      timeout = null;
      previous = now;
      result = func.apply(context, args);
    } else if (!timeout && options.trailing !== false) {
      timeout = setTimeout(later, remaining);
    }

    return result;
  };
}
/**
 * Throttle decorator
 *
 *  class MyClass {
 *    throttleable(10)
 *    myFn() { ... }
 *  }
 */


function throttleable(duration, options) {
  return function innerDecorator(target, key, descriptor) {
    return {
      configurable: true,
      enumerable: descriptor.enumerable,
      get: function getter() {
        Object.defineProperty(this, key, {
          configurable: true,
          enumerable: descriptor.enumerable,
          value: throttle(descriptor.value, duration, options)
        });
        return this[key];
      }
    };
  };
}
/**
 * Calculates the Total Flex Grow
 */


function getTotalFlexGrow(columns) {
  var totalFlexGrow = 0;

  var _iterator11 = (0,C_Users_SAAD_Desktop_frontend_node_modules_babel_runtime_helpers_esm_createForOfIteratorHelper__WEBPACK_IMPORTED_MODULE_1__.default)(columns),
      _step11;

  try {
    for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {
      var c = _step11.value;
      totalFlexGrow += c.flexGrow || 0;
    }
  } catch (err) {
    _iterator11.e(err);
  } finally {
    _iterator11.f();
  }

  return totalFlexGrow;
}
/**
 * Adjusts the column widths.
 * Inspired by: https://github.com/facebook/fixed-data-table/blob/master/src/FixedDataTableWidthHelper.js
 */


function adjustColumnWidths(allColumns, expectedWidth) {
  var columnsWidth = columnsTotalWidth(allColumns);
  var totalFlexGrow = getTotalFlexGrow(allColumns);
  var colsByGroup = columnsByPin(allColumns);

  if (columnsWidth !== expectedWidth) {
    scaleColumns(colsByGroup, expectedWidth, totalFlexGrow);
  }
}
/**
 * Resizes columns based on the flexGrow property, while respecting manually set widths
 */


function scaleColumns(colsByGroup, maxWidth, totalFlexGrow) {
  // calculate total width and flexgrow points for coulumns that can be resized
  for (var attr in colsByGroup) {
    var _iterator12 = (0,C_Users_SAAD_Desktop_frontend_node_modules_babel_runtime_helpers_esm_createForOfIteratorHelper__WEBPACK_IMPORTED_MODULE_1__.default)(colsByGroup[attr]),
        _step12;

    try {
      for (_iterator12.s(); !(_step12 = _iterator12.n()).done;) {
        var column = _step12.value;

        if (!column.canAutoResize) {
          maxWidth -= column.width;
          totalFlexGrow -= column.flexGrow ? column.flexGrow : 0;
        } else {
          column.width = 0;
        }
      }
    } catch (err) {
      _iterator12.e(err);
    } finally {
      _iterator12.f();
    }
  }

  var hasMinWidth = {};
  var remainingWidth = maxWidth; // resize columns until no width is left to be distributed

  do {
    var widthPerFlexPoint = remainingWidth / totalFlexGrow;
    remainingWidth = 0;

    for (var _attr in colsByGroup) {
      var _iterator13 = (0,C_Users_SAAD_Desktop_frontend_node_modules_babel_runtime_helpers_esm_createForOfIteratorHelper__WEBPACK_IMPORTED_MODULE_1__.default)(colsByGroup[_attr]),
          _step13;

      try {
        for (_iterator13.s(); !(_step13 = _iterator13.n()).done;) {
          var _column = _step13.value;

          // if the column can be resize and it hasn't reached its minimum width yet
          if (_column.canAutoResize && !hasMinWidth[_column.prop]) {
            var newWidth = _column.width + _column.flexGrow * widthPerFlexPoint;

            if (_column.minWidth !== undefined && newWidth < _column.minWidth) {
              remainingWidth += newWidth - _column.minWidth;
              _column.width = _column.minWidth;
              hasMinWidth[_column.prop] = true;
            } else {
              _column.width = newWidth;
            }
          }
        }
      } catch (err) {
        _iterator13.e(err);
      } finally {
        _iterator13.f();
      }
    }
  } while (remainingWidth !== 0);
}
/**
 * Forces the width of the columns to
 * distribute equally but overflowing when necessary
 *
 * Rules:
 *
 *  - If combined withs are less than the total width of the grid,
 *    proportion the widths given the min / max / normal widths to fill the width.
 *
 *  - If the combined widths, exceed the total width of the grid,
 *    use the standard widths.
 *
 *  - If a column is resized, it should always use that width
 *
 *  - The proportional widths should never fall below min size if specified.
 *
 *  - If the grid starts off small but then becomes greater than the size ( + / - )
 *    the width should use the original width; not the newly proportioned widths.
 */


function forceFillColumnWidths(allColumns, expectedWidth, startIdx, allowBleed) {
  var defaultColWidth = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 300;
  var columnsToResize = allColumns.slice(startIdx + 1, allColumns.length).filter(function (c) {
    return c.canAutoResize !== false;
  });

  var _iterator14 = (0,C_Users_SAAD_Desktop_frontend_node_modules_babel_runtime_helpers_esm_createForOfIteratorHelper__WEBPACK_IMPORTED_MODULE_1__.default)(columnsToResize),
      _step14;

  try {
    for (_iterator14.s(); !(_step14 = _iterator14.n()).done;) {
      var _column2 = _step14.value;

      if (!_column2.$$oldWidth) {
        _column2.$$oldWidth = _column2.width;
      }
    }
  } catch (err) {
    _iterator14.e(err);
  } finally {
    _iterator14.f();
  }

  var additionWidthPerColumn = 0;
  var exceedsWindow = false;
  var contentWidth = getContentWidth(allColumns, defaultColWidth);
  var remainingWidth = expectedWidth - contentWidth;
  var columnsProcessed = [];
  var remainingWidthLimit = 1; // when to stop
  // This loop takes care of the

  do {
    additionWidthPerColumn = remainingWidth / columnsToResize.length;
    exceedsWindow = contentWidth >= expectedWidth;

    var _iterator15 = (0,C_Users_SAAD_Desktop_frontend_node_modules_babel_runtime_helpers_esm_createForOfIteratorHelper__WEBPACK_IMPORTED_MODULE_1__.default)(columnsToResize),
        _step15;

    try {
      for (_iterator15.s(); !(_step15 = _iterator15.n()).done;) {
        var column = _step15.value;

        if (exceedsWindow && allowBleed) {
          column.width = column.$$oldWidth || column.width || defaultColWidth;
        } else {
          var newSize = (column.width || defaultColWidth) + additionWidthPerColumn;

          if (column.minWidth && newSize < column.minWidth) {
            column.width = column.minWidth;
            columnsProcessed.push(column);
          } else if (column.maxWidth && newSize > column.maxWidth) {
            column.width = column.maxWidth;
            columnsProcessed.push(column);
          } else {
            column.width = newSize;
          }
        }

        column.width = Math.max(0, column.width);
      }
    } catch (err) {
      _iterator15.e(err);
    } finally {
      _iterator15.f();
    }

    contentWidth = getContentWidth(allColumns);
    remainingWidth = expectedWidth - contentWidth;
    removeProcessedColumns(columnsToResize, columnsProcessed);
  } while (remainingWidth > remainingWidthLimit && columnsToResize.length !== 0);
}
/**
 * Remove the processed columns from the current active columns.
 */


function removeProcessedColumns(columnsToResize, columnsProcessed) {
  var _iterator16 = (0,C_Users_SAAD_Desktop_frontend_node_modules_babel_runtime_helpers_esm_createForOfIteratorHelper__WEBPACK_IMPORTED_MODULE_1__.default)(columnsProcessed),
      _step16;

  try {
    for (_iterator16.s(); !(_step16 = _iterator16.n()).done;) {
      var column = _step16.value;
      var index = columnsToResize.indexOf(column);
      columnsToResize.splice(index, 1);
    }
  } catch (err) {
    _iterator16.e(err);
  } finally {
    _iterator16.f();
  }
}
/**
 * Gets the width of the columns
 */


function getContentWidth(allColumns) {
  var defaultColWidth = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 300;
  var contentWidth = 0;

  var _iterator17 = (0,C_Users_SAAD_Desktop_frontend_node_modules_babel_runtime_helpers_esm_createForOfIteratorHelper__WEBPACK_IMPORTED_MODULE_1__.default)(allColumns),
      _step17;

  try {
    for (_iterator17.s(); !(_step17 = _iterator17.n()).done;) {
      var column = _step17.value;
      contentWidth += column.width || defaultColWidth;
    }
  } catch (err) {
    _iterator17.e(err);
  } finally {
    _iterator17.f();
  }

  return contentWidth;
}

var SortDirection;

(function (SortDirection) {
  SortDirection["asc"] = "asc";
  SortDirection["desc"] = "desc";
})(SortDirection || (SortDirection = {}));
/**
 * Gets the next sort direction
 */


function nextSortDir(sortType, current) {
  if (sortType === SortType.single) {
    if (current === SortDirection.asc) {
      return SortDirection.desc;
    } else {
      return SortDirection.asc;
    }
  } else {
    if (!current) {
      return SortDirection.asc;
    } else if (current === SortDirection.asc) {
      return SortDirection.desc;
    } else if (current === SortDirection.desc) {
      return undefined;
    } // avoid TS7030: Not all code paths return a value.


    return undefined;
  }
}
/**
 * Adapted from fueld-ui on 6/216
 * https://github.com/FuelInteractive/fuel-ui/tree/master/src/pipes/OrderBy
 */


function orderByComparator(a, b) {
  if (a === null || typeof a === 'undefined') a = 0;
  if (b === null || typeof b === 'undefined') b = 0;

  if (a instanceof Date && b instanceof Date) {
    if (a < b) return -1;
    if (a > b) return 1;
  } else if (isNaN(parseFloat(a)) || !isFinite(a) || isNaN(parseFloat(b)) || !isFinite(b)) {
    // Convert to string in case of a=0 or b=0
    a = String(a);
    b = String(b); // Isn't a number so lowercase the string to properly compare

    if (a.toLowerCase() < b.toLowerCase()) return -1;
    if (a.toLowerCase() > b.toLowerCase()) return 1;
  } else {
    // Parse strings as numbers to compare properly
    if (parseFloat(a) < parseFloat(b)) return -1;
    if (parseFloat(a) > parseFloat(b)) return 1;
  } // equal each other


  return 0;
}
/**
 * creates a shallow copy of the `rows` input and returns the sorted copy. this function
 * does not sort the `rows` argument in place
 */


function sortRows(rows, columns, dirs) {
  if (!rows) return [];
  if (!dirs || !dirs.length || !columns) return (0,C_Users_SAAD_Desktop_frontend_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__.default)(rows);
  /**
   * record the row ordering of results from prior sort operations (if applicable)
   * this is necessary to guarantee stable sorting behavior
   */

  var rowToIndexMap = new Map();
  rows.forEach(function (row, index) {
    return rowToIndexMap.set(row, index);
  });

  var temp = (0,C_Users_SAAD_Desktop_frontend_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__.default)(rows);

  var cols = columns.reduce(function (obj, col) {
    if (col.comparator && typeof col.comparator === 'function') {
      obj[col.prop] = col.comparator;
    }

    return obj;
  }, {}); // cache valueGetter and compareFn so that they
  // do not need to be looked-up in the sort function body

  var cachedDirs = dirs.map(function (dir) {
    var prop = dir.prop;
    return {
      prop: prop,
      dir: dir.dir,
      valueGetter: getterForProp(prop),
      compareFn: cols[prop] || orderByComparator
    };
  });
  return temp.sort(function (rowA, rowB) {
    var _iterator18 = (0,C_Users_SAAD_Desktop_frontend_node_modules_babel_runtime_helpers_esm_createForOfIteratorHelper__WEBPACK_IMPORTED_MODULE_1__.default)(cachedDirs),
        _step18;

    try {
      for (_iterator18.s(); !(_step18 = _iterator18.n()).done;) {
        var cachedDir = _step18.value;
        // Get property and valuegetters for column to be sorted
        var prop = cachedDir.prop,
            valueGetter = cachedDir.valueGetter; // Get A and B cell values from rows based on properties of the columns

        var propA = valueGetter(rowA, prop);
        var propB = valueGetter(rowB, prop); // Compare function gets five parameters:
        // Two cell values to be compared as propA and propB
        // Two rows corresponding to the cells as rowA and rowB
        // Direction of the sort for this column as SortDirection
        // Compare can be a standard JS comparison function (a,b) => -1|0|1
        // as additional parameters are silently ignored. The whole row and sort
        // direction enable more complex sort logic.

        var comparison = cachedDir.dir !== SortDirection.desc ? cachedDir.compareFn(propA, propB, rowA, rowB, cachedDir.dir) : -cachedDir.compareFn(propA, propB, rowA, rowB, cachedDir.dir); // Don't return 0 yet in case of needing to sort by next property

        if (comparison !== 0) return comparison;
      }
    } catch (err) {
      _iterator18.e(err);
    } finally {
      _iterator18.f();
    }

    if (!(rowToIndexMap.has(rowA) && rowToIndexMap.has(rowB))) return 0;
    /**
     * all else being equal, preserve original order of the rows (stable sort)
     */

    return rowToIndexMap.get(rowA) < rowToIndexMap.get(rowB) ? -1 : 1;
  });
}

var DatatableComponent = /*#__PURE__*/function () {
  function DatatableComponent(scrollbarHelper, dimensionsHelper, cd, element, differs, columnChangesService, configuration) {
    var _this18 = this;

    (0,C_Users_SAAD_Desktop_frontend_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_2__.default)(this, DatatableComponent);

    this.scrollbarHelper = scrollbarHelper;
    this.dimensionsHelper = dimensionsHelper;
    this.cd = cd;
    this.columnChangesService = columnChangesService;
    this.configuration = configuration;
    /**
     * List of row objects that should be
     * represented as selected in the grid.
     * Default value: `[]`
     */

    this.selected = [];
    /**
     * Enable vertical scrollbars
     */

    this.scrollbarV = false;
    /**
     * Enable horz scrollbars
     */

    this.scrollbarH = false;
    /**
     * The row height; which is necessary
     * to calculate the height for the lazy rendering.
     */

    this.rowHeight = 30;
    /**
     * Type of column width distribution formula.
     * Example: flex, force, standard
     */

    this.columnMode = ColumnMode.standard;
    /**
     * The minimum header height in pixels.
     * Pass a falsey for no header
     */

    this.headerHeight = 30;
    /**
     * The minimum footer height in pixels.
     * Pass falsey for no footer
     */

    this.footerHeight = 0;
    /**
     * If the table should use external paging
     * otherwise its assumed that all data is preloaded.
     */

    this.externalPaging = false;
    /**
     * If the table should use external sorting or
     * the built-in basic sorting.
     */

    this.externalSorting = false;
    /**
     * Show the linear loading bar.
     * Default value: `false`
     */

    this.loadingIndicator = false;
    /**
     * Enable/Disable ability to re-order columns
     * by dragging them.
     */

    this.reorderable = true;
    /**
     * Swap columns on re-order columns or
     * move them.
     */

    this.swapColumns = true;
    /**
     * The type of sorting
     */

    this.sortType = SortType.single;
    /**
     * Array of sorted columns by property and type.
     * Default value: `[]`
     */

    this.sorts = [];
    /**
     * Css class overrides
     */

    this.cssClasses = {
      sortAscending: 'datatable-icon-up',
      sortDescending: 'datatable-icon-down',
      sortUnset: 'datatable-icon-sort-unset',
      pagerLeftArrow: 'datatable-icon-left',
      pagerRightArrow: 'datatable-icon-right',
      pagerPrevious: 'datatable-icon-prev',
      pagerNext: 'datatable-icon-skip'
    };
    /**
     * Message overrides for localization
     *
     * emptyMessage     [default] = 'No data to display'
     * totalMessage     [default] = 'total'
     * selectedMessage  [default] = 'selected'
     */

    this.messages = {
      // Message to show when array is presented
      // but contains no values
      emptyMessage: 'No data to display',
      // Footer total message
      totalMessage: 'total',
      // Footer selected message
      selectedMessage: 'selected'
    };
    /**
     * A boolean you can use to set the detault behaviour of rows and groups
     * whether they will start expanded or not. If ommited the default is NOT expanded.
     *
     */

    this.groupExpansionDefault = false;
    /**
     * Property to which you can use for determining select all
     * rows on current page or not.
     *
     * @memberOf DatatableComponent
     */

    this.selectAllRowsOnPage = false;
    /**
     * A flag for row virtualization on / off
     */

    this.virtualization = true;
    /**
     * A flag for switching summary row on / off
     */

    this.summaryRow = false;
    /**
     * A height of summary row
     */

    this.summaryHeight = 30;
    /**
     * A property holds a summary row position: top/bottom
     */

    this.summaryPosition = 'top';
    /**
     * Body was scrolled typically in a `scrollbarV:true` scenario.
     */

    this.scroll = new _angular_core__WEBPACK_IMPORTED_MODULE_4__.EventEmitter();
    /**
     * A cell or row was focused via keyboard or mouse click.
     */

    this.activate = new _angular_core__WEBPACK_IMPORTED_MODULE_4__.EventEmitter();
    /**
     * A cell or row was selected.
     */

    this.select = new _angular_core__WEBPACK_IMPORTED_MODULE_4__.EventEmitter();
    /**
     * Column sort was invoked.
     */

    this.sort = new _angular_core__WEBPACK_IMPORTED_MODULE_4__.EventEmitter();
    /**
     * The table was paged either triggered by the pager or the body scroll.
     */

    this.page = new _angular_core__WEBPACK_IMPORTED_MODULE_4__.EventEmitter();
    /**
     * Columns were re-ordered.
     */

    this.reorder = new _angular_core__WEBPACK_IMPORTED_MODULE_4__.EventEmitter();
    /**
     * Column was resized.
     */

    this.resize = new _angular_core__WEBPACK_IMPORTED_MODULE_4__.EventEmitter();
    /**
     * The context menu was invoked on the table.
     * type indicates whether the header or the body was clicked.
     * content contains either the column or the row that was clicked.
     */

    this.tableContextmenu = new _angular_core__WEBPACK_IMPORTED_MODULE_4__.EventEmitter(false);
    /**
     * A row was expanded ot collapsed for tree
     */

    this.treeAction = new _angular_core__WEBPACK_IMPORTED_MODULE_4__.EventEmitter();
    this.rowCount = 0;
    this._offsetX = new rxjs__WEBPACK_IMPORTED_MODULE_9__.BehaviorSubject(0);
    this._count = 0;
    this._offset = 0;
    this._subscriptions = [];
    /**
     * This will be used when displaying or selecting rows.
     * when tracking/comparing them, we'll use the value of this fn,
     *
     * (`fn(x) === fn(y)` instead of `x === y`)
     */

    this.rowIdentity = function (x) {
      if (_this18._groupRowsBy) {
        // each group in groupedRows are stored as {key, value: [rows]},
        // where key is the groupRowsBy index
        return x.key;
      } else {
        return x;
      }
    }; // get ref to elm for measuring


    this.element = element.nativeElement;
    this.rowDiffer = differs.find({}).create(); // apply global settings from Module.forRoot

    if (this.configuration && this.configuration.messages) {
      this.messages = Object.assign({}, this.configuration.messages);
    }
  }
  /**
   * Rows that are displayed in the table.
   */


  (0,C_Users_SAAD_Desktop_frontend_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_3__.default)(DatatableComponent, [{
    key: "rows",
    get:
    /**
     * Gets the rows.
     */
    function get() {
      return this._rows;
    }
    /**
     * This attribute allows the user to set the name of the column to group the data with
     */
    ,
    set: function set(val) {
      this._rows = val;

      if (val) {
        this._internalRows = (0,C_Users_SAAD_Desktop_frontend_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__.default)(val);
      } // auto sort on new updates


      if (!this.externalSorting) {
        this.sortInternalRows();
      } // auto group by parent on new update


      this._internalRows = groupRowsByParents(this._internalRows, optionalGetterForProp(this.treeFromRelation), optionalGetterForProp(this.treeToRelation)); // recalculate sizes/etc

      this.recalculate();

      if (this._rows && this._groupRowsBy) {
        // If a column has been specified in _groupRowsBy created a new array with the data grouped by that row
        this.groupedRows = this.groupArrayBy(this._rows, this._groupRowsBy);
      }

      this.cd.markForCheck();
    }
  }, {
    key: "groupRowsBy",
    get: function get() {
      return this._groupRowsBy;
    }
    /**
     * Columns to be displayed.
     */
    ,
    set: function set(val) {
      if (val) {
        this._groupRowsBy = val;

        if (this._rows && this._groupRowsBy) {
          // cretes a new array with the data grouped
          this.groupedRows = this.groupArrayBy(this._rows, this._groupRowsBy);
        }
      }
    }
  }, {
    key: "columns",
    get:
    /**
     * Get the columns.
     */
    function get() {
      return this._columns;
    }
    /**
     * The page size to be shown.
     * Default value: `undefined`
     */
    ,
    set: function set(val) {
      if (val) {
        this._internalColumns = (0,C_Users_SAAD_Desktop_frontend_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__.default)(val);
        setColumnDefaults(this._internalColumns);
        this.recalculateColumns();
      }

      this._columns = val;
    }
  }, {
    key: "limit",
    get:
    /**
     * Gets the limit.
     */
    function get() {
      return this._limit;
    }
    /**
     * The total count of all rows.
     * Default value: `0`
     */
    ,
    set: function set(val) {
      this._limit = val; // recalculate sizes/etc

      this.recalculate();
    }
  }, {
    key: "count",
    get:
    /**
     * Gets the count.
     */
    function get() {
      return this._count;
    }
    /**
     * The current offset ( page - 1 ) shown.
     * Default value: `0`
     */
    ,
    set: function set(val) {
      this._count = val; // recalculate sizes/etc

      this.recalculate();
    }
  }, {
    key: "offset",
    get: function get() {
      return Math.max(Math.min(this._offset, Math.ceil(this.rowCount / this.pageSize) - 1), 0);
    }
    /**
     * CSS class applied if the header height if fixed height.
     */
    ,
    set: function set(val) {
      this._offset = val;
    }
  }, {
    key: "isFixedHeader",
    get: function get() {
      var headerHeight = this.headerHeight;
      return typeof headerHeight === 'string' ? headerHeight !== 'auto' : true;
    }
    /**
     * CSS class applied to the root element if
     * the row heights are fixed heights.
     */

  }, {
    key: "isFixedRow",
    get: function get() {
      return this.rowHeight !== 'auto';
    }
    /**
     * CSS class applied to root element if
     * vertical scrolling is enabled.
     */

  }, {
    key: "isVertScroll",
    get: function get() {
      return this.scrollbarV;
    }
    /**
     * CSS class applied to root element if
     * virtualization is enabled.
     */

  }, {
    key: "isVirtualized",
    get: function get() {
      return this.virtualization;
    }
    /**
     * CSS class applied to the root element
     * if the horziontal scrolling is enabled.
     */

  }, {
    key: "isHorScroll",
    get: function get() {
      return this.scrollbarH;
    }
    /**
     * CSS class applied to root element is selectable.
     */

  }, {
    key: "isSelectable",
    get: function get() {
      return this.selectionType !== undefined;
    }
    /**
     * CSS class applied to root is checkbox selection.
     */

  }, {
    key: "isCheckboxSelection",
    get: function get() {
      return this.selectionType === SelectionType.checkbox;
    }
    /**
     * CSS class applied to root if cell selection.
     */

  }, {
    key: "isCellSelection",
    get: function get() {
      return this.selectionType === SelectionType.cell;
    }
    /**
     * CSS class applied to root if single select.
     */

  }, {
    key: "isSingleSelection",
    get: function get() {
      return this.selectionType === SelectionType.single;
    }
    /**
     * CSS class added to root element if mulit select
     */

  }, {
    key: "isMultiSelection",
    get: function get() {
      return this.selectionType === SelectionType.multi;
    }
    /**
     * CSS class added to root element if mulit click select
     */

  }, {
    key: "isMultiClickSelection",
    get: function get() {
      return this.selectionType === SelectionType.multiClick;
    }
    /**
     * Column templates gathered from `ContentChildren`
     * if described in your markup.
     */

  }, {
    key: "columnTemplates",
    get:
    /**
     * Returns the column templates.
     */
    function get() {
      return this._columnTemplates;
    }
    /**
     * Returns if all rows are selected.
     */
    ,
    set: function set(val) {
      this._columnTemplates = val;
      this.translateColumns(val);
    }
  }, {
    key: "allRowsSelected",
    get: function get() {
      var allRowsSelected = this.rows && this.selected && this.selected.length === this.rows.length;

      if (this.bodyComponent && this.selectAllRowsOnPage) {
        var indexes = this.bodyComponent.indexes;
        var rowsOnPage = indexes.last - indexes.first;
        allRowsSelected = this.selected.length === rowsOnPage;
      }

      return this.selected && this.rows && this.rows.length !== 0 && allRowsSelected;
    }
    /**
     * Lifecycle hook that is called after data-bound
     * properties of a directive are initialized.
     */

  }, {
    key: "ngOnInit",
    value: function ngOnInit() {
      // need to call this immediatly to size
      // if the table is hidden the visibility
      // listener will invoke this itself upon show
      this.recalculate();
    }
    /**
     * Lifecycle hook that is called after a component's
     * view has been fully initialized.
     */

  }, {
    key: "ngAfterViewInit",
    value: function ngAfterViewInit() {
      var _this19 = this;

      if (!this.externalSorting) {
        this.sortInternalRows();
      } // this has to be done to prevent the change detection
      // tree from freaking out because we are readjusting


      if (typeof requestAnimationFrame === 'undefined') {
        return;
      }

      requestAnimationFrame(function () {
        _this19.recalculate(); // emit page for virtual server-side kickoff


        if (_this19.externalPaging && _this19.scrollbarV) {
          _this19.page.emit({
            count: _this19.count,
            pageSize: _this19.pageSize,
            limit: _this19.limit,
            offset: 0
          });
        }
      });
    }
    /**
     * Lifecycle hook that is called after a component's
     * content has been fully initialized.
     */

  }, {
    key: "ngAfterContentInit",
    value: function ngAfterContentInit() {
      var _this20 = this;

      this.columnTemplates.changes.subscribe(function (v) {
        return _this20.translateColumns(v);
      });
      this.listenForColumnInputChanges();
    }
    /**
     * Translates the templates to the column objects
     */

  }, {
    key: "translateColumns",
    value: function translateColumns(val) {
      if (val) {
        var arr = val.toArray();

        if (arr.length) {
          this._internalColumns = translateTemplates(arr);
          setColumnDefaults(this._internalColumns);
          this.recalculateColumns();
          this.sortInternalRows();
          this.cd.markForCheck();
        }
      }
    }
    /**
     * Creates a map with the data grouped by the user choice of grouping index
     *
     * @param originalArray the original array passed via parameter
     * @param groupByIndex  the index of the column to group the data by
     */

  }, {
    key: "groupArrayBy",
    value: function groupArrayBy(originalArray, groupBy) {
      // create a map to hold groups with their corresponding results
      var map = new Map();
      var i = 0;
      originalArray.forEach(function (item) {
        var key = item[groupBy];

        if (!map.has(key)) {
          map.set(key, [item]);
        } else {
          map.get(key).push(item);
        }

        i++;
      });

      var addGroup = function addGroup(key, value) {
        return {
          key: key,
          value: value
        };
      }; // convert map back to a simple array of objects


      return Array.from(map, function (x) {
        return addGroup(x[0], x[1]);
      });
    }
    /*
     * Lifecycle hook that is called when Angular dirty checks a directive.
     */

  }, {
    key: "ngDoCheck",
    value: function ngDoCheck() {
      if (this.rowDiffer.diff(this.rows)) {
        if (!this.externalSorting) {
          this.sortInternalRows();
        } else {
          this._internalRows = (0,C_Users_SAAD_Desktop_frontend_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__.default)(this.rows);
        } // auto group by parent on new update


        this._internalRows = groupRowsByParents(this._internalRows, optionalGetterForProp(this.treeFromRelation), optionalGetterForProp(this.treeToRelation));
        this.recalculatePages();
        this.cd.markForCheck();
      }
    }
    /**
     * Recalc's the sizes of the grid.
     *
     * Updated automatically on changes to:
     *
     *  - Columns
     *  - Rows
     *  - Paging related
     *
     * Also can be manually invoked or upon window resize.
     */

  }, {
    key: "recalculate",
    value: function recalculate() {
      this.recalculateDims();
      this.recalculateColumns();
      this.cd.markForCheck();
    }
    /**
     * Window resize handler to update sizes.
     */

  }, {
    key: "onWindowResize",
    value: function onWindowResize() {
      this.recalculate();
    }
    /**
     * Recalulcates the column widths based on column width
     * distribution mode and scrollbar offsets.
     */

  }, {
    key: "recalculateColumns",
    value: function recalculateColumns() {
      var columns = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this._internalColumns;
      var forceIdx = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : -1;
      var allowBleed = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.scrollbarH;
      if (!columns) return undefined;
      var width = this._innerWidth;

      if (this.scrollbarV) {
        width = width - this.scrollbarHelper.width;
      }

      if (this.columnMode === ColumnMode.force) {
        forceFillColumnWidths(columns, width, forceIdx, allowBleed);
      } else if (this.columnMode === ColumnMode.flex) {
        adjustColumnWidths(columns, width);
      }

      return columns;
    }
    /**
     * Recalculates the dimensions of the table size.
     * Internally calls the page size and row count calcs too.
     *
     */

  }, {
    key: "recalculateDims",
    value: function recalculateDims() {
      var dims = this.dimensionsHelper.getDimensions(this.element);
      this._innerWidth = Math.floor(dims.width);

      if (this.scrollbarV) {
        var height = dims.height;
        if (this.headerHeight) height = height - this.headerHeight;
        if (this.footerHeight) height = height - this.footerHeight;
        this.bodyHeight = height;
      }

      this.recalculatePages();
    }
    /**
     * Recalculates the pages after a update.
     */

  }, {
    key: "recalculatePages",
    value: function recalculatePages() {
      this.pageSize = this.calcPageSize();
      this.rowCount = this.calcRowCount();
    }
    /**
     * Body triggered a page event.
     */

  }, {
    key: "onBodyPage",
    value: function onBodyPage(_ref12) {
      var offset = _ref12.offset;

      // Avoid pagination caming from body events like scroll when the table
      // has no virtualization and the external paging is enable.
      // This means, let's the developer handle pagination by my him(her) self
      if (this.externalPaging && !this.virtualization) {
        return;
      }

      this.offset = offset;
      this.page.emit({
        count: this.count,
        pageSize: this.pageSize,
        limit: this.limit,
        offset: this.offset
      });
    }
    /**
     * The body triggered a scroll event.
     */

  }, {
    key: "onBodyScroll",
    value: function onBodyScroll(event) {
      this._offsetX.next(event.offsetX);

      this.scroll.emit(event);
      this.cd.detectChanges();
    }
    /**
     * The footer triggered a page event.
     */

  }, {
    key: "onFooterPage",
    value: function onFooterPage(event) {
      this.offset = event.page - 1;
      this.bodyComponent.updateOffsetY(this.offset);
      this.page.emit({
        count: this.count,
        pageSize: this.pageSize,
        limit: this.limit,
        offset: this.offset
      });

      if (this.selectAllRowsOnPage) {
        this.selected = [];
        this.select.emit({
          selected: this.selected
        });
      }
    }
    /**
     * Recalculates the sizes of the page
     */

  }, {
    key: "calcPageSize",
    value: function calcPageSize() {
      var val = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.rows;

      // Keep the page size constant even if the row has been expanded.
      // This is because an expanded row is still considered to be a child of
      // the original row.  Hence calculation would use rowHeight only.
      if (this.scrollbarV && this.virtualization) {
        var size = Math.ceil(this.bodyHeight / this.rowHeight);
        return Math.max(size, 0);
      } // if limit is passed, we are paging


      if (this.limit !== undefined) {
        return this.limit;
      } // otherwise use row length


      if (val) {
        return val.length;
      } // other empty :(


      return 0;
    }
    /**
     * Calculates the row count.
     */

  }, {
    key: "calcRowCount",
    value: function calcRowCount() {
      var val = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.rows;

      if (!this.externalPaging) {
        if (!val) return 0;

        if (this.groupedRows) {
          return this.groupedRows.length;
        } else if (this.treeFromRelation != null && this.treeToRelation != null) {
          return this._internalRows.length;
        } else {
          return val.length;
        }
      }

      return this.count;
    }
    /**
     * The header triggered a contextmenu event.
     */

  }, {
    key: "onColumnContextmenu",
    value: function onColumnContextmenu(_ref13) {
      var event = _ref13.event,
          column = _ref13.column;
      this.tableContextmenu.emit({
        event: event,
        type: ContextmenuType.header,
        content: column
      });
    }
    /**
     * The body triggered a contextmenu event.
     */

  }, {
    key: "onRowContextmenu",
    value: function onRowContextmenu(_ref14) {
      var event = _ref14.event,
          row = _ref14.row;
      this.tableContextmenu.emit({
        event: event,
        type: ContextmenuType.body,
        content: row
      });
    }
    /**
     * The header triggered a column resize event.
     */

  }, {
    key: "onColumnResize",
    value: function onColumnResize(_ref15) {
      var column = _ref15.column,
          newValue = _ref15.newValue;

      /* Safari/iOS 10.2 workaround */
      if (column === undefined) {
        return;
      }

      var idx;

      var cols = this._internalColumns.map(function (c, i) {
        c = Object.assign({}, c);

        if (c.$$id === column.$$id) {
          idx = i;
          c.width = newValue; // set this so we can force the column
          // width distribution to be to this value

          c.$$oldWidth = newValue;
        }

        return c;
      });

      this.recalculateColumns(cols, idx);
      this._internalColumns = cols;
      this.resize.emit({
        column: column,
        newValue: newValue
      });
    }
    /**
     * The header triggered a column re-order event.
     */

  }, {
    key: "onColumnReorder",
    value: function onColumnReorder(_ref16) {
      var column = _ref16.column,
          newValue = _ref16.newValue,
          prevValue = _ref16.prevValue;

      var cols = this._internalColumns.map(function (c) {
        return Object.assign({}, c);
      });

      if (this.swapColumns) {
        var prevCol = cols[newValue];
        cols[newValue] = column;
        cols[prevValue] = prevCol;
      } else {
        if (newValue > prevValue) {
          var movedCol = cols[prevValue];

          for (var i = prevValue; i < newValue; i++) {
            cols[i] = cols[i + 1];
          }

          cols[newValue] = movedCol;
        } else {
          var _movedCol = cols[prevValue];

          for (var _i3 = prevValue; _i3 > newValue; _i3--) {
            cols[_i3] = cols[_i3 - 1];
          }

          cols[newValue] = _movedCol;
        }
      }

      this._internalColumns = cols;
      this.reorder.emit({
        column: column,
        newValue: newValue,
        prevValue: prevValue
      });
    }
    /**
     * The header triggered a column sort event.
     */

  }, {
    key: "onColumnSort",
    value: function onColumnSort(event) {
      // clean selected rows
      if (this.selectAllRowsOnPage) {
        this.selected = [];
        this.select.emit({
          selected: this.selected
        });
      }

      this.sorts = event.sorts; // this could be optimized better since it will resort
      // the rows again on the 'push' detection...

      if (this.externalSorting === false) {
        // don't use normal setter so we don't resort
        this.sortInternalRows();
      } // auto group by parent on new update


      this._internalRows = groupRowsByParents(this._internalRows, optionalGetterForProp(this.treeFromRelation), optionalGetterForProp(this.treeToRelation)); // Always go to first page when sorting to see the newly sorted data

      this.offset = 0;
      this.bodyComponent.updateOffsetY(this.offset);
      this.sort.emit(event);
    }
    /**
     * Toggle all row selection
     */

  }, {
    key: "onHeaderSelect",
    value: function onHeaderSelect(event) {
      if (this.bodyComponent && this.selectAllRowsOnPage) {
        // before we splice, chk if we currently have all selected
        var first = this.bodyComponent.indexes.first;
        var last = this.bodyComponent.indexes.last;
        var allSelected = this.selected.length === last - first; // remove all existing either way

        this.selected = []; // do the opposite here

        if (!allSelected) {
          var _this$selected;

          (_this$selected = this.selected).push.apply(_this$selected, (0,C_Users_SAAD_Desktop_frontend_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__.default)(this._internalRows.slice(first, last)));
        }
      } else {
        // before we splice, chk if we currently have all selected
        var _allSelected = this.selected.length === this.rows.length; // remove all existing either way


        this.selected = []; // do the opposite here

        if (!_allSelected) {
          var _this$selected2;

          (_this$selected2 = this.selected).push.apply(_this$selected2, (0,C_Users_SAAD_Desktop_frontend_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__.default)(this.rows));
        }
      }

      this.select.emit({
        selected: this.selected
      });
    }
    /**
     * A row was selected from body
     */

  }, {
    key: "onBodySelect",
    value: function onBodySelect(event) {
      this.select.emit(event);
    }
    /**
     * A row was expanded or collapsed for tree
     */

  }, {
    key: "onTreeAction",
    value: function onTreeAction(event) {
      var _this21 = this;

      var row = event.row; // TODO: For duplicated items this will not work

      var rowIndex = this._rows.findIndex(function (r) {
        return r[_this21.treeToRelation] === event.row[_this21.treeToRelation];
      });

      this.treeAction.emit({
        row: row,
        rowIndex: rowIndex
      });
    }
  }, {
    key: "ngOnDestroy",
    value: function ngOnDestroy() {
      this._subscriptions.forEach(function (subscription) {
        return subscription.unsubscribe();
      });
    }
    /**
     * listen for changes to input bindings of all DataTableColumnDirective and
     * trigger the columnTemplates.changes observable to emit
     */

  }, {
    key: "listenForColumnInputChanges",
    value: function listenForColumnInputChanges() {
      var _this22 = this;

      this._subscriptions.push(this.columnChangesService.columnInputChanges$.subscribe(function () {
        if (_this22.columnTemplates) {
          _this22.columnTemplates.notifyOnChanges();
        }
      }));
    }
  }, {
    key: "sortInternalRows",
    value: function sortInternalRows() {
      this._internalRows = sortRows(this._internalRows, this._internalColumns, this.sorts);
    }
  }]);

  return DatatableComponent;
}();

DatatableComponent.ɵfac = function DatatableComponent_Factory(t) {
  return new (t || DatatableComponent)(_angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵdirectiveInject"](ScrollbarHelper, 4), _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵdirectiveInject"](DimensionsHelper, 4), _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_4__.ChangeDetectorRef), _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_4__.ElementRef), _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_4__.KeyValueDiffers), _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵdirectiveInject"](ColumnChangesService), _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵdirectiveInject"]('configuration', 8));
};

DatatableComponent.ɵcmp = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵdefineComponent"]({
  type: DatatableComponent,
  selectors: [["ngx-datatable"]],
  contentQueries: function DatatableComponent_ContentQueries(rf, ctx, dirIndex) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵcontentQuery"](dirIndex, DatatableRowDetailDirective, 5);
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵcontentQuery"](dirIndex, DatatableGroupHeaderDirective, 5);
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵcontentQuery"](dirIndex, DatatableFooterDirective, 5);
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵcontentQuery"](dirIndex, DataTableColumnDirective, 4);
    }

    if (rf & 2) {
      var _t;

      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵloadQuery"]()) && (ctx.rowDetail = _t.first);
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵloadQuery"]()) && (ctx.groupHeader = _t.first);
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵloadQuery"]()) && (ctx.footer = _t.first);
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵloadQuery"]()) && (ctx.columnTemplates = _t);
    }
  },
  viewQuery: function DatatableComponent_Query(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵviewQuery"](DataTableBodyComponent, 5);
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵviewQuery"](DataTableHeaderComponent, 5);
    }

    if (rf & 2) {
      var _t;

      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵloadQuery"]()) && (ctx.bodyComponent = _t.first);
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵloadQuery"]()) && (ctx.headerComponent = _t.first);
    }
  },
  hostAttrs: [1, "ngx-datatable"],
  hostVars: 22,
  hostBindings: function DatatableComponent_HostBindings(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵlistener"]("resize", function DatatableComponent_resize_HostBindingHandler() {
        return ctx.onWindowResize();
      }, false, _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵresolveWindow"]);
    }

    if (rf & 2) {
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵclassProp"]("fixed-header", ctx.isFixedHeader)("fixed-row", ctx.isFixedRow)("scroll-vertical", ctx.isVertScroll)("virtualized", ctx.isVirtualized)("scroll-horz", ctx.isHorScroll)("selectable", ctx.isSelectable)("checkbox-selection", ctx.isCheckboxSelection)("cell-selection", ctx.isCellSelection)("single-selection", ctx.isSingleSelection)("multi-selection", ctx.isMultiSelection)("multi-click-selection", ctx.isMultiClickSelection);
    }
  },
  inputs: {
    selected: "selected",
    scrollbarV: "scrollbarV",
    scrollbarH: "scrollbarH",
    rowHeight: "rowHeight",
    columnMode: "columnMode",
    headerHeight: "headerHeight",
    footerHeight: "footerHeight",
    externalPaging: "externalPaging",
    externalSorting: "externalSorting",
    loadingIndicator: "loadingIndicator",
    reorderable: "reorderable",
    swapColumns: "swapColumns",
    sortType: "sortType",
    sorts: "sorts",
    cssClasses: "cssClasses",
    messages: "messages",
    groupExpansionDefault: "groupExpansionDefault",
    selectAllRowsOnPage: "selectAllRowsOnPage",
    virtualization: "virtualization",
    summaryRow: "summaryRow",
    summaryHeight: "summaryHeight",
    summaryPosition: "summaryPosition",
    rowIdentity: "rowIdentity",
    rows: "rows",
    groupedRows: "groupedRows",
    groupRowsBy: "groupRowsBy",
    columns: "columns",
    limit: "limit",
    count: "count",
    offset: "offset",
    targetMarkerTemplate: "targetMarkerTemplate",
    selectionType: "selectionType",
    rowClass: "rowClass",
    selectCheck: "selectCheck",
    displayCheck: "displayCheck",
    trackByProp: "trackByProp",
    treeFromRelation: "treeFromRelation",
    treeToRelation: "treeToRelation"
  },
  outputs: {
    scroll: "scroll",
    activate: "activate",
    select: "select",
    sort: "sort",
    page: "page",
    reorder: "reorder",
    resize: "resize",
    tableContextmenu: "tableContextmenu",
    treeAction: "treeAction"
  },
  decls: 5,
  vars: 34,
  consts: [["visibilityObserver", "", 3, "visible"], [3, "sorts", "sortType", "scrollbarH", "innerWidth", "offsetX", "dealsWithGroup", "columns", "headerHeight", "reorderable", "targetMarkerTemplate", "sortAscendingIcon", "sortDescendingIcon", "sortUnsetIcon", "allRowsSelected", "selectionType", "sort", "resize", "reorder", "select", "columnContextmenu", 4, "ngIf"], [3, "groupRowsBy", "groupedRows", "rows", "groupExpansionDefault", "scrollbarV", "scrollbarH", "virtualization", "loadingIndicator", "externalPaging", "rowHeight", "rowCount", "offset", "trackByProp", "columns", "pageSize", "offsetX", "rowDetail", "groupHeader", "selected", "innerWidth", "bodyHeight", "selectionType", "emptyMessage", "rowIdentity", "rowClass", "selectCheck", "displayCheck", "summaryRow", "summaryHeight", "summaryPosition", "page", "activate", "rowContextmenu", "select", "scroll", "treeAction"], [3, "rowCount", "pageSize", "offset", "footerHeight", "footerTemplate", "totalMessage", "pagerLeftArrowIcon", "pagerRightArrowIcon", "pagerPreviousIcon", "selectedCount", "selectedMessage", "pagerNextIcon", "page", 4, "ngIf"], [3, "sorts", "sortType", "scrollbarH", "innerWidth", "offsetX", "dealsWithGroup", "columns", "headerHeight", "reorderable", "targetMarkerTemplate", "sortAscendingIcon", "sortDescendingIcon", "sortUnsetIcon", "allRowsSelected", "selectionType", "sort", "resize", "reorder", "select", "columnContextmenu"], [3, "rowCount", "pageSize", "offset", "footerHeight", "footerTemplate", "totalMessage", "pagerLeftArrowIcon", "pagerRightArrowIcon", "pagerPreviousIcon", "selectedCount", "selectedMessage", "pagerNextIcon", "page"]],
  template: function DatatableComponent_Template(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](0, "div", 0);
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵlistener"]("visible", function DatatableComponent_Template_div_visible_0_listener() {
        return ctx.recalculate();
      });
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtemplate"](1, DatatableComponent_datatable_header_1_Template, 2, 17, "datatable-header", 1);
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](2, "datatable-body", 2);
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵlistener"]("page", function DatatableComponent_Template_datatable_body_page_2_listener($event) {
        return ctx.onBodyPage($event);
      })("activate", function DatatableComponent_Template_datatable_body_activate_2_listener($event) {
        return ctx.activate.emit($event);
      })("rowContextmenu", function DatatableComponent_Template_datatable_body_rowContextmenu_2_listener($event) {
        return ctx.onRowContextmenu($event);
      })("select", function DatatableComponent_Template_datatable_body_select_2_listener($event) {
        return ctx.onBodySelect($event);
      })("scroll", function DatatableComponent_Template_datatable_body_scroll_2_listener($event) {
        return ctx.onBodyScroll($event);
      })("treeAction", function DatatableComponent_Template_datatable_body_treeAction_2_listener($event) {
        return ctx.onTreeAction($event);
      });
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵpipe"](3, "async");
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtemplate"](4, DatatableComponent_datatable_footer_4_Template, 1, 12, "datatable-footer", 3);
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]();
    }

    if (rf & 2) {
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("ngIf", ctx.headerHeight);
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("groupRowsBy", ctx.groupRowsBy)("groupedRows", ctx.groupedRows)("rows", ctx._internalRows)("groupExpansionDefault", ctx.groupExpansionDefault)("scrollbarV", ctx.scrollbarV)("scrollbarH", ctx.scrollbarH)("virtualization", ctx.virtualization)("loadingIndicator", ctx.loadingIndicator)("externalPaging", ctx.externalPaging)("rowHeight", ctx.rowHeight)("rowCount", ctx.rowCount)("offset", ctx.offset)("trackByProp", ctx.trackByProp)("columns", ctx._internalColumns)("pageSize", ctx.pageSize)("offsetX", _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵpipeBind1"](3, 32, ctx._offsetX))("rowDetail", ctx.rowDetail)("groupHeader", ctx.groupHeader)("selected", ctx.selected)("innerWidth", ctx._innerWidth)("bodyHeight", ctx.bodyHeight)("selectionType", ctx.selectionType)("emptyMessage", ctx.messages.emptyMessage)("rowIdentity", ctx.rowIdentity)("rowClass", ctx.rowClass)("selectCheck", ctx.selectCheck)("displayCheck", ctx.displayCheck)("summaryRow", ctx.summaryRow)("summaryHeight", ctx.summaryHeight)("summaryPosition", ctx.summaryPosition);
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"](2);
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("ngIf", ctx.footerHeight);
    }
  },
  directives: function directives() {
    return [VisibilityDirective, _angular_common__WEBPACK_IMPORTED_MODULE_5__.NgIf, DataTableBodyComponent, DataTableHeaderComponent, DataTableFooterComponent];
  },
  pipes: function pipes() {
    return [_angular_common__WEBPACK_IMPORTED_MODULE_5__.AsyncPipe];
  },
  styles: [".ngx-datatable{display:block;justify-content:center;overflow:hidden;position:relative;transform:translateZ(0)}.ngx-datatable [hidden]{display:none!important}.ngx-datatable *,.ngx-datatable :after,.ngx-datatable :before{box-sizing:border-box}.ngx-datatable.scroll-vertical .datatable-body{overflow-y:auto}.ngx-datatable.scroll-vertical.virtualized .datatable-body .datatable-row-wrapper{position:absolute}.ngx-datatable.scroll-horz .datatable-body{-webkit-overflow-scrolling:touch;overflow-x:auto}.ngx-datatable.fixed-header .datatable-header .datatable-header-inner{white-space:nowrap}.ngx-datatable.fixed-header .datatable-header .datatable-header-inner .datatable-header-cell{overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.ngx-datatable.fixed-row .datatable-scroll,.ngx-datatable.fixed-row .datatable-scroll .datatable-body-row{white-space:nowrap}.ngx-datatable.fixed-row .datatable-scroll .datatable-body-row .datatable-body-cell,.ngx-datatable.fixed-row .datatable-scroll .datatable-body-row .datatable-body-group-cell{overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.ngx-datatable .datatable-body-row,.ngx-datatable .datatable-header-inner,.ngx-datatable .datatable-row-center{-o-flex-flow:row;display:flex;flex-direction:row;flex-flow:row}.ngx-datatable .datatable-body-cell,.ngx-datatable .datatable-header-cell{display:inline-block;line-height:1.625;overflow-x:hidden;vertical-align:top}.ngx-datatable .datatable-body-cell:focus,.ngx-datatable .datatable-header-cell:focus{outline:none}.ngx-datatable .datatable-row-left,.ngx-datatable .datatable-row-right{z-index:9}.ngx-datatable .datatable-row-center,.ngx-datatable .datatable-row-group,.ngx-datatable .datatable-row-left,.ngx-datatable .datatable-row-right{position:relative}.ngx-datatable .datatable-header{display:block;overflow:hidden}.ngx-datatable .datatable-header .datatable-header-inner{-webkit-align-items:stretch;align-items:stretch}.ngx-datatable .datatable-header .datatable-header-cell{display:inline-block;position:relative}.ngx-datatable .datatable-header .datatable-header-cell.sortable .datatable-header-cell-wrapper{cursor:pointer}.ngx-datatable .datatable-header .datatable-header-cell.longpress .datatable-header-cell-wrapper{cursor:move}.ngx-datatable .datatable-header .datatable-header-cell .sort-btn{cursor:pointer;display:inline-block;line-height:100%;vertical-align:middle}.ngx-datatable .datatable-header .datatable-header-cell .resize-handle,.ngx-datatable .datatable-header .datatable-header-cell .resize-handle--not-resizable{bottom:0;display:inline-block;padding:0 4px;position:absolute;right:0;top:0;visibility:hidden;width:5px}.ngx-datatable .datatable-header .datatable-header-cell .resize-handle{cursor:ew-resize}.ngx-datatable .datatable-header .datatable-header-cell.resizeable:hover .resize-handle,.ngx-datatable .datatable-header .datatable-header-cell:hover .resize-handle--not-resizable{visibility:visible}.ngx-datatable .datatable-header .datatable-header-cell .targetMarker{bottom:0;position:absolute;top:0}.ngx-datatable .datatable-header .datatable-header-cell .targetMarker.dragFromLeft{right:0}.ngx-datatable .datatable-header .datatable-header-cell .targetMarker.dragFromRight{left:0}.ngx-datatable .datatable-header .datatable-header-cell .datatable-header-cell-template-wrap{height:inherit}.ngx-datatable .datatable-body{display:block;position:relative;z-index:10}.ngx-datatable .datatable-body .datatable-scroll{display:inline-block}.ngx-datatable .datatable-body .datatable-row-detail{overflow-y:hidden}.ngx-datatable .datatable-body .datatable-row-wrapper{display:flex;flex-direction:column}.ngx-datatable .datatable-body .datatable-body-row{outline:none}.ngx-datatable .datatable-body .datatable-body-row>div{display:flex}.ngx-datatable .datatable-footer{display:block;overflow:auto;width:100%}.ngx-datatable .datatable-footer .datatable-footer-inner{align-items:center;display:flex;width:100%}.ngx-datatable .datatable-footer .selected-count .page-count{flex:1 1 40%}.ngx-datatable .datatable-footer .selected-count .datatable-pager{flex:1 1 60%}.ngx-datatable .datatable-footer .page-count{flex:1 1 20%}.ngx-datatable .datatable-footer .datatable-pager{flex:1 1 80%;text-align:right}.ngx-datatable .datatable-footer .datatable-pager .pager,.ngx-datatable .datatable-footer .datatable-pager .pager li{display:inline-block;list-style:none;margin:0;padding:0}.ngx-datatable .datatable-footer .datatable-pager .pager li,.ngx-datatable .datatable-footer .datatable-pager .pager li a{outline:none}.ngx-datatable .datatable-footer .datatable-pager .pager li a{cursor:pointer;display:inline-block}.ngx-datatable .datatable-footer .datatable-pager .pager li.disabled a{cursor:not-allowed}"],
  encapsulation: 2,
  changeDetection: 0
});

DatatableComponent.ctorParameters = function () {
  return [{
    type: ScrollbarHelper,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.SkipSelf
    }]
  }, {
    type: DimensionsHelper,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.SkipSelf
    }]
  }, {
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.ChangeDetectorRef
  }, {
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.ElementRef
  }, {
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.KeyValueDiffers
  }, {
    type: ColumnChangesService
  }, {
    type: undefined,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Optional
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Inject,
      args: ['configuration']
    }]
  }];
};

DatatableComponent.propDecorators = {
  targetMarkerTemplate: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
  }],
  rows: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
  }],
  groupRowsBy: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
  }],
  groupedRows: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
  }],
  columns: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
  }],
  selected: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
  }],
  scrollbarV: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
  }],
  scrollbarH: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
  }],
  rowHeight: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
  }],
  columnMode: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
  }],
  headerHeight: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
  }],
  footerHeight: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
  }],
  externalPaging: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
  }],
  externalSorting: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
  }],
  limit: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
  }],
  count: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
  }],
  offset: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
  }],
  loadingIndicator: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
  }],
  selectionType: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
  }],
  reorderable: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
  }],
  swapColumns: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
  }],
  sortType: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
  }],
  sorts: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
  }],
  cssClasses: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
  }],
  messages: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
  }],
  rowClass: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
  }],
  selectCheck: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
  }],
  displayCheck: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
  }],
  groupExpansionDefault: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
  }],
  trackByProp: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
  }],
  selectAllRowsOnPage: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
  }],
  virtualization: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
  }],
  treeFromRelation: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
  }],
  treeToRelation: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
  }],
  summaryRow: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
  }],
  summaryHeight: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
  }],
  summaryPosition: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
  }],
  scroll: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Output
  }],
  activate: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Output
  }],
  select: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Output
  }],
  sort: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Output
  }],
  page: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Output
  }],
  reorder: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Output
  }],
  resize: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Output
  }],
  tableContextmenu: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Output
  }],
  treeAction: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Output
  }],
  isFixedHeader: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.HostBinding,
    args: ['class.fixed-header']
  }],
  isFixedRow: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.HostBinding,
    args: ['class.fixed-row']
  }],
  isVertScroll: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.HostBinding,
    args: ['class.scroll-vertical']
  }],
  isVirtualized: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.HostBinding,
    args: ['class.virtualized']
  }],
  isHorScroll: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.HostBinding,
    args: ['class.scroll-horz']
  }],
  isSelectable: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.HostBinding,
    args: ['class.selectable']
  }],
  isCheckboxSelection: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.HostBinding,
    args: ['class.checkbox-selection']
  }],
  isCellSelection: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.HostBinding,
    args: ['class.cell-selection']
  }],
  isSingleSelection: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.HostBinding,
    args: ['class.single-selection']
  }],
  isMultiSelection: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.HostBinding,
    args: ['class.multi-selection']
  }],
  isMultiClickSelection: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.HostBinding,
    args: ['class.multi-click-selection']
  }],
  columnTemplates: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.ContentChildren,
    args: [DataTableColumnDirective]
  }],
  rowDetail: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.ContentChild,
    args: [DatatableRowDetailDirective]
  }],
  groupHeader: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.ContentChild,
    args: [DatatableGroupHeaderDirective]
  }],
  footer: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.ContentChild,
    args: [DatatableFooterDirective]
  }],
  bodyComponent: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.ViewChild,
    args: [DataTableBodyComponent]
  }],
  headerComponent: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.ViewChild,
    args: [DataTableHeaderComponent]
  }],
  rowIdentity: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
  }],
  onWindowResize: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.HostListener,
    args: ['window:resize']
  }]
};

(0,tslib__WEBPACK_IMPORTED_MODULE_10__.__decorate)([throttleable(5)], DatatableComponent.prototype, "onWindowResize", null);

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵsetClassMetadata"](ScrollbarHelper, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Injectable
  }], function () {
    return [{
      type: undefined,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Inject,
        args: [_angular_common__WEBPACK_IMPORTED_MODULE_5__.DOCUMENT]
      }]
    }];
  }, null);
})();

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵsetClassMetadata"](DimensionsHelper, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Injectable
  }], null, null);
})();

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵsetClassMetadata"](ColumnChangesService, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Injectable
  }], function () {
    return [];
  }, null);
})();

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵsetClassMetadata"](DataTableFooterTemplateDirective, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Directive,
    args: [{
      selector: '[ngx-datatable-footer-template]'
    }]
  }], function () {
    return [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.TemplateRef
    }];
  }, null);
})();

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵsetClassMetadata"](VisibilityDirective, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Directive,
    args: [{
      selector: '[visibilityObserver]'
    }]
  }], function () {
    return [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.ElementRef
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.NgZone
    }];
  }, {
    isVisible: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.HostBinding,
      args: ['class.visible']
    }],
    visible: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Output
    }]
  });
})();

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵsetClassMetadata"](DraggableDirective, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Directive,
    args: [{
      selector: '[draggable]'
    }]
  }], function () {
    return [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.ElementRef
    }];
  }, {
    dragX: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
    }],
    dragY: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
    }],
    dragStart: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Output
    }],
    dragging: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Output
    }],
    dragEnd: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Output
    }],
    dragEventTarget: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
    }],
    dragModel: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
    }]
  });
})();

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵsetClassMetadata"](ResizeableDirective, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Directive,
    args: [{
      selector: '[resizeable]',
      host: {
        '[class.resizeable]': 'resizeEnabled'
      }
    }]
  }], function () {
    return [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.ElementRef
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Renderer2
    }];
  }, {
    resizeEnabled: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
    }],
    resize: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Output
    }],
    onMousedown: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.HostListener,
      args: ['mousedown', ['$event']]
    }],
    minWidth: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
    }],
    maxWidth: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
    }]
  });
})();

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵsetClassMetadata"](OrderableDirective, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Directive,
    args: [{
      selector: '[orderable]'
    }]
  }], function () {
    return [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.KeyValueDiffers
    }, {
      type: undefined,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Inject,
        args: [_angular_common__WEBPACK_IMPORTED_MODULE_5__.DOCUMENT]
      }]
    }];
  }, {
    reorder: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Output
    }],
    targetChanged: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Output
    }],
    draggables: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.ContentChildren,
      args: [DraggableDirective, {
        descendants: true
      }]
    }]
  });
})();

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵsetClassMetadata"](LongPressDirective, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Directive,
    args: [{
      selector: '[long-press]'
    }]
  }], function () {
    return [];
  }, {
    pressEnabled: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
    }],
    duration: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
    }],
    longPressStart: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Output
    }],
    longPressing: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Output
    }],
    longPressEnd: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Output
    }],
    press: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.HostBinding,
      args: ['class.press']
    }],
    isLongPress: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.HostBinding,
      args: ['class.longpress']
    }],
    onMouseDown: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.HostListener,
      args: ['mousedown', ['$event']]
    }],
    pressModel: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
    }]
  });
})();

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵsetClassMetadata"](ScrollerComponent, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Component,
    args: [{
      selector: 'datatable-scroller',
      template: " <ng-content></ng-content> ",
      host: {
        class: 'datatable-scroll'
      },
      changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_4__.ChangeDetectionStrategy.OnPush
    }]
  }], function () {
    return [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.NgZone
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.ElementRef
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Renderer2
    }];
  }, {
    scrollbarV: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
    }],
    scrollbarH: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
    }],
    scroll: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Output
    }],
    scrollHeight: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.HostBinding,
      args: ['style.height.px']
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
    }],
    scrollWidth: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.HostBinding,
      args: ['style.width.px']
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
    }]
  });
})();

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵsetClassMetadata"](DatatableGroupHeaderTemplateDirective, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Directive,
    args: [{
      selector: '[ngx-datatable-group-header-template]'
    }]
  }], function () {
    return [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.TemplateRef
    }];
  }, null);
})();

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵsetClassMetadata"](DatatableGroupHeaderDirective, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Directive,
    args: [{
      selector: 'ngx-datatable-group-header'
    }]
  }], function () {
    return [];
  }, {
    rowHeight: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
    }],
    toggle: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Output
    }],
    _templateInput: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input,
      args: ['template']
    }],
    _templateQuery: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.ContentChild,
      args: [DatatableGroupHeaderTemplateDirective, {
        read: _angular_core__WEBPACK_IMPORTED_MODULE_4__.TemplateRef,
        static: true
      }]
    }]
  });
})();

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵsetClassMetadata"](DataTableColumnHeaderDirective, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Directive,
    args: [{
      selector: '[ngx-datatable-header-template]'
    }]
  }], function () {
    return [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.TemplateRef
    }];
  }, null);
})();

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵsetClassMetadata"](DataTableColumnCellDirective, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Directive,
    args: [{
      selector: '[ngx-datatable-cell-template]'
    }]
  }], function () {
    return [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.TemplateRef
    }];
  }, null);
})();

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵsetClassMetadata"](DataTableColumnCellTreeToggle, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Directive,
    args: [{
      selector: '[ngx-datatable-tree-toggle]'
    }]
  }], function () {
    return [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.TemplateRef
    }];
  }, null);
})();

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵsetClassMetadata"](DataTableColumnDirective, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Directive,
    args: [{
      selector: 'ngx-datatable-column'
    }]
  }], function () {
    return [{
      type: ColumnChangesService
    }];
  }, {
    name: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
    }],
    prop: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
    }],
    frozenLeft: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
    }],
    frozenRight: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
    }],
    flexGrow: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
    }],
    resizeable: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
    }],
    comparator: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
    }],
    pipe: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
    }],
    sortable: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
    }],
    draggable: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
    }],
    canAutoResize: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
    }],
    minWidth: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
    }],
    width: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
    }],
    maxWidth: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
    }],
    checkboxable: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
    }],
    headerCheckboxable: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
    }],
    headerClass: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
    }],
    cellClass: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
    }],
    isTreeColumn: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
    }],
    treeLevelIndent: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
    }],
    summaryFunc: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
    }],
    summaryTemplate: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
    }],
    _cellTemplateInput: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input,
      args: ['cellTemplate']
    }],
    _cellTemplateQuery: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.ContentChild,
      args: [DataTableColumnCellDirective, {
        read: _angular_core__WEBPACK_IMPORTED_MODULE_4__.TemplateRef,
        static: true
      }]
    }],
    _headerTemplateInput: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input,
      args: ['headerTemplate']
    }],
    _headerTemplateQuery: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.ContentChild,
      args: [DataTableColumnHeaderDirective, {
        read: _angular_core__WEBPACK_IMPORTED_MODULE_4__.TemplateRef,
        static: true
      }]
    }],
    _treeToggleTemplateInput: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input,
      args: ['treeToggleTemplate']
    }],
    _treeToggleTemplateQuery: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.ContentChild,
      args: [DataTableColumnCellTreeToggle, {
        read: _angular_core__WEBPACK_IMPORTED_MODULE_4__.TemplateRef,
        static: true
      }]
    }]
  });
})();

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵsetClassMetadata"](DatatableRowDetailTemplateDirective, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Directive,
    args: [{
      selector: '[ngx-datatable-row-detail-template]'
    }]
  }], function () {
    return [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.TemplateRef
    }];
  }, null);
})();

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵsetClassMetadata"](DatatableRowDetailDirective, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Directive,
    args: [{
      selector: 'ngx-datatable-row-detail'
    }]
  }], function () {
    return [];
  }, {
    rowHeight: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
    }],
    toggle: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Output
    }],
    _templateInput: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input,
      args: ['template']
    }],
    _templateQuery: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.ContentChild,
      args: [DatatableRowDetailTemplateDirective, {
        read: _angular_core__WEBPACK_IMPORTED_MODULE_4__.TemplateRef,
        static: true
      }]
    }]
  });
})();

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵsetClassMetadata"](DatatableFooterDirective, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Directive,
    args: [{
      selector: 'ngx-datatable-footer'
    }]
  }], null, {
    footerHeight: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
    }],
    totalMessage: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
    }],
    selectedMessage: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
    }],
    pagerLeftArrowIcon: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
    }],
    pagerRightArrowIcon: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
    }],
    pagerPreviousIcon: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
    }],
    pagerNextIcon: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
    }],
    _templateInput: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input,
      args: ['template']
    }],
    _templateQuery: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.ContentChild,
      args: [DataTableFooterTemplateDirective, {
        read: _angular_core__WEBPACK_IMPORTED_MODULE_4__.TemplateRef
      }]
    }]
  });
})();

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵsetClassMetadata"](DataTableBodyComponent, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Component,
    args: [{
      selector: 'datatable-body',
      template: "\n    <datatable-progress *ngIf=\"loadingIndicator\"> </datatable-progress>\n    <datatable-selection\n      #selector\n      [selected]=\"selected\"\n      [rows]=\"rows\"\n      [selectCheck]=\"selectCheck\"\n      [selectEnabled]=\"selectEnabled\"\n      [selectionType]=\"selectionType\"\n      [rowIdentity]=\"rowIdentity\"\n      (select)=\"select.emit($event)\"\n      (activate)=\"activate.emit($event)\"\n    >\n      <datatable-scroller\n        *ngIf=\"rows?.length\"\n        [scrollbarV]=\"scrollbarV\"\n        [scrollbarH]=\"scrollbarH\"\n        [scrollHeight]=\"scrollHeight\"\n        [scrollWidth]=\"columnGroupWidths?.total\"\n        (scroll)=\"onBodyScroll($event)\"\n      >\n        <datatable-summary-row\n          *ngIf=\"summaryRow && summaryPosition === 'top'\"\n          [rowHeight]=\"summaryHeight\"\n          [offsetX]=\"offsetX\"\n          [innerWidth]=\"innerWidth\"\n          [rows]=\"rows\"\n          [columns]=\"columns\"\n        >\n        </datatable-summary-row>\n        <datatable-row-wrapper\n          [groupedRows]=\"groupedRows\"\n          *ngFor=\"let group of temp; let i = index; trackBy: rowTrackingFn\"\n          [innerWidth]=\"innerWidth\"\n          [ngStyle]=\"getRowsStyles(group)\"\n          [rowDetail]=\"rowDetail\"\n          [groupHeader]=\"groupHeader\"\n          [offsetX]=\"offsetX\"\n          [detailRowHeight]=\"getDetailRowHeight(group && group[i], i)\"\n          [row]=\"group\"\n          [expanded]=\"getRowExpanded(group)\"\n          [rowIndex]=\"getRowIndex(group && group[i])\"\n          (rowContextmenu)=\"rowContextmenu.emit($event)\"\n        >\n          <datatable-body-row\n            *ngIf=\"!groupedRows; else groupedRowsTemplate\"\n            tabindex=\"-1\"\n            [isSelected]=\"selector.getRowSelected(group)\"\n            [innerWidth]=\"innerWidth\"\n            [offsetX]=\"offsetX\"\n            [columns]=\"columns\"\n            [rowHeight]=\"getRowHeight(group)\"\n            [row]=\"group\"\n            [rowIndex]=\"getRowIndex(group)\"\n            [expanded]=\"getRowExpanded(group)\"\n            [rowClass]=\"rowClass\"\n            [displayCheck]=\"displayCheck\"\n            [treeStatus]=\"group && group.treeStatus\"\n            (treeAction)=\"onTreeAction(group)\"\n            (activate)=\"selector.onActivate($event, indexes.first + i)\"\n          >\n          </datatable-body-row>\n          <ng-template #groupedRowsTemplate>\n            <datatable-body-row\n              *ngFor=\"let row of group.value; let i = index; trackBy: rowTrackingFn\"\n              tabindex=\"-1\"\n              [isSelected]=\"selector.getRowSelected(row)\"\n              [innerWidth]=\"innerWidth\"\n              [offsetX]=\"offsetX\"\n              [columns]=\"columns\"\n              [rowHeight]=\"getRowHeight(row)\"\n              [row]=\"row\"\n              [group]=\"group.value\"\n              [rowIndex]=\"getRowIndex(row)\"\n              [expanded]=\"getRowExpanded(row)\"\n              [rowClass]=\"rowClass\"\n              (activate)=\"selector.onActivate($event, i)\"\n            >\n            </datatable-body-row>\n          </ng-template>\n        </datatable-row-wrapper>\n        <datatable-summary-row\n          *ngIf=\"summaryRow && summaryPosition === 'bottom'\"\n          [ngStyle]=\"getBottomSummaryRowStyles()\"\n          [rowHeight]=\"summaryHeight\"\n          [offsetX]=\"offsetX\"\n          [innerWidth]=\"innerWidth\"\n          [rows]=\"rows\"\n          [columns]=\"columns\"\n        >\n        </datatable-summary-row>\n      </datatable-scroller>\n      <div class=\"empty-row\" *ngIf=\"!rows?.length && !loadingIndicator\" [innerHTML]=\"emptyMessage\"></div>\n    </datatable-selection>\n  ",
      changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_4__.ChangeDetectionStrategy.OnPush,
      host: {
        class: 'datatable-body'
      }
    }]
  }], function () {
    return [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.ChangeDetectorRef
    }];
  }, {
    selected: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
    }],
    scroll: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Output
    }],
    page: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Output
    }],
    activate: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Output
    }],
    select: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Output
    }],
    detailToggle: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Output
    }],
    rowContextmenu: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Output
    }],
    treeAction: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Output
    }],
    pageSize: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
    }],
    rows: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
    }],
    columns: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
    }],
    offset: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
    }],
    rowCount: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
    }],
    bodyWidth: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.HostBinding,
      args: ['style.width']
    }],
    bodyHeight: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.HostBinding,
      args: ['style.height']
    }],
    offsetX: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
    }],
    loadingIndicator: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
    }],
    scrollbarV: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
    }],
    scrollbarH: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
    }],
    externalPaging: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
    }],
    rowHeight: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
    }],
    emptyMessage: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
    }],
    selectionType: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
    }],
    rowIdentity: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
    }],
    rowDetail: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
    }],
    groupHeader: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
    }],
    selectCheck: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
    }],
    displayCheck: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
    }],
    trackByProp: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
    }],
    rowClass: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
    }],
    groupedRows: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
    }],
    groupExpansionDefault: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
    }],
    innerWidth: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
    }],
    groupRowsBy: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
    }],
    virtualization: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
    }],
    summaryRow: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
    }],
    summaryPosition: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
    }],
    summaryHeight: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
    }],
    scroller: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.ViewChild,
      args: [ScrollerComponent]
    }]
  });
})();

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵsetClassMetadata"](DataTableHeaderComponent, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Component,
    args: [{
      selector: 'datatable-header',
      template: "\n    <div\n      orderable\n      (reorder)=\"onColumnReordered($event)\"\n      (targetChanged)=\"onTargetChanged($event)\"\n      [style.width.px]=\"_columnGroupWidths.total\"\n      class=\"datatable-header-inner\"\n    >\n      <div\n        *ngFor=\"let colGroup of _columnsByPin; trackBy: trackByGroups\"\n        [class]=\"'datatable-row-' + colGroup.type\"\n        [ngStyle]=\"_styleByGroup[colGroup.type]\"\n      >\n        <datatable-header-cell\n          *ngFor=\"let column of colGroup.columns; trackBy: columnTrackingFn\"\n          resizeable\n          [resizeEnabled]=\"column.resizeable\"\n          (resize)=\"onColumnResized($event, column)\"\n          long-press\n          [pressModel]=\"column\"\n          [pressEnabled]=\"reorderable && column.draggable\"\n          (longPressStart)=\"onLongPressStart($event)\"\n          (longPressEnd)=\"onLongPressEnd($event)\"\n          draggable\n          [dragX]=\"reorderable && column.draggable && column.dragging\"\n          [dragY]=\"false\"\n          [dragModel]=\"column\"\n          [dragEventTarget]=\"dragEventTarget\"\n          [headerHeight]=\"headerHeight\"\n          [isTarget]=\"column.isTarget\"\n          [targetMarkerTemplate]=\"targetMarkerTemplate\"\n          [targetMarkerContext]=\"column.targetMarkerContext\"\n          [column]=\"column\"\n          [sortType]=\"sortType\"\n          [sorts]=\"sorts\"\n          [selectionType]=\"selectionType\"\n          [sortAscendingIcon]=\"sortAscendingIcon\"\n          [sortDescendingIcon]=\"sortDescendingIcon\"\n          [sortUnsetIcon]=\"sortUnsetIcon\"\n          [allRowsSelected]=\"allRowsSelected\"\n          (sort)=\"onSort($event)\"\n          (select)=\"select.emit($event)\"\n          (columnContextmenu)=\"columnContextmenu.emit($event)\"\n        >\n        </datatable-header-cell>\n      </div>\n    </div>\n  ",
      host: {
        class: 'datatable-header'
      },
      changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_4__.ChangeDetectionStrategy.OnPush
    }]
  }], function () {
    return [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.ChangeDetectorRef
    }];
  }, {
    sort: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Output
    }],
    reorder: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Output
    }],
    resize: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Output
    }],
    select: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Output
    }],
    columnContextmenu: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Output
    }],
    innerWidth: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
    }],
    headerHeight: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.HostBinding,
      args: ['style.height']
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
    }],
    columns: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
    }],
    offsetX: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
    }],
    headerWidth: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.HostBinding,
      args: ['style.width']
    }],
    sorts: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
    }],
    sortAscendingIcon: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
    }],
    sortDescendingIcon: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
    }],
    sortUnsetIcon: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
    }],
    scrollbarH: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
    }],
    dealsWithGroup: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
    }],
    targetMarkerTemplate: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
    }],
    sortType: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
    }],
    allRowsSelected: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
    }],
    selectionType: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
    }],
    reorderable: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
    }]
  });
})();

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵsetClassMetadata"](DatatableComponent, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Component,
    args: [{
      selector: 'ngx-datatable',
      template: "<div visibilityObserver (visible)=\"recalculate()\">\n  <datatable-header\n    *ngIf=\"headerHeight\"\n    [sorts]=\"sorts\"\n    [sortType]=\"sortType\"\n    [scrollbarH]=\"scrollbarH\"\n    [innerWidth]=\"_innerWidth\"\n    [offsetX]=\"_offsetX | async\"\n    [dealsWithGroup]=\"groupedRows !== undefined\"\n    [columns]=\"_internalColumns\"\n    [headerHeight]=\"headerHeight\"\n    [reorderable]=\"reorderable\"\n    [targetMarkerTemplate]=\"targetMarkerTemplate\"\n    [sortAscendingIcon]=\"cssClasses.sortAscending\"\n    [sortDescendingIcon]=\"cssClasses.sortDescending\"\n    [sortUnsetIcon]=\"cssClasses.sortUnset\"\n    [allRowsSelected]=\"allRowsSelected\"\n    [selectionType]=\"selectionType\"\n    (sort)=\"onColumnSort($event)\"\n    (resize)=\"onColumnResize($event)\"\n    (reorder)=\"onColumnReorder($event)\"\n    (select)=\"onHeaderSelect($event)\"\n    (columnContextmenu)=\"onColumnContextmenu($event)\"\n  >\n  </datatable-header>\n  <datatable-body\n    [groupRowsBy]=\"groupRowsBy\"\n    [groupedRows]=\"groupedRows\"\n    [rows]=\"_internalRows\"\n    [groupExpansionDefault]=\"groupExpansionDefault\"\n    [scrollbarV]=\"scrollbarV\"\n    [scrollbarH]=\"scrollbarH\"\n    [virtualization]=\"virtualization\"\n    [loadingIndicator]=\"loadingIndicator\"\n    [externalPaging]=\"externalPaging\"\n    [rowHeight]=\"rowHeight\"\n    [rowCount]=\"rowCount\"\n    [offset]=\"offset\"\n    [trackByProp]=\"trackByProp\"\n    [columns]=\"_internalColumns\"\n    [pageSize]=\"pageSize\"\n    [offsetX]=\"_offsetX | async\"\n    [rowDetail]=\"rowDetail\"\n    [groupHeader]=\"groupHeader\"\n    [selected]=\"selected\"\n    [innerWidth]=\"_innerWidth\"\n    [bodyHeight]=\"bodyHeight\"\n    [selectionType]=\"selectionType\"\n    [emptyMessage]=\"messages.emptyMessage\"\n    [rowIdentity]=\"rowIdentity\"\n    [rowClass]=\"rowClass\"\n    [selectCheck]=\"selectCheck\"\n    [displayCheck]=\"displayCheck\"\n    [summaryRow]=\"summaryRow\"\n    [summaryHeight]=\"summaryHeight\"\n    [summaryPosition]=\"summaryPosition\"\n    (page)=\"onBodyPage($event)\"\n    (activate)=\"activate.emit($event)\"\n    (rowContextmenu)=\"onRowContextmenu($event)\"\n    (select)=\"onBodySelect($event)\"\n    (scroll)=\"onBodyScroll($event)\"\n    (treeAction)=\"onTreeAction($event)\"\n  >\n  </datatable-body>\n  <datatable-footer\n    *ngIf=\"footerHeight\"\n    [rowCount]=\"rowCount\"\n    [pageSize]=\"pageSize\"\n    [offset]=\"offset\"\n    [footerHeight]=\"footerHeight\"\n    [footerTemplate]=\"footer\"\n    [totalMessage]=\"messages.totalMessage\"\n    [pagerLeftArrowIcon]=\"cssClasses.pagerLeftArrow\"\n    [pagerRightArrowIcon]=\"cssClasses.pagerRightArrow\"\n    [pagerPreviousIcon]=\"cssClasses.pagerPrevious\"\n    [selectedCount]=\"selected.length\"\n    [selectedMessage]=\"!!selectionType && messages.selectedMessage\"\n    [pagerNextIcon]=\"cssClasses.pagerNext\"\n    (page)=\"onFooterPage($event)\"\n  >\n  </datatable-footer>\n</div>\n",
      changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_4__.ChangeDetectionStrategy.OnPush,
      encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_4__.ViewEncapsulation.None,
      host: {
        class: 'ngx-datatable'
      },
      styles: [".ngx-datatable{display:block;justify-content:center;overflow:hidden;position:relative;transform:translateZ(0)}.ngx-datatable [hidden]{display:none!important}.ngx-datatable *,.ngx-datatable :after,.ngx-datatable :before{box-sizing:border-box}.ngx-datatable.scroll-vertical .datatable-body{overflow-y:auto}.ngx-datatable.scroll-vertical.virtualized .datatable-body .datatable-row-wrapper{position:absolute}.ngx-datatable.scroll-horz .datatable-body{-webkit-overflow-scrolling:touch;overflow-x:auto}.ngx-datatable.fixed-header .datatable-header .datatable-header-inner{white-space:nowrap}.ngx-datatable.fixed-header .datatable-header .datatable-header-inner .datatable-header-cell{overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.ngx-datatable.fixed-row .datatable-scroll,.ngx-datatable.fixed-row .datatable-scroll .datatable-body-row{white-space:nowrap}.ngx-datatable.fixed-row .datatable-scroll .datatable-body-row .datatable-body-cell,.ngx-datatable.fixed-row .datatable-scroll .datatable-body-row .datatable-body-group-cell{overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.ngx-datatable .datatable-body-row,.ngx-datatable .datatable-header-inner,.ngx-datatable .datatable-row-center{-o-flex-flow:row;display:flex;flex-direction:row;flex-flow:row}.ngx-datatable .datatable-body-cell,.ngx-datatable .datatable-header-cell{display:inline-block;line-height:1.625;overflow-x:hidden;vertical-align:top}.ngx-datatable .datatable-body-cell:focus,.ngx-datatable .datatable-header-cell:focus{outline:none}.ngx-datatable .datatable-row-left,.ngx-datatable .datatable-row-right{z-index:9}.ngx-datatable .datatable-row-center,.ngx-datatable .datatable-row-group,.ngx-datatable .datatable-row-left,.ngx-datatable .datatable-row-right{position:relative}.ngx-datatable .datatable-header{display:block;overflow:hidden}.ngx-datatable .datatable-header .datatable-header-inner{-webkit-align-items:stretch;align-items:stretch}.ngx-datatable .datatable-header .datatable-header-cell{display:inline-block;position:relative}.ngx-datatable .datatable-header .datatable-header-cell.sortable .datatable-header-cell-wrapper{cursor:pointer}.ngx-datatable .datatable-header .datatable-header-cell.longpress .datatable-header-cell-wrapper{cursor:move}.ngx-datatable .datatable-header .datatable-header-cell .sort-btn{cursor:pointer;display:inline-block;line-height:100%;vertical-align:middle}.ngx-datatable .datatable-header .datatable-header-cell .resize-handle,.ngx-datatable .datatable-header .datatable-header-cell .resize-handle--not-resizable{bottom:0;display:inline-block;padding:0 4px;position:absolute;right:0;top:0;visibility:hidden;width:5px}.ngx-datatable .datatable-header .datatable-header-cell .resize-handle{cursor:ew-resize}.ngx-datatable .datatable-header .datatable-header-cell.resizeable:hover .resize-handle,.ngx-datatable .datatable-header .datatable-header-cell:hover .resize-handle--not-resizable{visibility:visible}.ngx-datatable .datatable-header .datatable-header-cell .targetMarker{bottom:0;position:absolute;top:0}.ngx-datatable .datatable-header .datatable-header-cell .targetMarker.dragFromLeft{right:0}.ngx-datatable .datatable-header .datatable-header-cell .targetMarker.dragFromRight{left:0}.ngx-datatable .datatable-header .datatable-header-cell .datatable-header-cell-template-wrap{height:inherit}.ngx-datatable .datatable-body{display:block;position:relative;z-index:10}.ngx-datatable .datatable-body .datatable-scroll{display:inline-block}.ngx-datatable .datatable-body .datatable-row-detail{overflow-y:hidden}.ngx-datatable .datatable-body .datatable-row-wrapper{display:flex;flex-direction:column}.ngx-datatable .datatable-body .datatable-body-row{outline:none}.ngx-datatable .datatable-body .datatable-body-row>div{display:flex}.ngx-datatable .datatable-footer{display:block;overflow:auto;width:100%}.ngx-datatable .datatable-footer .datatable-footer-inner{align-items:center;display:flex;width:100%}.ngx-datatable .datatable-footer .selected-count .page-count{flex:1 1 40%}.ngx-datatable .datatable-footer .selected-count .datatable-pager{flex:1 1 60%}.ngx-datatable .datatable-footer .page-count{flex:1 1 20%}.ngx-datatable .datatable-footer .datatable-pager{flex:1 1 80%;text-align:right}.ngx-datatable .datatable-footer .datatable-pager .pager,.ngx-datatable .datatable-footer .datatable-pager .pager li{display:inline-block;list-style:none;margin:0;padding:0}.ngx-datatable .datatable-footer .datatable-pager .pager li,.ngx-datatable .datatable-footer .datatable-pager .pager li a{outline:none}.ngx-datatable .datatable-footer .datatable-pager .pager li a{cursor:pointer;display:inline-block}.ngx-datatable .datatable-footer .datatable-pager .pager li.disabled a{cursor:not-allowed}"]
    }]
  }], function () {
    return [{
      type: ScrollbarHelper,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.SkipSelf
      }]
    }, {
      type: DimensionsHelper,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.SkipSelf
      }]
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.ChangeDetectorRef
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.ElementRef
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.KeyValueDiffers
    }, {
      type: ColumnChangesService
    }, {
      type: undefined,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Optional
      }, {
        type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Inject,
        args: ['configuration']
      }]
    }];
  }, {
    selected: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
    }],
    scrollbarV: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
    }],
    scrollbarH: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
    }],
    rowHeight: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
    }],
    columnMode: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
    }],
    headerHeight: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
    }],
    footerHeight: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
    }],
    externalPaging: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
    }],
    externalSorting: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
    }],
    loadingIndicator: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
    }],
    reorderable: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
    }],
    swapColumns: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
    }],
    sortType: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
    }],
    sorts: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
    }],
    cssClasses: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
    }],
    messages: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
    }],
    groupExpansionDefault: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
    }],
    selectAllRowsOnPage: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
    }],
    virtualization: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
    }],
    summaryRow: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
    }],
    summaryHeight: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
    }],
    summaryPosition: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
    }],
    scroll: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Output
    }],
    activate: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Output
    }],
    select: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Output
    }],
    sort: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Output
    }],
    page: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Output
    }],
    reorder: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Output
    }],
    resize: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Output
    }],
    tableContextmenu: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Output
    }],
    treeAction: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Output
    }],
    rowIdentity: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
    }],
    rows: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
    }],
    groupedRows: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
    }],
    groupRowsBy: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
    }],
    columns: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
    }],
    limit: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
    }],
    count: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
    }],
    offset: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
    }],
    isFixedHeader: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.HostBinding,
      args: ['class.fixed-header']
    }],
    isFixedRow: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.HostBinding,
      args: ['class.fixed-row']
    }],
    isVertScroll: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.HostBinding,
      args: ['class.scroll-vertical']
    }],
    isVirtualized: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.HostBinding,
      args: ['class.virtualized']
    }],
    isHorScroll: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.HostBinding,
      args: ['class.scroll-horz']
    }],
    isSelectable: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.HostBinding,
      args: ['class.selectable']
    }],
    isCheckboxSelection: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.HostBinding,
      args: ['class.checkbox-selection']
    }],
    isCellSelection: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.HostBinding,
      args: ['class.cell-selection']
    }],
    isSingleSelection: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.HostBinding,
      args: ['class.single-selection']
    }],
    isMultiSelection: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.HostBinding,
      args: ['class.multi-selection']
    }],
    isMultiClickSelection: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.HostBinding,
      args: ['class.multi-click-selection']
    }],
    columnTemplates: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.ContentChildren,
      args: [DataTableColumnDirective]
    }],

    /**
     * Window resize handler to update sizes.
     */
    onWindowResize: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.HostListener,
      args: ['window:resize']
    }],
    targetMarkerTemplate: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
    }],
    selectionType: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
    }],
    rowClass: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
    }],
    selectCheck: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
    }],
    displayCheck: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
    }],
    trackByProp: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
    }],
    treeFromRelation: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
    }],
    treeToRelation: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
    }],
    rowDetail: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.ContentChild,
      args: [DatatableRowDetailDirective]
    }],
    groupHeader: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.ContentChild,
      args: [DatatableGroupHeaderDirective]
    }],
    footer: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.ContentChild,
      args: [DatatableFooterDirective]
    }],
    bodyComponent: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.ViewChild,
      args: [DataTableBodyComponent]
    }],
    headerComponent: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.ViewChild,
      args: [DataTableHeaderComponent]
    }]
  });
})();

var DataTableHeaderCellComponent = /*#__PURE__*/function () {
  function DataTableHeaderCellComponent(cd) {
    (0,C_Users_SAAD_Desktop_frontend_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_2__.default)(this, DataTableHeaderCellComponent);

    this.cd = cd;
    this.sort = new _angular_core__WEBPACK_IMPORTED_MODULE_4__.EventEmitter();
    this.select = new _angular_core__WEBPACK_IMPORTED_MODULE_4__.EventEmitter();
    this.columnContextmenu = new _angular_core__WEBPACK_IMPORTED_MODULE_4__.EventEmitter(false);
    this.sortFn = this.onSort.bind(this);
    this.selectFn = this.select.emit.bind(this.select);
    this.cellContext = {
      column: this.column,
      sortDir: this.sortDir,
      sortFn: this.sortFn,
      allRowsSelected: this.allRowsSelected,
      selectFn: this.selectFn
    };
  }

  (0,C_Users_SAAD_Desktop_frontend_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_3__.default)(DataTableHeaderCellComponent, [{
    key: "allRowsSelected",
    get: function get() {
      return this._allRowsSelected;
    },
    set: function set(value) {
      this._allRowsSelected = value;
      this.cellContext.allRowsSelected = value;
    }
  }, {
    key: "column",
    get: function get() {
      return this._column;
    },
    set: function set(column) {
      this._column = column;
      this.cellContext.column = column;
      this.cd.markForCheck();
    }
  }, {
    key: "sorts",
    get: function get() {
      return this._sorts;
    },
    set: function set(val) {
      this._sorts = val;
      this.sortDir = this.calcSortDir(val);
      this.cellContext.sortDir = this.sortDir;
      this.sortClass = this.calcSortClass(this.sortDir);
      this.cd.markForCheck();
    }
  }, {
    key: "columnCssClasses",
    get: function get() {
      var cls = 'datatable-header-cell';
      if (this.column.sortable) cls += ' sortable';
      if (this.column.resizeable) cls += ' resizeable';

      if (this.column.headerClass) {
        if (typeof this.column.headerClass === 'string') {
          cls += ' ' + this.column.headerClass;
        } else if (typeof this.column.headerClass === 'function') {
          var res = this.column.headerClass({
            column: this.column
          });

          if (typeof res === 'string') {
            cls += res;
          } else if (typeof res === 'object') {
            var keys = Object.keys(res);

            for (var _i4 = 0, _keys = keys; _i4 < _keys.length; _i4++) {
              var k = _keys[_i4];
              if (res[k] === true) cls += " ".concat(k);
            }
          }
        }
      }

      var sortDir = this.sortDir;

      if (sortDir) {
        cls += " sort-active sort-".concat(sortDir);
      }

      return cls;
    }
  }, {
    key: "name",
    get: function get() {
      // guaranteed to have a value by setColumnDefaults() in column-helper.ts
      return this.column.headerTemplate === undefined ? this.column.name : undefined;
    }
  }, {
    key: "minWidth",
    get: function get() {
      return this.column.minWidth;
    }
  }, {
    key: "maxWidth",
    get: function get() {
      return this.column.maxWidth;
    }
  }, {
    key: "width",
    get: function get() {
      return this.column.width;
    }
  }, {
    key: "isCheckboxable",
    get: function get() {
      return this.column.checkboxable && this.column.headerCheckboxable && this.selectionType === SelectionType.checkbox;
    }
  }, {
    key: "onContextmenu",
    value: function onContextmenu($event) {
      this.columnContextmenu.emit({
        event: $event,
        column: this.column
      });
    }
  }, {
    key: "ngOnInit",
    value: function ngOnInit() {
      this.sortClass = this.calcSortClass(this.sortDir);
    }
  }, {
    key: "calcSortDir",
    value: function calcSortDir(sorts) {
      var _this23 = this;

      if (sorts && this.column) {
        var sort = sorts.find(function (s) {
          return s.prop === _this23.column.prop;
        });
        if (sort) return sort.dir;
      }
    }
  }, {
    key: "onSort",
    value: function onSort() {
      if (!this.column.sortable) return;
      var newValue = nextSortDir(this.sortType, this.sortDir);
      this.sort.emit({
        column: this.column,
        prevValue: this.sortDir,
        newValue: newValue
      });
    }
  }, {
    key: "calcSortClass",
    value: function calcSortClass(sortDir) {
      if (!this.cellContext.column.sortable) return;

      if (sortDir === SortDirection.asc) {
        return "sort-btn sort-asc ".concat(this.sortAscendingIcon);
      } else if (sortDir === SortDirection.desc) {
        return "sort-btn sort-desc ".concat(this.sortDescendingIcon);
      } else {
        return "sort-btn ".concat(this.sortUnsetIcon);
      }
    }
  }]);

  return DataTableHeaderCellComponent;
}();

DataTableHeaderCellComponent.ɵfac = function DataTableHeaderCellComponent_Factory(t) {
  return new (t || DataTableHeaderCellComponent)(_angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_4__.ChangeDetectorRef));
};

DataTableHeaderCellComponent.ɵcmp = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵdefineComponent"]({
  type: DataTableHeaderCellComponent,
  selectors: [["datatable-header-cell"]],
  hostAttrs: [1, "datatable-header-cell"],
  hostVars: 11,
  hostBindings: function DataTableHeaderCellComponent_HostBindings(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵlistener"]("contextmenu", function DataTableHeaderCellComponent_contextmenu_HostBindingHandler($event) {
        return ctx.onContextmenu($event);
      });
    }

    if (rf & 2) {
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵattribute"]("title", ctx.name);
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵclassMap"](ctx.columnCssClasses);
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵstyleProp"]("min-width", ctx.minWidth, "px")("max-width", ctx.maxWidth, "px")("width", ctx.width, "px")("height", ctx.headerHeight, "px");
    }
  },
  inputs: {
    allRowsSelected: "allRowsSelected",
    column: "column",
    sorts: "sorts",
    sortType: "sortType",
    sortAscendingIcon: "sortAscendingIcon",
    sortDescendingIcon: "sortDescendingIcon",
    sortUnsetIcon: "sortUnsetIcon",
    isTarget: "isTarget",
    targetMarkerTemplate: "targetMarkerTemplate",
    targetMarkerContext: "targetMarkerContext",
    selectionType: "selectionType",
    headerHeight: "headerHeight"
  },
  outputs: {
    sort: "sort",
    select: "select",
    columnContextmenu: "columnContextmenu"
  },
  decls: 6,
  vars: 6,
  consts: [[1, "datatable-header-cell-template-wrap"], [4, "ngIf"], ["class", "datatable-checkbox", 4, "ngIf"], ["class", "datatable-header-cell-wrapper", 4, "ngIf"], [3, "click"], [3, "ngTemplateOutlet", "ngTemplateOutletContext"], [1, "datatable-checkbox"], ["type", "checkbox", 3, "checked", "change"], [1, "datatable-header-cell-wrapper"], [1, "datatable-header-cell-label", "draggable", 3, "innerHTML", "click"]],
  template: function DataTableHeaderCellComponent_Template(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](0, "div", 0);
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtemplate"](1, DataTableHeaderCellComponent_1_Template, 1, 2, undefined, 1);
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtemplate"](2, DataTableHeaderCellComponent_label_2_Template, 2, 1, "label", 2);
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtemplate"](3, DataTableHeaderCellComponent_span_3_Template, 2, 1, "span", 3);
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtemplate"](4, DataTableHeaderCellComponent_4_Template, 1, 2, undefined, 1);
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](5, "span", 4);
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵlistener"]("click", function DataTableHeaderCellComponent_Template_span_click_5_listener() {
        return ctx.onSort();
      });
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]();
    }

    if (rf & 2) {
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("ngIf", ctx.isTarget);
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("ngIf", ctx.isCheckboxable);
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("ngIf", !ctx.column.headerTemplate);
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("ngIf", ctx.column.headerTemplate);
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵclassMap"](ctx.sortClass);
    }
  },
  directives: [_angular_common__WEBPACK_IMPORTED_MODULE_5__.NgIf, _angular_common__WEBPACK_IMPORTED_MODULE_5__.NgTemplateOutlet],
  encapsulation: 2,
  changeDetection: 0
});

DataTableHeaderCellComponent.ctorParameters = function () {
  return [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.ChangeDetectorRef
  }];
};

DataTableHeaderCellComponent.propDecorators = {
  sortType: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
  }],
  sortAscendingIcon: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
  }],
  sortDescendingIcon: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
  }],
  sortUnsetIcon: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
  }],
  isTarget: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
  }],
  targetMarkerTemplate: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
  }],
  targetMarkerContext: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
  }],
  allRowsSelected: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
  }],
  selectionType: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
  }],
  column: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
  }],
  headerHeight: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.HostBinding,
    args: ['style.height.px']
  }, {
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
  }],
  sorts: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
  }],
  sort: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Output
  }],
  select: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Output
  }],
  columnContextmenu: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Output
  }],
  columnCssClasses: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.HostBinding,
    args: ['class']
  }],
  name: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.HostBinding,
    args: ['attr.title']
  }],
  minWidth: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.HostBinding,
    args: ['style.minWidth.px']
  }],
  maxWidth: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.HostBinding,
    args: ['style.maxWidth.px']
  }],
  width: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.HostBinding,
    args: ['style.width.px']
  }],
  onContextmenu: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.HostListener,
    args: ['contextmenu', ['$event']]
  }]
};

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵsetClassMetadata"](DataTableHeaderCellComponent, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Component,
    args: [{
      selector: 'datatable-header-cell',
      template: "\n    <div class=\"datatable-header-cell-template-wrap\">\n      <ng-template\n        *ngIf=\"isTarget\"\n        [ngTemplateOutlet]=\"targetMarkerTemplate\"\n        [ngTemplateOutletContext]=\"targetMarkerContext\"\n      >\n      </ng-template>\n      <label *ngIf=\"isCheckboxable\" class=\"datatable-checkbox\">\n        <input type=\"checkbox\" [checked]=\"allRowsSelected\" (change)=\"select.emit(!allRowsSelected)\" />\n      </label>\n      <span *ngIf=\"!column.headerTemplate\" class=\"datatable-header-cell-wrapper\">\n        <span class=\"datatable-header-cell-label draggable\" (click)=\"onSort()\" [innerHTML]=\"name\"> </span>\n      </span>\n      <ng-template\n        *ngIf=\"column.headerTemplate\"\n        [ngTemplateOutlet]=\"column.headerTemplate\"\n        [ngTemplateOutletContext]=\"cellContext\"\n      >\n      </ng-template>\n      <span (click)=\"onSort()\" [class]=\"sortClass\"> </span>\n    </div>\n  ",
      host: {
        class: 'datatable-header-cell'
      },
      changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_4__.ChangeDetectionStrategy.OnPush
    }]
  }], function () {
    return [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.ChangeDetectorRef
    }];
  }, {
    sort: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Output
    }],
    select: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Output
    }],
    columnContextmenu: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Output
    }],
    allRowsSelected: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
    }],
    column: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
    }],
    sorts: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
    }],
    columnCssClasses: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.HostBinding,
      args: ['class']
    }],
    name: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.HostBinding,
      args: ['attr.title']
    }],
    minWidth: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.HostBinding,
      args: ['style.minWidth.px']
    }],
    maxWidth: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.HostBinding,
      args: ['style.maxWidth.px']
    }],
    width: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.HostBinding,
      args: ['style.width.px']
    }],
    onContextmenu: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.HostListener,
      args: ['contextmenu', ['$event']]
    }],
    sortType: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
    }],
    sortAscendingIcon: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
    }],
    sortDescendingIcon: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
    }],
    sortUnsetIcon: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
    }],
    isTarget: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
    }],
    targetMarkerTemplate: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
    }],
    targetMarkerContext: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
    }],
    selectionType: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
    }],
    headerHeight: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.HostBinding,
      args: ['style.height.px']
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
    }]
  });
})();

var DataTableFooterComponent = /*#__PURE__*/function () {
  function DataTableFooterComponent() {
    (0,C_Users_SAAD_Desktop_frontend_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_2__.default)(this, DataTableFooterComponent);

    this.selectedCount = 0;
    this.page = new _angular_core__WEBPACK_IMPORTED_MODULE_4__.EventEmitter();
  }

  (0,C_Users_SAAD_Desktop_frontend_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_3__.default)(DataTableFooterComponent, [{
    key: "isVisible",
    get: function get() {
      return this.rowCount / this.pageSize > 1;
    }
  }, {
    key: "curPage",
    get: function get() {
      return this.offset + 1;
    }
  }]);

  return DataTableFooterComponent;
}();

DataTableFooterComponent.ɵfac = function DataTableFooterComponent_Factory(t) {
  return new (t || DataTableFooterComponent)();
};

DataTableFooterComponent.ɵcmp = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵdefineComponent"]({
  type: DataTableFooterComponent,
  selectors: [["datatable-footer"]],
  hostAttrs: [1, "datatable-footer"],
  inputs: {
    selectedCount: "selectedCount",
    footerHeight: "footerHeight",
    rowCount: "rowCount",
    pageSize: "pageSize",
    offset: "offset",
    pagerLeftArrowIcon: "pagerLeftArrowIcon",
    pagerRightArrowIcon: "pagerRightArrowIcon",
    pagerPreviousIcon: "pagerPreviousIcon",
    pagerNextIcon: "pagerNextIcon",
    totalMessage: "totalMessage",
    footerTemplate: "footerTemplate",
    selectedMessage: "selectedMessage"
  },
  outputs: {
    page: "page"
  },
  decls: 4,
  vars: 8,
  consts: [[1, "datatable-footer-inner", 3, "ngClass"], [4, "ngIf"], ["class", "page-count", 4, "ngIf"], [3, "pagerLeftArrowIcon", "pagerRightArrowIcon", "pagerPreviousIcon", "pagerNextIcon", "page", "size", "count", "hidden", "change", 4, "ngIf"], [3, "ngTemplateOutlet", "ngTemplateOutletContext"], [1, "page-count"], [3, "pagerLeftArrowIcon", "pagerRightArrowIcon", "pagerPreviousIcon", "pagerNextIcon", "page", "size", "count", "hidden", "change"]],
  template: function DataTableFooterComponent_Template(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](0, "div", 0);
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtemplate"](1, DataTableFooterComponent_1_Template, 1, 8, undefined, 1);
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtemplate"](2, DataTableFooterComponent_div_2_Template, 3, 3, "div", 2);
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtemplate"](3, DataTableFooterComponent_datatable_pager_3_Template, 1, 8, "datatable-pager", 3);
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]();
    }

    if (rf & 2) {
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵstyleProp"]("height", ctx.footerHeight, "px");
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("ngClass", _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵpureFunction1"](6, _c2, ctx.selectedMessage));
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("ngIf", ctx.footerTemplate);
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("ngIf", !ctx.footerTemplate);
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("ngIf", !ctx.footerTemplate);
    }
  },
  directives: function directives() {
    return [_angular_common__WEBPACK_IMPORTED_MODULE_5__.NgClass, _angular_common__WEBPACK_IMPORTED_MODULE_5__.NgIf, _angular_common__WEBPACK_IMPORTED_MODULE_5__.NgTemplateOutlet, DataTablePagerComponent];
  },
  encapsulation: 2,
  changeDetection: 0
});
DataTableFooterComponent.propDecorators = {
  footerHeight: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
  }],
  rowCount: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
  }],
  pageSize: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
  }],
  offset: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
  }],
  pagerLeftArrowIcon: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
  }],
  pagerRightArrowIcon: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
  }],
  pagerPreviousIcon: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
  }],
  pagerNextIcon: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
  }],
  totalMessage: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
  }],
  footerTemplate: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
  }],
  selectedCount: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
  }],
  selectedMessage: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
  }],
  page: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Output
  }]
};

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵsetClassMetadata"](DataTableFooterComponent, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Component,
    args: [{
      selector: 'datatable-footer',
      template: "\n    <div\n      class=\"datatable-footer-inner\"\n      [ngClass]=\"{ 'selected-count': selectedMessage }\"\n      [style.height.px]=\"footerHeight\"\n    >\n      <ng-template\n        *ngIf=\"footerTemplate\"\n        [ngTemplateOutlet]=\"footerTemplate.template\"\n        [ngTemplateOutletContext]=\"{\n          rowCount: rowCount,\n          pageSize: pageSize,\n          selectedCount: selectedCount,\n          curPage: curPage,\n          offset: offset\n        }\"\n      >\n      </ng-template>\n      <div class=\"page-count\" *ngIf=\"!footerTemplate\">\n        <span *ngIf=\"selectedMessage\"> {{ selectedCount?.toLocaleString() }} {{ selectedMessage }} / </span>\n        {{ rowCount?.toLocaleString() }} {{ totalMessage }}\n      </div>\n      <datatable-pager\n        *ngIf=\"!footerTemplate\"\n        [pagerLeftArrowIcon]=\"pagerLeftArrowIcon\"\n        [pagerRightArrowIcon]=\"pagerRightArrowIcon\"\n        [pagerPreviousIcon]=\"pagerPreviousIcon\"\n        [pagerNextIcon]=\"pagerNextIcon\"\n        [page]=\"curPage\"\n        [size]=\"pageSize\"\n        [count]=\"rowCount\"\n        [hidden]=\"!isVisible\"\n        (change)=\"page.emit($event)\"\n      >\n      </datatable-pager>\n    </div>\n  ",
      host: {
        class: 'datatable-footer'
      },
      changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_4__.ChangeDetectionStrategy.OnPush
    }]
  }], function () {
    return [];
  }, {
    selectedCount: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
    }],
    page: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Output
    }],
    footerHeight: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
    }],
    rowCount: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
    }],
    pageSize: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
    }],
    offset: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
    }],
    pagerLeftArrowIcon: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
    }],
    pagerRightArrowIcon: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
    }],
    pagerPreviousIcon: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
    }],
    pagerNextIcon: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
    }],
    totalMessage: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
    }],
    footerTemplate: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
    }],
    selectedMessage: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
    }]
  });
})();

var DataTablePagerComponent = /*#__PURE__*/function () {
  function DataTablePagerComponent() {
    (0,C_Users_SAAD_Desktop_frontend_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_2__.default)(this, DataTablePagerComponent);

    this.change = new _angular_core__WEBPACK_IMPORTED_MODULE_4__.EventEmitter();
    this._count = 0;
    this._page = 1;
    this._size = 0;
  }

  (0,C_Users_SAAD_Desktop_frontend_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_3__.default)(DataTablePagerComponent, [{
    key: "size",
    get: function get() {
      return this._size;
    },
    set: function set(val) {
      this._size = val;
      this.pages = this.calcPages();
    }
  }, {
    key: "count",
    get: function get() {
      return this._count;
    },
    set: function set(val) {
      this._count = val;
      this.pages = this.calcPages();
    }
  }, {
    key: "page",
    get: function get() {
      return this._page;
    },
    set: function set(val) {
      this._page = val;
      this.pages = this.calcPages();
    }
  }, {
    key: "totalPages",
    get: function get() {
      var count = this.size < 1 ? 1 : Math.ceil(this.count / this.size);
      return Math.max(count || 0, 1);
    }
  }, {
    key: "canPrevious",
    value: function canPrevious() {
      return this.page > 1;
    }
  }, {
    key: "canNext",
    value: function canNext() {
      return this.page < this.totalPages;
    }
  }, {
    key: "prevPage",
    value: function prevPage() {
      this.selectPage(this.page - 1);
    }
  }, {
    key: "nextPage",
    value: function nextPage() {
      this.selectPage(this.page + 1);
    }
  }, {
    key: "selectPage",
    value: function selectPage(page) {
      if (page > 0 && page <= this.totalPages && page !== this.page) {
        this.page = page;
        this.change.emit({
          page: page
        });
      }
    }
  }, {
    key: "calcPages",
    value: function calcPages(page) {
      var pages = [];
      var startPage = 1;
      var endPage = this.totalPages;
      var maxSize = 5;
      var isMaxSized = maxSize < this.totalPages;
      page = page || this.page;

      if (isMaxSized) {
        startPage = page - Math.floor(maxSize / 2);
        endPage = page + Math.floor(maxSize / 2);

        if (startPage < 1) {
          startPage = 1;
          endPage = Math.min(startPage + maxSize - 1, this.totalPages);
        } else if (endPage > this.totalPages) {
          startPage = Math.max(this.totalPages - maxSize + 1, 1);
          endPage = this.totalPages;
        }
      }

      for (var num = startPage; num <= endPage; num++) {
        pages.push({
          number: num,
          text: num
        });
      }

      return pages;
    }
  }]);

  return DataTablePagerComponent;
}();

DataTablePagerComponent.ɵfac = function DataTablePagerComponent_Factory(t) {
  return new (t || DataTablePagerComponent)();
};

DataTablePagerComponent.ɵcmp = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵdefineComponent"]({
  type: DataTablePagerComponent,
  selectors: [["datatable-pager"]],
  hostAttrs: [1, "datatable-pager"],
  inputs: {
    size: "size",
    count: "count",
    page: "page",
    pagerLeftArrowIcon: "pagerLeftArrowIcon",
    pagerRightArrowIcon: "pagerRightArrowIcon",
    pagerPreviousIcon: "pagerPreviousIcon",
    pagerNextIcon: "pagerNextIcon"
  },
  outputs: {
    change: "change"
  },
  decls: 14,
  vars: 21,
  consts: [[1, "pager"], ["role", "button", "aria-label", "go to first page", "href", "javascript:void(0)", 3, "click"], ["role", "button", "aria-label", "go to previous page", "href", "javascript:void(0)", 3, "click"], ["role", "button", "class", "pages", 3, "active", 4, "ngFor", "ngForOf"], ["role", "button", "aria-label", "go to next page", "href", "javascript:void(0)", 3, "click"], ["role", "button", "aria-label", "go to last page", "href", "javascript:void(0)", 3, "click"], ["role", "button", 1, "pages"], ["href", "javascript:void(0)", 3, "click"]],
  template: function DataTablePagerComponent_Template(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](0, "ul", 0);
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](1, "li");
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](2, "a", 1);
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵlistener"]("click", function DataTablePagerComponent_Template_a_click_2_listener() {
        return ctx.selectPage(1);
      });
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelement"](3, "i");
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](4, "li");
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](5, "a", 2);
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵlistener"]("click", function DataTablePagerComponent_Template_a_click_5_listener() {
        return ctx.prevPage();
      });
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelement"](6, "i");
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtemplate"](7, DataTablePagerComponent_li_7_Template, 3, 4, "li", 3);
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](8, "li");
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](9, "a", 4);
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵlistener"]("click", function DataTablePagerComponent_Template_a_click_9_listener() {
        return ctx.nextPage();
      });
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelement"](10, "i");
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](11, "li");
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](12, "a", 5);
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵlistener"]("click", function DataTablePagerComponent_Template_a_click_12_listener() {
        return ctx.selectPage(ctx.totalPages);
      });
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelement"](13, "i");
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]();
    }

    if (rf & 2) {
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵclassProp"]("disabled", !ctx.canPrevious());
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"](2);
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵclassMap"](ctx.pagerPreviousIcon);
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵclassProp"]("disabled", !ctx.canPrevious());
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"](2);
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵclassMap"](ctx.pagerLeftArrowIcon);
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("ngForOf", ctx.pages);
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵclassProp"]("disabled", !ctx.canNext());
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"](2);
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵclassMap"](ctx.pagerRightArrowIcon);
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵclassProp"]("disabled", !ctx.canNext());
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"](2);
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵclassMap"](ctx.pagerNextIcon);
    }
  },
  directives: [_angular_common__WEBPACK_IMPORTED_MODULE_5__.NgForOf],
  encapsulation: 2,
  changeDetection: 0
});
DataTablePagerComponent.propDecorators = {
  pagerLeftArrowIcon: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
  }],
  pagerRightArrowIcon: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
  }],
  pagerPreviousIcon: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
  }],
  pagerNextIcon: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
  }],
  size: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
  }],
  count: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
  }],
  page: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
  }],
  change: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Output
  }]
};

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵsetClassMetadata"](DataTablePagerComponent, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Component,
    args: [{
      selector: 'datatable-pager',
      template: "\n    <ul class=\"pager\">\n      <li [class.disabled]=\"!canPrevious()\">\n        <a role=\"button\" aria-label=\"go to first page\" href=\"javascript:void(0)\" (click)=\"selectPage(1)\">\n          <i class=\"{{ pagerPreviousIcon }}\"></i>\n        </a>\n      </li>\n      <li [class.disabled]=\"!canPrevious()\">\n        <a role=\"button\" aria-label=\"go to previous page\" href=\"javascript:void(0)\" (click)=\"prevPage()\">\n          <i class=\"{{ pagerLeftArrowIcon }}\"></i>\n        </a>\n      </li>\n      <li\n        role=\"button\"\n        [attr.aria-label]=\"'page ' + pg.number\"\n        class=\"pages\"\n        *ngFor=\"let pg of pages\"\n        [class.active]=\"pg.number === page\"\n      >\n        <a href=\"javascript:void(0)\" (click)=\"selectPage(pg.number)\">\n          {{ pg.text }}\n        </a>\n      </li>\n      <li [class.disabled]=\"!canNext()\">\n        <a role=\"button\" aria-label=\"go to next page\" href=\"javascript:void(0)\" (click)=\"nextPage()\">\n          <i class=\"{{ pagerRightArrowIcon }}\"></i>\n        </a>\n      </li>\n      <li [class.disabled]=\"!canNext()\">\n        <a role=\"button\" aria-label=\"go to last page\" href=\"javascript:void(0)\" (click)=\"selectPage(totalPages)\">\n          <i class=\"{{ pagerNextIcon }}\"></i>\n        </a>\n      </li>\n    </ul>\n  ",
      host: {
        class: 'datatable-pager'
      },
      changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_4__.ChangeDetectionStrategy.OnPush
    }]
  }], function () {
    return [];
  }, {
    change: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Output
    }],
    size: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
    }],
    count: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
    }],
    page: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
    }],
    pagerLeftArrowIcon: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
    }],
    pagerRightArrowIcon: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
    }],
    pagerPreviousIcon: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
    }],
    pagerNextIcon: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
    }]
  });
})();

var ProgressBarComponent = function ProgressBarComponent() {
  (0,C_Users_SAAD_Desktop_frontend_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_2__.default)(this, ProgressBarComponent);
};

ProgressBarComponent.ɵfac = function ProgressBarComponent_Factory(t) {
  return new (t || ProgressBarComponent)();
};

ProgressBarComponent.ɵcmp = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵdefineComponent"]({
  type: ProgressBarComponent,
  selectors: [["datatable-progress"]],
  decls: 3,
  vars: 0,
  consts: [["role", "progressbar", 1, "progress-linear"], [1, "container"], [1, "bar"]],
  template: function ProgressBarComponent_Template(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](0, "div", 0);
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](1, "div", 1);
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelement"](2, "div", 2);
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]();
    }
  },
  encapsulation: 2,
  changeDetection: 0
});

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵsetClassMetadata"](ProgressBarComponent, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Component,
    args: [{
      selector: 'datatable-progress',
      template: "\n    <div class=\"progress-linear\" role=\"progressbar\">\n      <div class=\"container\">\n        <div class=\"bar\"></div>\n      </div>\n    </div>\n  ",
      changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_4__.ChangeDetectionStrategy.OnPush
    }]
  }], null, null);
})();

var Keys;

(function (Keys) {
  Keys[Keys["up"] = 38] = "up";
  Keys[Keys["down"] = 40] = "down";
  Keys[Keys["return"] = 13] = "return";
  Keys[Keys["escape"] = 27] = "escape";
  Keys[Keys["left"] = 37] = "left";
  Keys[Keys["right"] = 39] = "right";
})(Keys || (Keys = {}));

var DataTableBodyRowComponent = /*#__PURE__*/function () {
  function DataTableBodyRowComponent(differs, scrollbarHelper, cd, element) {
    (0,C_Users_SAAD_Desktop_frontend_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_2__.default)(this, DataTableBodyRowComponent);

    this.differs = differs;
    this.scrollbarHelper = scrollbarHelper;
    this.cd = cd;
    this.treeStatus = 'collapsed';
    this.activate = new _angular_core__WEBPACK_IMPORTED_MODULE_4__.EventEmitter();
    this.treeAction = new _angular_core__WEBPACK_IMPORTED_MODULE_4__.EventEmitter();
    this._groupStyles = {
      left: {},
      center: {},
      right: {}
    };
    this._element = element.nativeElement;
    this._rowDiffer = differs.find({}).create();
  }

  (0,C_Users_SAAD_Desktop_frontend_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_3__.default)(DataTableBodyRowComponent, [{
    key: "columns",
    get: function get() {
      return this._columns;
    },
    set: function set(val) {
      this._columns = val;
      this.recalculateColumns(val);
      this.buildStylesByGroup();
    }
  }, {
    key: "innerWidth",
    get: function get() {
      return this._innerWidth;
    },
    set: function set(val) {
      if (this._columns) {
        var colByPin = columnsByPin(this._columns);
        this._columnGroupWidths = columnGroupWidths(colByPin, this._columns);
      }

      this._innerWidth = val;
      this.recalculateColumns();
      this.buildStylesByGroup();
    }
  }, {
    key: "offsetX",
    get: function get() {
      return this._offsetX;
    },
    set: function set(val) {
      this._offsetX = val;
      this.buildStylesByGroup();
    }
  }, {
    key: "cssClass",
    get: function get() {
      var cls = 'datatable-body-row';

      if (this.isSelected) {
        cls += ' active';
      }

      if (this.rowIndex % 2 !== 0) {
        cls += ' datatable-row-odd';
      }

      if (this.rowIndex % 2 === 0) {
        cls += ' datatable-row-even';
      }

      if (this.rowClass) {
        var res = this.rowClass(this.row);

        if (typeof res === 'string') {
          cls += " ".concat(res);
        } else if (typeof res === 'object') {
          var keys = Object.keys(res);

          for (var _i5 = 0, _keys2 = keys; _i5 < _keys2.length; _i5++) {
            var k = _keys2[_i5];

            if (res[k] === true) {
              cls += " ".concat(k);
            }
          }
        }
      }

      return cls;
    }
  }, {
    key: "columnsTotalWidths",
    get: function get() {
      return this._columnGroupWidths.total;
    }
  }, {
    key: "ngDoCheck",
    value: function ngDoCheck() {
      if (this._rowDiffer.diff(this.row)) {
        this.cd.markForCheck();
      }
    }
  }, {
    key: "trackByGroups",
    value: function trackByGroups(index, colGroup) {
      return colGroup.type;
    }
  }, {
    key: "columnTrackingFn",
    value: function columnTrackingFn(index, column) {
      return column.$$id;
    }
  }, {
    key: "buildStylesByGroup",
    value: function buildStylesByGroup() {
      this._groupStyles.left = this.calcStylesByGroup('left');
      this._groupStyles.center = this.calcStylesByGroup('center');
      this._groupStyles.right = this.calcStylesByGroup('right');
      this.cd.markForCheck();
    }
  }, {
    key: "calcStylesByGroup",
    value: function calcStylesByGroup(group) {
      var widths = this._columnGroupWidths;
      var offsetX = this.offsetX;
      var styles = {
        width: "".concat(widths[group], "px")
      };

      if (group === 'left') {
        translateXY(styles, offsetX, 0);
      } else if (group === 'right') {
        var bodyWidth = parseInt(this.innerWidth + '', 0);
        var totalDiff = widths.total - bodyWidth;
        var offsetDiff = totalDiff - offsetX;
        var offset = (offsetDiff + this.scrollbarHelper.width) * -1;
        translateXY(styles, offset, 0);
      }

      return styles;
    }
  }, {
    key: "onActivate",
    value: function onActivate(event, index) {
      event.cellIndex = index;
      event.rowElement = this._element;
      this.activate.emit(event);
    }
  }, {
    key: "onKeyDown",
    value: function onKeyDown(event) {
      var keyCode = event.keyCode;
      var isTargetRow = event.target === this._element;
      var isAction = keyCode === Keys.return || keyCode === Keys.down || keyCode === Keys.up || keyCode === Keys.left || keyCode === Keys.right;

      if (isAction && isTargetRow) {
        event.preventDefault();
        event.stopPropagation();
        this.activate.emit({
          type: 'keydown',
          event: event,
          row: this.row,
          rowElement: this._element
        });
      }
    }
  }, {
    key: "onMouseenter",
    value: function onMouseenter(event) {
      this.activate.emit({
        type: 'mouseenter',
        event: event,
        row: this.row,
        rowElement: this._element
      });
    }
  }, {
    key: "recalculateColumns",
    value: function recalculateColumns() {
      var val = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.columns;
      this._columns = val;
      var colsByPin = columnsByPin(this._columns);
      this._columnsByPin = columnsByPinArr(this._columns);
      this._columnGroupWidths = columnGroupWidths(colsByPin, this._columns);
    }
  }, {
    key: "onTreeAction",
    value: function onTreeAction() {
      this.treeAction.emit();
    }
  }]);

  return DataTableBodyRowComponent;
}();

DataTableBodyRowComponent.ɵfac = function DataTableBodyRowComponent_Factory(t) {
  return new (t || DataTableBodyRowComponent)(_angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_4__.KeyValueDiffers), _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵdirectiveInject"](ScrollbarHelper, 4), _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_4__.ChangeDetectorRef), _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_4__.ElementRef));
};

DataTableBodyRowComponent.ɵcmp = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵdefineComponent"]({
  type: DataTableBodyRowComponent,
  selectors: [["datatable-body-row"]],
  hostVars: 6,
  hostBindings: function DataTableBodyRowComponent_HostBindings(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵlistener"]("keydown", function DataTableBodyRowComponent_keydown_HostBindingHandler($event) {
        return ctx.onKeyDown($event);
      })("mouseenter", function DataTableBodyRowComponent_mouseenter_HostBindingHandler($event) {
        return ctx.onMouseenter($event);
      });
    }

    if (rf & 2) {
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵclassMap"](ctx.cssClass);
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵstyleProp"]("width", ctx.columnsTotalWidths, "px")("height", ctx.rowHeight, "px");
    }
  },
  inputs: {
    treeStatus: "treeStatus",
    columns: "columns",
    innerWidth: "innerWidth",
    offsetX: "offsetX",
    expanded: "expanded",
    rowClass: "rowClass",
    row: "row",
    group: "group",
    isSelected: "isSelected",
    rowIndex: "rowIndex",
    displayCheck: "displayCheck",
    rowHeight: "rowHeight"
  },
  outputs: {
    activate: "activate",
    treeAction: "treeAction"
  },
  decls: 1,
  vars: 2,
  consts: [[3, "class", "ngStyle", 4, "ngFor", "ngForOf", "ngForTrackBy"], [3, "ngStyle"], ["tabindex", "-1", 3, "row", "group", "expanded", "isSelected", "rowIndex", "column", "rowHeight", "displayCheck", "treeStatus", "activate", "treeAction", 4, "ngFor", "ngForOf", "ngForTrackBy"], ["tabindex", "-1", 3, "row", "group", "expanded", "isSelected", "rowIndex", "column", "rowHeight", "displayCheck", "treeStatus", "activate", "treeAction"]],
  template: function DataTableBodyRowComponent_Template(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtemplate"](0, DataTableBodyRowComponent_div_0_Template, 2, 6, "div", 0);
    }

    if (rf & 2) {
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("ngForOf", ctx._columnsByPin)("ngForTrackBy", ctx.trackByGroups);
    }
  },
  directives: function directives() {
    return [_angular_common__WEBPACK_IMPORTED_MODULE_5__.NgForOf, _angular_common__WEBPACK_IMPORTED_MODULE_5__.NgStyle, DataTableBodyCellComponent];
  },
  encapsulation: 2,
  changeDetection: 0
});

DataTableBodyRowComponent.ctorParameters = function () {
  return [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.KeyValueDiffers
  }, {
    type: ScrollbarHelper,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.SkipSelf
    }]
  }, {
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.ChangeDetectorRef
  }, {
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.ElementRef
  }];
};

DataTableBodyRowComponent.propDecorators = {
  columns: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
  }],
  innerWidth: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
  }],
  expanded: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
  }],
  rowClass: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
  }],
  row: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
  }],
  group: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
  }],
  isSelected: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
  }],
  rowIndex: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
  }],
  displayCheck: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
  }],
  treeStatus: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
  }],
  offsetX: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
  }],
  cssClass: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.HostBinding,
    args: ['class']
  }],
  rowHeight: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.HostBinding,
    args: ['style.height.px']
  }, {
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
  }],
  columnsTotalWidths: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.HostBinding,
    args: ['style.width.px']
  }],
  activate: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Output
  }],
  treeAction: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Output
  }],
  onKeyDown: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.HostListener,
    args: ['keydown', ['$event']]
  }],
  onMouseenter: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.HostListener,
    args: ['mouseenter', ['$event']]
  }]
};

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵsetClassMetadata"](DataTableBodyRowComponent, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Component,
    args: [{
      selector: 'datatable-body-row',
      changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_4__.ChangeDetectionStrategy.OnPush,
      template: "\n    <div\n      *ngFor=\"let colGroup of _columnsByPin; let i = index; trackBy: trackByGroups\"\n      class=\"datatable-row-{{ colGroup.type }} datatable-row-group\"\n      [ngStyle]=\"_groupStyles[colGroup.type]\"\n    >\n      <datatable-body-cell\n        *ngFor=\"let column of colGroup.columns; let ii = index; trackBy: columnTrackingFn\"\n        tabindex=\"-1\"\n        [row]=\"row\"\n        [group]=\"group\"\n        [expanded]=\"expanded\"\n        [isSelected]=\"isSelected\"\n        [rowIndex]=\"rowIndex\"\n        [column]=\"column\"\n        [rowHeight]=\"rowHeight\"\n        [displayCheck]=\"displayCheck\"\n        [treeStatus]=\"treeStatus\"\n        (activate)=\"onActivate($event, ii)\"\n        (treeAction)=\"onTreeAction()\"\n      >\n      </datatable-body-cell>\n    </div>\n  "
    }]
  }], function () {
    return [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.KeyValueDiffers
    }, {
      type: ScrollbarHelper,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.SkipSelf
      }]
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.ChangeDetectorRef
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.ElementRef
    }];
  }, {
    treeStatus: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
    }],
    activate: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Output
    }],
    treeAction: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Output
    }],
    columns: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
    }],
    innerWidth: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
    }],
    offsetX: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
    }],
    cssClass: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.HostBinding,
      args: ['class']
    }],
    columnsTotalWidths: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.HostBinding,
      args: ['style.width.px']
    }],
    onKeyDown: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.HostListener,
      args: ['keydown', ['$event']]
    }],
    onMouseenter: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.HostListener,
      args: ['mouseenter', ['$event']]
    }],
    expanded: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
    }],
    rowClass: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
    }],
    row: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
    }],
    group: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
    }],
    isSelected: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
    }],
    rowIndex: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
    }],
    displayCheck: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
    }],
    rowHeight: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.HostBinding,
      args: ['style.height.px']
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
    }]
  });
})();

var DataTableRowWrapperComponent = /*#__PURE__*/function () {
  function DataTableRowWrapperComponent(cd, differs) {
    (0,C_Users_SAAD_Desktop_frontend_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_2__.default)(this, DataTableRowWrapperComponent);

    this.cd = cd;
    this.differs = differs;
    this.rowContextmenu = new _angular_core__WEBPACK_IMPORTED_MODULE_4__.EventEmitter(false);
    this._expanded = false;
    this.groupContext = {
      group: this.row,
      expanded: this.expanded,
      rowIndex: this.rowIndex
    };
    this.rowContext = {
      row: this.row,
      expanded: this.expanded,
      rowIndex: this.rowIndex
    };
    this.rowDiffer = differs.find({}).create();
  }

  (0,C_Users_SAAD_Desktop_frontend_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_3__.default)(DataTableRowWrapperComponent, [{
    key: "rowIndex",
    get: function get() {
      return this._rowIndex;
    },
    set: function set(val) {
      this._rowIndex = val;
      this.rowContext.rowIndex = val;
      this.groupContext.rowIndex = val;
      this.cd.markForCheck();
    }
  }, {
    key: "expanded",
    get: function get() {
      return this._expanded;
    },
    set: function set(val) {
      this._expanded = val;
      this.groupContext.expanded = val;
      this.rowContext.expanded = val;
      this.cd.markForCheck();
    }
  }, {
    key: "ngDoCheck",
    value: function ngDoCheck() {
      if (this.rowDiffer.diff(this.row)) {
        this.rowContext.row = this.row;
        this.groupContext.group = this.row;
        this.cd.markForCheck();
      }
    }
  }, {
    key: "onContextmenu",
    value: function onContextmenu($event) {
      this.rowContextmenu.emit({
        event: $event,
        row: this.row
      });
    }
  }, {
    key: "getGroupHeaderStyle",
    value: function getGroupHeaderStyle() {
      var styles = {};
      styles['transform'] = 'translate3d(' + this.offsetX + 'px, 0px, 0px)';
      styles['backface-visibility'] = 'hidden';
      styles['width'] = this.innerWidth;
      return styles;
    }
  }]);

  return DataTableRowWrapperComponent;
}();

DataTableRowWrapperComponent.ɵfac = function DataTableRowWrapperComponent_Factory(t) {
  return new (t || DataTableRowWrapperComponent)(_angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_4__.ChangeDetectorRef), _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_4__.KeyValueDiffers));
};

DataTableRowWrapperComponent.ɵcmp = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵdefineComponent"]({
  type: DataTableRowWrapperComponent,
  selectors: [["datatable-row-wrapper"]],
  hostAttrs: [1, "datatable-row-wrapper"],
  hostBindings: function DataTableRowWrapperComponent_HostBindings(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵlistener"]("contextmenu", function DataTableRowWrapperComponent_contextmenu_HostBindingHandler($event) {
        return ctx.onContextmenu($event);
      });
    }
  },
  inputs: {
    rowIndex: "rowIndex",
    expanded: "expanded",
    innerWidth: "innerWidth",
    rowDetail: "rowDetail",
    groupHeader: "groupHeader",
    offsetX: "offsetX",
    detailRowHeight: "detailRowHeight",
    row: "row",
    groupedRows: "groupedRows"
  },
  outputs: {
    rowContextmenu: "rowContextmenu"
  },
  ngContentSelectors: _c0,
  decls: 3,
  vars: 3,
  consts: [["class", "datatable-group-header", 3, "ngStyle", 4, "ngIf"], [4, "ngIf"], ["class", "datatable-row-detail", 3, "height", 4, "ngIf"], [1, "datatable-group-header", 3, "ngStyle"], [3, "ngTemplateOutlet", "ngTemplateOutletContext"], [1, "datatable-row-detail"]],
  template: function DataTableRowWrapperComponent_Template(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵprojectionDef"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtemplate"](0, DataTableRowWrapperComponent_div_0_Template, 2, 2, "div", 0);
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtemplate"](1, DataTableRowWrapperComponent_ng_content_1_Template, 1, 0, "ng-content", 1);
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtemplate"](2, DataTableRowWrapperComponent_div_2_Template, 2, 3, "div", 2);
    }

    if (rf & 2) {
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("ngIf", ctx.groupHeader && ctx.groupHeader.template);
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("ngIf", ctx.groupHeader && ctx.groupHeader.template && ctx.expanded || !ctx.groupHeader || !ctx.groupHeader.template);
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("ngIf", ctx.rowDetail && ctx.rowDetail.template && ctx.expanded);
    }
  },
  directives: [_angular_common__WEBPACK_IMPORTED_MODULE_5__.NgIf, _angular_common__WEBPACK_IMPORTED_MODULE_5__.NgStyle, _angular_common__WEBPACK_IMPORTED_MODULE_5__.NgTemplateOutlet],
  encapsulation: 2,
  changeDetection: 0
});

DataTableRowWrapperComponent.ctorParameters = function () {
  return [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.ChangeDetectorRef
  }, {
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.KeyValueDiffers
  }];
};

DataTableRowWrapperComponent.propDecorators = {
  innerWidth: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
  }],
  rowDetail: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
  }],
  groupHeader: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
  }],
  offsetX: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
  }],
  detailRowHeight: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
  }],
  row: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
  }],
  groupedRows: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
  }],
  rowContextmenu: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Output
  }],
  rowIndex: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
  }],
  expanded: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
  }],
  onContextmenu: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.HostListener,
    args: ['contextmenu', ['$event']]
  }]
};

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵsetClassMetadata"](DataTableRowWrapperComponent, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Component,
    args: [{
      selector: 'datatable-row-wrapper',
      changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_4__.ChangeDetectionStrategy.OnPush,
      template: "\n    <div *ngIf=\"groupHeader && groupHeader.template\" class=\"datatable-group-header\" [ngStyle]=\"getGroupHeaderStyle()\">\n      <ng-template\n        *ngIf=\"groupHeader && groupHeader.template\"\n        [ngTemplateOutlet]=\"groupHeader.template\"\n        [ngTemplateOutletContext]=\"groupContext\"\n      >\n      </ng-template>\n    </div>\n    <ng-content *ngIf=\"(groupHeader && groupHeader.template && expanded) || !groupHeader || !groupHeader.template\">\n    </ng-content>\n    <div\n      *ngIf=\"rowDetail && rowDetail.template && expanded\"\n      [style.height.px]=\"detailRowHeight\"\n      class=\"datatable-row-detail\"\n    >\n      <ng-template\n        *ngIf=\"rowDetail && rowDetail.template\"\n        [ngTemplateOutlet]=\"rowDetail.template\"\n        [ngTemplateOutletContext]=\"rowContext\"\n      >\n      </ng-template>\n    </div>\n  ",
      host: {
        class: 'datatable-row-wrapper'
      }
    }]
  }], function () {
    return [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.ChangeDetectorRef
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.KeyValueDiffers
    }];
  }, {
    rowContextmenu: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Output
    }],
    rowIndex: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
    }],
    expanded: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
    }],
    onContextmenu: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.HostListener,
      args: ['contextmenu', ['$event']]
    }],
    innerWidth: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
    }],
    rowDetail: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
    }],
    groupHeader: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
    }],
    offsetX: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
    }],
    detailRowHeight: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
    }],
    row: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
    }],
    groupedRows: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
    }]
  });
})();

var DataTableBodyCellComponent = /*#__PURE__*/function () {
  function DataTableBodyCellComponent(element, cd) {
    (0,C_Users_SAAD_Desktop_frontend_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_2__.default)(this, DataTableBodyCellComponent);

    this.cd = cd;
    this.activate = new _angular_core__WEBPACK_IMPORTED_MODULE_4__.EventEmitter();
    this.treeAction = new _angular_core__WEBPACK_IMPORTED_MODULE_4__.EventEmitter();
    this.isFocused = false;
    this.onCheckboxChangeFn = this.onCheckboxChange.bind(this);
    this.activateFn = this.activate.emit.bind(this.activate);
    this.cellContext = {
      onCheckboxChangeFn: this.onCheckboxChangeFn,
      activateFn: this.activateFn,
      row: this.row,
      group: this.group,
      value: this.value,
      column: this.column,
      rowHeight: this.rowHeight,
      isSelected: this.isSelected,
      rowIndex: this.rowIndex,
      treeStatus: this.treeStatus,
      onTreeAction: this.onTreeAction.bind(this)
    };
    this._element = element.nativeElement;
  }

  (0,C_Users_SAAD_Desktop_frontend_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_3__.default)(DataTableBodyCellComponent, [{
    key: "group",
    get: function get() {
      return this._group;
    },
    set: function set(group) {
      this._group = group;
      this.cellContext.group = group;
      this.checkValueUpdates();
      this.cd.markForCheck();
    }
  }, {
    key: "rowHeight",
    get: function get() {
      return this._rowHeight;
    },
    set: function set(val) {
      this._rowHeight = val;
      this.cellContext.rowHeight = val;
      this.checkValueUpdates();
      this.cd.markForCheck();
    }
  }, {
    key: "isSelected",
    get: function get() {
      return this._isSelected;
    },
    set: function set(val) {
      this._isSelected = val;
      this.cellContext.isSelected = val;
      this.cd.markForCheck();
    }
  }, {
    key: "expanded",
    get: function get() {
      return this._expanded;
    },
    set: function set(val) {
      this._expanded = val;
      this.cellContext.expanded = val;
      this.cd.markForCheck();
    }
  }, {
    key: "rowIndex",
    get: function get() {
      return this._rowIndex;
    },
    set: function set(val) {
      this._rowIndex = val;
      this.cellContext.rowIndex = val;
      this.checkValueUpdates();
      this.cd.markForCheck();
    }
  }, {
    key: "column",
    get: function get() {
      return this._column;
    },
    set: function set(column) {
      this._column = column;
      this.cellContext.column = column;
      this.checkValueUpdates();
      this.cd.markForCheck();
    }
  }, {
    key: "row",
    get: function get() {
      return this._row;
    },
    set: function set(row) {
      this._row = row;
      this.cellContext.row = row;
      this.checkValueUpdates();
      this.cd.markForCheck();
    }
  }, {
    key: "sorts",
    get: function get() {
      return this._sorts;
    },
    set: function set(val) {
      this._sorts = val;
      this.calcSortDir = this.calcSortDir(val);
    }
  }, {
    key: "treeStatus",
    get: function get() {
      return this._treeStatus;
    },
    set: function set(status) {
      if (status !== 'collapsed' && status !== 'expanded' && status !== 'loading' && status !== 'disabled') {
        this._treeStatus = 'collapsed';
      } else {
        this._treeStatus = status;
      }

      this.cellContext.treeStatus = this._treeStatus;
      this.checkValueUpdates();
      this.cd.markForCheck();
    }
  }, {
    key: "columnCssClasses",
    get: function get() {
      var cls = 'datatable-body-cell';

      if (this.column.cellClass) {
        if (typeof this.column.cellClass === 'string') {
          cls += ' ' + this.column.cellClass;
        } else if (typeof this.column.cellClass === 'function') {
          var res = this.column.cellClass({
            row: this.row,
            group: this.group,
            column: this.column,
            value: this.value,
            rowHeight: this.rowHeight
          });

          if (typeof res === 'string') {
            cls += ' ' + res;
          } else if (typeof res === 'object') {
            var keys = Object.keys(res);

            for (var _i6 = 0, _keys3 = keys; _i6 < _keys3.length; _i6++) {
              var k = _keys3[_i6];

              if (res[k] === true) {
                cls += " ".concat(k);
              }
            }
          }
        }
      }

      if (!this.sortDir) {
        cls += ' sort-active';
      }

      if (this.isFocused) {
        cls += ' active';
      }

      if (this.sortDir === SortDirection.asc) {
        cls += ' sort-asc';
      }

      if (this.sortDir === SortDirection.desc) {
        cls += ' sort-desc';
      }

      return cls;
    }
  }, {
    key: "width",
    get: function get() {
      return this.column.width;
    }
  }, {
    key: "minWidth",
    get: function get() {
      return this.column.minWidth;
    }
  }, {
    key: "maxWidth",
    get: function get() {
      return this.column.maxWidth;
    }
  }, {
    key: "height",
    get: function get() {
      var height = this.rowHeight;

      if (isNaN(height)) {
        return height;
      }

      return height + 'px';
    }
  }, {
    key: "ngDoCheck",
    value: function ngDoCheck() {
      this.checkValueUpdates();
    }
  }, {
    key: "ngOnDestroy",
    value: function ngOnDestroy() {
      if (this.cellTemplate) {
        this.cellTemplate.clear();
      }
    }
  }, {
    key: "checkValueUpdates",
    value: function checkValueUpdates() {
      var value = '';

      if (!this.row || !this.column) {
        value = '';
      } else {
        var val = this.column.$$valueGetter(this.row, this.column.prop);
        var userPipe = this.column.pipe;

        if (userPipe) {
          value = userPipe.transform(val);
        } else if (value !== undefined) {
          value = val;
        }
      }

      if (this.value !== value) {
        this.value = value;
        this.cellContext.value = value;
        this.sanitizedValue = value !== null && value !== undefined ? this.stripHtml(value) : value;
        this.cd.markForCheck();
      }
    }
  }, {
    key: "onFocus",
    value: function onFocus() {
      this.isFocused = true;
    }
  }, {
    key: "onBlur",
    value: function onBlur() {
      this.isFocused = false;
    }
  }, {
    key: "onClick",
    value: function onClick(event) {
      this.activate.emit({
        type: 'click',
        event: event,
        row: this.row,
        group: this.group,
        rowHeight: this.rowHeight,
        column: this.column,
        value: this.value,
        cellElement: this._element
      });
    }
  }, {
    key: "onDblClick",
    value: function onDblClick(event) {
      this.activate.emit({
        type: 'dblclick',
        event: event,
        row: this.row,
        group: this.group,
        rowHeight: this.rowHeight,
        column: this.column,
        value: this.value,
        cellElement: this._element
      });
    }
  }, {
    key: "onKeyDown",
    value: function onKeyDown(event) {
      var keyCode = event.keyCode;
      var isTargetCell = event.target === this._element;
      var isAction = keyCode === Keys.return || keyCode === Keys.down || keyCode === Keys.up || keyCode === Keys.left || keyCode === Keys.right;

      if (isAction && isTargetCell) {
        event.preventDefault();
        event.stopPropagation();
        this.activate.emit({
          type: 'keydown',
          event: event,
          row: this.row,
          group: this.group,
          rowHeight: this.rowHeight,
          column: this.column,
          value: this.value,
          cellElement: this._element
        });
      }
    }
  }, {
    key: "onCheckboxChange",
    value: function onCheckboxChange(event) {
      this.activate.emit({
        type: 'checkbox',
        event: event,
        row: this.row,
        group: this.group,
        rowHeight: this.rowHeight,
        column: this.column,
        value: this.value,
        cellElement: this._element,
        treeStatus: 'collapsed'
      });
    }
  }, {
    key: "calcSortDir",
    value: function calcSortDir(sorts) {
      var _this24 = this;

      if (!sorts) {
        return;
      }

      var sort = sorts.find(function (s) {
        return s.prop === _this24.column.prop;
      });

      if (sort) {
        return sort.dir;
      }
    }
  }, {
    key: "stripHtml",
    value: function stripHtml(html) {
      if (!html.replace) {
        return html;
      }

      return html.replace(/<\/?[^>]+(>|$)/g, '');
    }
  }, {
    key: "onTreeAction",
    value: function onTreeAction() {
      this.treeAction.emit(this.row);
    }
  }, {
    key: "calcLeftMargin",
    value: function calcLeftMargin(column, row) {
      var levelIndent = column.treeLevelIndent != null ? column.treeLevelIndent : 50;
      return column.isTreeColumn ? row.level * levelIndent : 0;
    }
  }]);

  return DataTableBodyCellComponent;
}();

DataTableBodyCellComponent.ɵfac = function DataTableBodyCellComponent_Factory(t) {
  return new (t || DataTableBodyCellComponent)(_angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_4__.ElementRef), _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_4__.ChangeDetectorRef));
};

DataTableBodyCellComponent.ɵcmp = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵdefineComponent"]({
  type: DataTableBodyCellComponent,
  selectors: [["datatable-body-cell"]],
  viewQuery: function DataTableBodyCellComponent_Query(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵviewQuery"](_c3, 7, _angular_core__WEBPACK_IMPORTED_MODULE_4__.ViewContainerRef);
    }

    if (rf & 2) {
      var _t;

      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵloadQuery"]()) && (ctx.cellTemplate = _t.first);
    }
  },
  hostVars: 10,
  hostBindings: function DataTableBodyCellComponent_HostBindings(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵlistener"]("focus", function DataTableBodyCellComponent_focus_HostBindingHandler() {
        return ctx.onFocus();
      })("blur", function DataTableBodyCellComponent_blur_HostBindingHandler() {
        return ctx.onBlur();
      })("click", function DataTableBodyCellComponent_click_HostBindingHandler($event) {
        return ctx.onClick($event);
      })("dblclick", function DataTableBodyCellComponent_dblclick_HostBindingHandler($event) {
        return ctx.onDblClick($event);
      })("keydown", function DataTableBodyCellComponent_keydown_HostBindingHandler($event) {
        return ctx.onKeyDown($event);
      });
    }

    if (rf & 2) {
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵclassMap"](ctx.columnCssClasses);
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵstyleProp"]("width", ctx.width, "px")("min-width", ctx.minWidth, "px")("max-width", ctx.maxWidth, "px")("height", ctx.height);
    }
  },
  inputs: {
    group: "group",
    rowHeight: "rowHeight",
    isSelected: "isSelected",
    expanded: "expanded",
    rowIndex: "rowIndex",
    column: "column",
    row: "row",
    sorts: "sorts",
    treeStatus: "treeStatus",
    displayCheck: "displayCheck"
  },
  outputs: {
    activate: "activate",
    treeAction: "treeAction"
  },
  decls: 5,
  vars: 6,
  consts: [[1, "datatable-body-cell-label"], ["class", "datatable-checkbox", 4, "ngIf"], [4, "ngIf"], [3, "title", "innerHTML", 4, "ngIf"], [1, "datatable-checkbox"], ["type", "checkbox", 3, "checked", "click"], ["class", "datatable-tree-button", 3, "disabled", "click", 4, "ngIf"], [1, "datatable-tree-button", 3, "disabled", "click"], ["class", "icon datatable-icon-collapse", 4, "ngIf"], ["class", "icon datatable-icon-up", 4, "ngIf"], ["class", "icon datatable-icon-down", 4, "ngIf"], [1, "icon", "datatable-icon-collapse"], [1, "icon", "datatable-icon-up"], [1, "icon", "datatable-icon-down"], [3, "ngTemplateOutlet", "ngTemplateOutletContext"], [3, "title", "innerHTML"], ["cellTemplate", ""]],
  template: function DataTableBodyCellComponent_Template(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](0, "div", 0);
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtemplate"](1, DataTableBodyCellComponent_label_1_Template, 2, 1, "label", 1);
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtemplate"](2, DataTableBodyCellComponent_ng_container_2_Template, 3, 2, "ng-container", 2);
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtemplate"](3, DataTableBodyCellComponent_span_3_Template, 1, 2, "span", 3);
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtemplate"](4, DataTableBodyCellComponent_4_Template, 2, 2, undefined, 2);
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]();
    }

    if (rf & 2) {
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵstyleProp"]("margin-left", ctx.calcLeftMargin(ctx.column, ctx.row), "px");
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("ngIf", ctx.column.checkboxable && (!ctx.displayCheck || ctx.displayCheck(ctx.row, ctx.column, ctx.value)));
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("ngIf", ctx.column.isTreeColumn);
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("ngIf", !ctx.column.cellTemplate);
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("ngIf", ctx.column.cellTemplate);
    }
  },
  directives: [_angular_common__WEBPACK_IMPORTED_MODULE_5__.NgIf, _angular_common__WEBPACK_IMPORTED_MODULE_5__.NgTemplateOutlet],
  encapsulation: 2,
  changeDetection: 0
});

DataTableBodyCellComponent.ctorParameters = function () {
  return [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.ElementRef
  }, {
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.ChangeDetectorRef
  }];
};

DataTableBodyCellComponent.propDecorators = {
  displayCheck: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
  }],
  group: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
  }],
  rowHeight: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
  }],
  isSelected: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
  }],
  expanded: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
  }],
  rowIndex: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
  }],
  column: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
  }],
  row: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
  }],
  sorts: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
  }],
  treeStatus: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
  }],
  activate: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Output
  }],
  treeAction: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Output
  }],
  cellTemplate: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.ViewChild,
    args: ['cellTemplate', {
      read: _angular_core__WEBPACK_IMPORTED_MODULE_4__.ViewContainerRef,
      static: true
    }]
  }],
  columnCssClasses: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.HostBinding,
    args: ['class']
  }],
  width: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.HostBinding,
    args: ['style.width.px']
  }],
  minWidth: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.HostBinding,
    args: ['style.minWidth.px']
  }],
  maxWidth: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.HostBinding,
    args: ['style.maxWidth.px']
  }],
  height: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.HostBinding,
    args: ['style.height']
  }],
  onFocus: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.HostListener,
    args: ['focus']
  }],
  onBlur: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.HostListener,
    args: ['blur']
  }],
  onClick: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.HostListener,
    args: ['click', ['$event']]
  }],
  onDblClick: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.HostListener,
    args: ['dblclick', ['$event']]
  }],
  onKeyDown: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.HostListener,
    args: ['keydown', ['$event']]
  }]
};

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵsetClassMetadata"](DataTableBodyCellComponent, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Component,
    args: [{
      selector: 'datatable-body-cell',
      changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_4__.ChangeDetectionStrategy.OnPush,
      template: "\n    <div class=\"datatable-body-cell-label\" [style.margin-left.px]=\"calcLeftMargin(column, row)\">\n      <label\n        *ngIf=\"column.checkboxable && (!displayCheck || displayCheck(row, column, value))\"\n        class=\"datatable-checkbox\"\n      >\n        <input type=\"checkbox\" [checked]=\"isSelected\" (click)=\"onCheckboxChange($event)\" />\n      </label>\n      <ng-container *ngIf=\"column.isTreeColumn\">\n        <button\n          *ngIf=\"!column.treeToggleTemplate\"\n          class=\"datatable-tree-button\"\n          [disabled]=\"treeStatus === 'disabled'\"\n          (click)=\"onTreeAction()\"\n        >\n          <span>\n            <i *ngIf=\"treeStatus === 'loading'\" class=\"icon datatable-icon-collapse\"></i>\n            <i *ngIf=\"treeStatus === 'collapsed'\" class=\"icon datatable-icon-up\"></i>\n            <i *ngIf=\"treeStatus === 'expanded' || treeStatus === 'disabled'\" class=\"icon datatable-icon-down\"></i>\n          </span>\n        </button>\n        <ng-template\n          *ngIf=\"column.treeToggleTemplate\"\n          [ngTemplateOutlet]=\"column.treeToggleTemplate\"\n          [ngTemplateOutletContext]=\"{ cellContext: cellContext }\"\n        >\n        </ng-template>\n      </ng-container>\n\n      <span *ngIf=\"!column.cellTemplate\" [title]=\"sanitizedValue\" [innerHTML]=\"value\"> </span>\n      <ng-template\n        #cellTemplate\n        *ngIf=\"column.cellTemplate\"\n        [ngTemplateOutlet]=\"column.cellTemplate\"\n        [ngTemplateOutletContext]=\"cellContext\"\n      >\n      </ng-template>\n    </div>\n  "
    }]
  }], function () {
    return [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.ElementRef
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.ChangeDetectorRef
    }];
  }, {
    activate: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Output
    }],
    treeAction: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Output
    }],
    group: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
    }],
    rowHeight: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
    }],
    isSelected: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
    }],
    expanded: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
    }],
    rowIndex: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
    }],
    column: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
    }],
    row: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
    }],
    sorts: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
    }],
    treeStatus: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
    }],
    columnCssClasses: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.HostBinding,
      args: ['class']
    }],
    width: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.HostBinding,
      args: ['style.width.px']
    }],
    minWidth: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.HostBinding,
      args: ['style.minWidth.px']
    }],
    maxWidth: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.HostBinding,
      args: ['style.maxWidth.px']
    }],
    height: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.HostBinding,
      args: ['style.height']
    }],
    onFocus: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.HostListener,
      args: ['focus']
    }],
    onBlur: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.HostListener,
      args: ['blur']
    }],
    onClick: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.HostListener,
      args: ['click', ['$event']]
    }],
    onDblClick: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.HostListener,
      args: ['dblclick', ['$event']]
    }],
    onKeyDown: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.HostListener,
      args: ['keydown', ['$event']]
    }],
    displayCheck: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
    }],
    cellTemplate: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.ViewChild,
      args: ['cellTemplate', {
        read: _angular_core__WEBPACK_IMPORTED_MODULE_4__.ViewContainerRef,
        static: true
      }]
    }]
  });
})();

function selectRows(selected, row, comparefn) {
  var selectedIndex = comparefn(row, selected);

  if (selectedIndex > -1) {
    selected.splice(selectedIndex, 1);
  } else {
    selected.push(row);
  }

  return selected;
}

function selectRowsBetween(selected, rows, index, prevIndex, comparefn) {
  var reverse = index < prevIndex;

  for (var i = 0; i < rows.length; i++) {
    var row = rows[i];
    var greater = i >= prevIndex && i <= index;
    var lesser = i <= prevIndex && i >= index;
    var range = {
      start: 0,
      end: 0
    };

    if (reverse) {
      range = {
        start: index,
        end: prevIndex
      };
    } else {
      range = {
        start: prevIndex,
        end: index + 1
      };
    }

    if (reverse && lesser || !reverse && greater) {
      // if in the positive range to be added to `selected`, and
      // not already in the selected array, add it
      if (i >= range.start && i <= range.end) {
        selected.push(row);
      }
    }
  }

  return selected;
}

var DataTableSelectionComponent = /*#__PURE__*/function () {
  function DataTableSelectionComponent() {
    (0,C_Users_SAAD_Desktop_frontend_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_2__.default)(this, DataTableSelectionComponent);

    this.activate = new _angular_core__WEBPACK_IMPORTED_MODULE_4__.EventEmitter();
    this.select = new _angular_core__WEBPACK_IMPORTED_MODULE_4__.EventEmitter();
  }

  (0,C_Users_SAAD_Desktop_frontend_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_3__.default)(DataTableSelectionComponent, [{
    key: "selectRow",
    value: function selectRow(event, index, row) {
      var _this$selected3;

      if (!this.selectEnabled) return;
      var chkbox = this.selectionType === SelectionType.checkbox;
      var multi = this.selectionType === SelectionType.multi;
      var multiClick = this.selectionType === SelectionType.multiClick;
      var selected = [];

      if (multi || chkbox || multiClick) {
        if (event.shiftKey) {
          selected = selectRowsBetween([], this.rows, index, this.prevIndex, this.getRowSelectedIdx.bind(this));
        } else if (event.ctrlKey || event.metaKey || multiClick || chkbox) {
          selected = selectRows((0,C_Users_SAAD_Desktop_frontend_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__.default)(this.selected), row, this.getRowSelectedIdx.bind(this));
        } else {
          selected = selectRows([], row, this.getRowSelectedIdx.bind(this));
        }
      } else {
        selected = selectRows([], row, this.getRowSelectedIdx.bind(this));
      }

      if (typeof this.selectCheck === 'function') {
        selected = selected.filter(this.selectCheck.bind(this));
      }

      this.selected.splice(0, this.selected.length);

      (_this$selected3 = this.selected).push.apply(_this$selected3, (0,C_Users_SAAD_Desktop_frontend_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__.default)(selected));

      this.prevIndex = index;
      this.select.emit({
        selected: selected
      });
    }
  }, {
    key: "onActivate",
    value: function onActivate(model, index) {
      var type = model.type,
          event = model.event,
          row = model.row;
      var chkbox = this.selectionType === SelectionType.checkbox;
      var select = !chkbox && (type === 'click' || type === 'dblclick') || chkbox && type === 'checkbox';

      if (select) {
        this.selectRow(event, index, row);
      } else if (type === 'keydown') {
        if (event.keyCode === Keys.return) {
          this.selectRow(event, index, row);
        } else {
          this.onKeyboardFocus(model);
        }
      }

      this.activate.emit(model);
    }
  }, {
    key: "onKeyboardFocus",
    value: function onKeyboardFocus(model) {
      var keyCode = model.event.keyCode;
      var shouldFocus = keyCode === Keys.up || keyCode === Keys.down || keyCode === Keys.right || keyCode === Keys.left;

      if (shouldFocus) {
        var isCellSelection = this.selectionType === SelectionType.cell;

        if (!model.cellElement || !isCellSelection) {
          this.focusRow(model.rowElement, keyCode);
        } else if (isCellSelection) {
          this.focusCell(model.cellElement, model.rowElement, keyCode, model.cellIndex);
        }
      }
    }
  }, {
    key: "focusRow",
    value: function focusRow(rowElement, keyCode) {
      var nextRowElement = this.getPrevNextRow(rowElement, keyCode);
      if (nextRowElement) nextRowElement.focus();
    }
  }, {
    key: "getPrevNextRow",
    value: function getPrevNextRow(rowElement, keyCode) {
      var parentElement = rowElement.parentElement;

      if (parentElement) {
        var focusElement;

        if (keyCode === Keys.up) {
          focusElement = parentElement.previousElementSibling;
        } else if (keyCode === Keys.down) {
          focusElement = parentElement.nextElementSibling;
        }

        if (focusElement && focusElement.children.length) {
          return focusElement.children[0];
        }
      }
    }
  }, {
    key: "focusCell",
    value: function focusCell(cellElement, rowElement, keyCode, cellIndex) {
      var nextCellElement;

      if (keyCode === Keys.left) {
        nextCellElement = cellElement.previousElementSibling;
      } else if (keyCode === Keys.right) {
        nextCellElement = cellElement.nextElementSibling;
      } else if (keyCode === Keys.up || keyCode === Keys.down) {
        var nextRowElement = this.getPrevNextRow(rowElement, keyCode);

        if (nextRowElement) {
          var children = nextRowElement.getElementsByClassName('datatable-body-cell');
          if (children.length) nextCellElement = children[cellIndex];
        }
      }

      if (nextCellElement) nextCellElement.focus();
    }
  }, {
    key: "getRowSelected",
    value: function getRowSelected(row) {
      return this.getRowSelectedIdx(row, this.selected) > -1;
    }
  }, {
    key: "getRowSelectedIdx",
    value: function getRowSelectedIdx(row, selected) {
      var _this25 = this;

      if (!selected || !selected.length) return -1;
      var rowId = this.rowIdentity(row);
      return selected.findIndex(function (r) {
        var id = _this25.rowIdentity(r);

        return id === rowId;
      });
    }
  }]);

  return DataTableSelectionComponent;
}();

DataTableSelectionComponent.ɵfac = function DataTableSelectionComponent_Factory(t) {
  return new (t || DataTableSelectionComponent)();
};

DataTableSelectionComponent.ɵcmp = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵdefineComponent"]({
  type: DataTableSelectionComponent,
  selectors: [["datatable-selection"]],
  inputs: {
    rows: "rows",
    selected: "selected",
    selectEnabled: "selectEnabled",
    selectionType: "selectionType",
    rowIdentity: "rowIdentity",
    selectCheck: "selectCheck"
  },
  outputs: {
    activate: "activate",
    select: "select"
  },
  ngContentSelectors: _c0,
  decls: 1,
  vars: 0,
  template: function DataTableSelectionComponent_Template(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵprojectionDef"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵprojection"](0);
    }
  },
  encapsulation: 2,
  changeDetection: 0
});
DataTableSelectionComponent.propDecorators = {
  rows: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
  }],
  selected: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
  }],
  selectEnabled: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
  }],
  selectionType: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
  }],
  rowIdentity: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
  }],
  selectCheck: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
  }],
  activate: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Output
  }],
  select: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Output
  }]
};

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵsetClassMetadata"](DataTableSelectionComponent, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Component,
    args: [{
      selector: 'datatable-selection',
      template: " <ng-content></ng-content> ",
      changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_4__.ChangeDetectionStrategy.OnPush
    }]
  }], function () {
    return [];
  }, {
    activate: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Output
    }],
    select: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Output
    }],
    rows: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
    }],
    selected: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
    }],
    selectEnabled: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
    }],
    selectionType: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
    }],
    rowIdentity: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
    }],
    selectCheck: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
    }]
  });
})();

function defaultSumFunc(cells) {
  var cellsWithValues = cells.filter(function (cell) {
    return !!cell;
  });

  if (!cellsWithValues.length) {
    return null;
  }

  if (cellsWithValues.some(function (cell) {
    return typeof cell !== 'number';
  })) {
    return null;
  }

  return cellsWithValues.reduce(function (res, cell) {
    return res + cell;
  });
}

function noopSumFunc(cells) {
  return null;
}

var DataTableSummaryRowComponent = /*#__PURE__*/function () {
  function DataTableSummaryRowComponent() {
    (0,C_Users_SAAD_Desktop_frontend_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_2__.default)(this, DataTableSummaryRowComponent);

    this.summaryRow = {};
  }

  (0,C_Users_SAAD_Desktop_frontend_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_3__.default)(DataTableSummaryRowComponent, [{
    key: "ngOnChanges",
    value: function ngOnChanges() {
      if (!this.columns || !this.rows) {
        return;
      }

      this.updateInternalColumns();
      this.updateValues();
    }
  }, {
    key: "updateInternalColumns",
    value: function updateInternalColumns() {
      this._internalColumns = this.columns.map(function (col) {
        return Object.assign(Object.assign({}, col), {
          cellTemplate: col.summaryTemplate
        });
      });
    }
  }, {
    key: "updateValues",
    value: function updateValues() {
      var _this26 = this;

      this.summaryRow = {};
      this.columns.filter(function (col) {
        return !col.summaryTemplate;
      }).forEach(function (col) {
        var cellsFromSingleColumn = _this26.rows.map(function (row) {
          return row[col.prop];
        });

        var sumFunc = _this26.getSummaryFunction(col);

        _this26.summaryRow[col.prop] = col.pipe ? col.pipe.transform(sumFunc(cellsFromSingleColumn)) : sumFunc(cellsFromSingleColumn);
      });
    }
  }, {
    key: "getSummaryFunction",
    value: function getSummaryFunction(column) {
      if (column.summaryFunc === undefined) {
        return defaultSumFunc;
      } else if (column.summaryFunc === null) {
        return noopSumFunc;
      } else {
        return column.summaryFunc;
      }
    }
  }]);

  return DataTableSummaryRowComponent;
}();

DataTableSummaryRowComponent.ɵfac = function DataTableSummaryRowComponent_Factory(t) {
  return new (t || DataTableSummaryRowComponent)();
};

DataTableSummaryRowComponent.ɵcmp = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵdefineComponent"]({
  type: DataTableSummaryRowComponent,
  selectors: [["datatable-summary-row"]],
  hostAttrs: [1, "datatable-summary-row"],
  inputs: {
    rows: "rows",
    columns: "columns",
    rowHeight: "rowHeight",
    offsetX: "offsetX",
    innerWidth: "innerWidth"
  },
  features: [_angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵNgOnChangesFeature"]],
  decls: 1,
  vars: 1,
  consts: [["tabindex", "-1", 3, "innerWidth", "offsetX", "columns", "rowHeight", "row", "rowIndex", 4, "ngIf"], ["tabindex", "-1", 3, "innerWidth", "offsetX", "columns", "rowHeight", "row", "rowIndex"]],
  template: function DataTableSummaryRowComponent_Template(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtemplate"](0, DataTableSummaryRowComponent_datatable_body_row_0_Template, 1, 6, "datatable-body-row", 0);
    }

    if (rf & 2) {
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵproperty"]("ngIf", ctx.summaryRow && ctx._internalColumns);
    }
  },
  directives: [_angular_common__WEBPACK_IMPORTED_MODULE_5__.NgIf, DataTableBodyRowComponent],
  encapsulation: 2
});
DataTableSummaryRowComponent.propDecorators = {
  rows: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
  }],
  columns: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
  }],
  rowHeight: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
  }],
  offsetX: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
  }],
  innerWidth: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
  }]
};

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵsetClassMetadata"](DataTableSummaryRowComponent, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Component,
    args: [{
      selector: 'datatable-summary-row',
      template: "\n    <datatable-body-row\n      *ngIf=\"summaryRow && _internalColumns\"\n      tabindex=\"-1\"\n      [innerWidth]=\"innerWidth\"\n      [offsetX]=\"offsetX\"\n      [columns]=\"_internalColumns\"\n      [rowHeight]=\"rowHeight\"\n      [row]=\"summaryRow\"\n      [rowIndex]=\"-1\"\n    >\n    </datatable-body-row>\n  ",
      host: {
        class: 'datatable-summary-row'
      }
    }]
  }], function () {
    return [];
  }, {
    rows: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
    }],
    columns: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
    }],
    rowHeight: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
    }],
    offsetX: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
    }],
    innerWidth: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input
    }]
  });
})();

var NgxDatatableModule = /*#__PURE__*/function () {
  function NgxDatatableModule() {
    (0,C_Users_SAAD_Desktop_frontend_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_2__.default)(this, NgxDatatableModule);
  }

  (0,C_Users_SAAD_Desktop_frontend_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_3__.default)(NgxDatatableModule, null, [{
    key: "forRoot",
    value:
    /**
     * Configure global configuration via INgxDatatableConfig
     * @param configuration
     */
    function forRoot(configuration) {
      return {
        ngModule: NgxDatatableModule,
        providers: [{
          provide: 'configuration',
          useValue: configuration
        }]
      };
    }
  }]);

  return NgxDatatableModule;
}();

NgxDatatableModule.ɵfac = function NgxDatatableModule_Factory(t) {
  return new (t || NgxDatatableModule)();
};

NgxDatatableModule.ɵmod = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵdefineNgModule"]({
  type: NgxDatatableModule
});
NgxDatatableModule.ɵinj = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵdefineInjector"]({
  providers: [ScrollbarHelper, DimensionsHelper, ColumnChangesService],
  imports: [[_angular_common__WEBPACK_IMPORTED_MODULE_5__.CommonModule]]
});

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵsetClassMetadata"](NgxDatatableModule, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.NgModule,
    args: [{
      imports: [_angular_common__WEBPACK_IMPORTED_MODULE_5__.CommonModule],
      providers: [ScrollbarHelper, DimensionsHelper, ColumnChangesService],
      declarations: [DataTableFooterTemplateDirective, VisibilityDirective, DraggableDirective, ResizeableDirective, OrderableDirective, LongPressDirective, ScrollerComponent, DatatableComponent, DataTableColumnDirective, DataTableHeaderComponent, DataTableHeaderCellComponent, DataTableBodyComponent, DataTableFooterComponent, DataTablePagerComponent, ProgressBarComponent, DataTableBodyRowComponent, DataTableRowWrapperComponent, DatatableRowDetailDirective, DatatableGroupHeaderDirective, DatatableRowDetailTemplateDirective, DataTableBodyCellComponent, DataTableSelectionComponent, DataTableColumnHeaderDirective, DataTableColumnCellDirective, DataTableColumnCellTreeToggle, DatatableFooterDirective, DatatableGroupHeaderTemplateDirective, DataTableSummaryRowComponent],
      exports: [DatatableComponent, DatatableRowDetailDirective, DatatableGroupHeaderDirective, DatatableRowDetailTemplateDirective, DataTableColumnDirective, DataTableColumnHeaderDirective, DataTableColumnCellDirective, DataTableColumnCellTreeToggle, DataTableFooterTemplateDirective, DatatableFooterDirective, DataTablePagerComponent, DatatableGroupHeaderTemplateDirective]
    }]
  }], null, null);
})();

(function () {
  (typeof ngJitMode === "undefined" || ngJitMode) && _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵsetNgModuleScope"](NgxDatatableModule, {
    declarations: function declarations() {
      return [DataTableFooterTemplateDirective, VisibilityDirective, DraggableDirective, ResizeableDirective, OrderableDirective, LongPressDirective, ScrollerComponent, DatatableComponent, DataTableColumnDirective, DataTableHeaderComponent, DataTableHeaderCellComponent, DataTableBodyComponent, DataTableFooterComponent, DataTablePagerComponent, ProgressBarComponent, DataTableBodyRowComponent, DataTableRowWrapperComponent, DatatableRowDetailDirective, DatatableGroupHeaderDirective, DatatableRowDetailTemplateDirective, DataTableBodyCellComponent, DataTableSelectionComponent, DataTableColumnHeaderDirective, DataTableColumnCellDirective, DataTableColumnCellTreeToggle, DatatableFooterDirective, DatatableGroupHeaderTemplateDirective, DataTableSummaryRowComponent];
    },
    imports: function imports() {
      return [_angular_common__WEBPACK_IMPORTED_MODULE_5__.CommonModule];
    },
    exports: function exports() {
      return [DatatableComponent, DatatableRowDetailDirective, DatatableGroupHeaderDirective, DatatableRowDetailTemplateDirective, DataTableColumnDirective, DataTableColumnHeaderDirective, DataTableColumnCellDirective, DataTableColumnCellTreeToggle, DataTableFooterTemplateDirective, DatatableFooterDirective, DataTablePagerComponent, DatatableGroupHeaderTemplateDirective];
    }
  });
})();

var ClickType;

(function (ClickType) {
  ClickType["single"] = "single";
  ClickType["double"] = "double";
})(ClickType || (ClickType = {}));

if (typeof document !== 'undefined' && !document.elementsFromPoint) {
  document.elementsFromPoint = elementsFromPoint;
}
/*tslint:disable*/

/**
 * Polyfill for `elementsFromPoint`
 *
 * https://developer.mozilla.org/en-US/docs/Web/API/Document/elementsFromPoint
 * https://gist.github.com/iddan/54d5d9e58311b0495a91bf06de661380
 * https://gist.github.com/oslego/7265412
 */


function elementsFromPoint(x, y) {
  var elements = [];
  var previousPointerEvents = [];
  var current; // TODO: window.getComputedStyle should be used with inferred type (Element)

  var i;
  var d; //if (document === undefined) return elements;
  // get all elements via elementFromPoint, and remove them from hit-testing in order

  while ((current = document.elementFromPoint(x, y)) && elements.indexOf(current) === -1 && current != null) {
    // push the element and its current style
    elements.push(current);
    previousPointerEvents.push({
      value: current.style.getPropertyValue('pointer-events'),
      priority: current.style.getPropertyPriority('pointer-events')
    }); // add "pointer-events: none", to get to the underlying element

    current.style.setProperty('pointer-events', 'none', 'important');
  } // restore the previous pointer-events values


  for (i = previousPointerEvents.length; d = previousPointerEvents[--i];) {
    elements[i].style.setProperty('pointer-events', d.value ? d.value : '', d.priority);
  } // return our results


  return elements;
}
/*tslint:enable*/

/*
 * Public API Surface of ngx-datatable
 */

/**
 * Generated bundle index. Do not edit.
 */


 //# sourceMappingURL=swimlane-ngx-datatable.js.map

/***/ }),

/***/ 69129:
/*!*****************************************************************!*\
  !*** ./node_modules/ngx-mask/__ivy_ngcc__/fesm2015/ngx-mask.js ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "INITIAL_CONFIG": function() { return /* binding */ INITIAL_CONFIG; },
/* harmony export */   "MaskApplierService": function() { return /* binding */ MaskApplierService; },
/* harmony export */   "MaskDirective": function() { return /* binding */ MaskDirective; },
/* harmony export */   "MaskPipe": function() { return /* binding */ MaskPipe; },
/* harmony export */   "MaskService": function() { return /* binding */ MaskService; },
/* harmony export */   "NEW_CONFIG": function() { return /* binding */ NEW_CONFIG; },
/* harmony export */   "NgxMaskModule": function() { return /* binding */ NgxMaskModule; },
/* harmony export */   "_configFactory": function() { return /* binding */ _configFactory; },
/* harmony export */   "config": function() { return /* binding */ config; },
/* harmony export */   "initialConfig": function() { return /* binding */ initialConfig; },
/* harmony export */   "timeMasks": function() { return /* binding */ timeMasks; },
/* harmony export */   "withoutValidation": function() { return /* binding */ withoutValidation; }
/* harmony export */ });
/* harmony import */ var C_Users_SAAD_Desktop_frontend_node_modules_babel_runtime_helpers_esm_get__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/get */ 27078);
/* harmony import */ var C_Users_SAAD_Desktop_frontend_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/getPrototypeOf */ 43620);
/* harmony import */ var C_Users_SAAD_Desktop_frontend_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/inherits */ 28784);
/* harmony import */ var C_Users_SAAD_Desktop_frontend_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/createSuper */ 84999);
/* harmony import */ var C_Users_SAAD_Desktop_frontend_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/slicedToArray */ 42578);
/* harmony import */ var C_Users_SAAD_Desktop_frontend_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/classCallCheck */ 31112);
/* harmony import */ var C_Users_SAAD_Desktop_frontend_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/createClass */ 41998);
/* harmony import */ var C_Users_SAAD_Desktop_frontend_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./node_modules/@babel/runtime/regenerator */ 88774);
/* harmony import */ var C_Users_SAAD_Desktop_frontend_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(C_Users_SAAD_Desktop_frontend_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_7__);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @angular/core */ 37716);
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! tslib */ 64762);
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @angular/forms */ 3679);
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @angular/common */ 38583);













var config = new _angular_core__WEBPACK_IMPORTED_MODULE_8__.InjectionToken('config');
var NEW_CONFIG = new _angular_core__WEBPACK_IMPORTED_MODULE_8__.InjectionToken('NEW_CONFIG');
var INITIAL_CONFIG = new _angular_core__WEBPACK_IMPORTED_MODULE_8__.InjectionToken('INITIAL_CONFIG');
var initialConfig = {
  suffix: '',
  prefix: '',
  thousandSeparator: ' ',
  decimalMarker: '.',
  clearIfNotMatch: false,
  showTemplate: false,
  showMaskTyped: false,
  placeHolderCharacter: '_',
  dropSpecialCharacters: true,
  hiddenInput: undefined,
  shownMaskExpression: '',
  separatorLimit: '',
  allowNegativeNumbers: false,
  validation: true,
  // tslint:disable-next-line: quotemark
  specialCharacters: ['-', '/', '(', ')', '.', ':', ' ', '+', ',', '@', '[', ']', '"', "'"],
  leadZeroDateTime: false,
  patterns: {
    '0': {
      pattern: new RegExp('\\d')
    },
    '9': {
      pattern: new RegExp('\\d'),
      optional: true
    },
    X: {
      pattern: new RegExp('\\d'),
      symbol: '*'
    },
    A: {
      pattern: new RegExp('[a-zA-Z0-9]')
    },
    S: {
      pattern: new RegExp('[a-zA-Z]')
    },
    d: {
      pattern: new RegExp('\\d')
    },
    m: {
      pattern: new RegExp('\\d')
    },
    M: {
      pattern: new RegExp('\\d')
    },
    H: {
      pattern: new RegExp('\\d')
    },
    h: {
      pattern: new RegExp('\\d')
    },
    s: {
      pattern: new RegExp('\\d')
    }
  }
};
var timeMasks = ['Hh:m0:s0', 'Hh:m0', 'm0:s0'];
var withoutValidation = ['percent', 'Hh', 's0', 'm0', 'separator', 'd0/M0/0000', 'd0/M0', 'd0', 'M0'];

var MaskApplierService = /*#__PURE__*/function () {
  function MaskApplierService(_config) {
    var _this = this;

    (0,C_Users_SAAD_Desktop_frontend_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_5__.default)(this, MaskApplierService);

    this._config = _config;
    this.maskExpression = '';
    this.actualValue = '';
    this.shownMaskExpression = '';

    this._formatWithSeparators = function (str, thousandSeparatorChar, decimalChar, precision) {
      var x = str.split(decimalChar);
      var decimals = x.length > 1 ? "".concat(decimalChar).concat(x[1]) : '';
      var res = x[0];

      var separatorLimit = _this.separatorLimit.replace(/\s/g, '');

      if (separatorLimit && +separatorLimit) {
        if (res[0] === '-') {
          res = "-".concat(res.slice(1, res.length).slice(0, separatorLimit.length));
        } else {
          res = res.slice(0, separatorLimit.length);
        }
      }

      var rgx = /(\d+)(\d{3})/;

      while (thousandSeparatorChar && rgx.test(res)) {
        res = res.replace(rgx, '$1' + thousandSeparatorChar + '$2');
      }

      if (precision === undefined) {
        return res + decimals;
      } else if (precision === 0) {
        return res;
      }

      return res + decimals.substr(0, precision + 1);
    };

    this.percentage = function (str) {
      return Number(str) >= 0 && Number(str) <= 100;
    };

    this.getPrecision = function (maskExpression) {
      var x = maskExpression.split('.');

      if (x.length > 1) {
        return Number(x[x.length - 1]);
      }

      return Infinity;
    };

    this.checkAndRemoveSuffix = function (inputValue) {
      var _a, _b, _c;

      for (var i = ((_a = _this.suffix) === null || _a === void 0 ? void 0 : _a.length) - 1; i >= 0; i--) {
        var substr = _this.suffix.substr(i, (_b = _this.suffix) === null || _b === void 0 ? void 0 : _b.length);

        if (inputValue.includes(substr) && (i - 1 < 0 || !inputValue.includes(_this.suffix.substr(i - 1, (_c = _this.suffix) === null || _c === void 0 ? void 0 : _c.length)))) {
          return inputValue.replace(substr, '');
        }
      }

      return inputValue;
    };

    this.checkInputPrecision = function (inputValue, precision, decimalMarker) {
      if (precision < Infinity) {
        var precisionRegEx = new RegExp(_this._charToRegExpExpression(decimalMarker) + "\\d{".concat(precision, "}.*$"));
        var precisionMatch = inputValue.match(precisionRegEx);

        if (precisionMatch && precisionMatch[0].length - 1 > precision) {
          var diff = precisionMatch[0].length - 1 - precision;
          inputValue = inputValue.substring(0, inputValue.length - diff);
        }

        if (precision === 0 && inputValue.endsWith(decimalMarker)) {
          inputValue = inputValue.substring(0, inputValue.length - 1);
        }
      }

      return inputValue;
    };

    this._shift = new Set();
    this.clearIfNotMatch = this._config.clearIfNotMatch;
    this.dropSpecialCharacters = this._config.dropSpecialCharacters;
    this.maskSpecialCharacters = this._config.specialCharacters;
    this.maskAvailablePatterns = this._config.patterns;
    this.prefix = this._config.prefix;
    this.suffix = this._config.suffix;
    this.thousandSeparator = this._config.thousandSeparator;
    this.decimalMarker = this._config.decimalMarker;
    this.hiddenInput = this._config.hiddenInput;
    this.showMaskTyped = this._config.showMaskTyped;
    this.placeHolderCharacter = this._config.placeHolderCharacter;
    this.validation = this._config.validation;
    this.separatorLimit = this._config.separatorLimit;
    this.allowNegativeNumbers = this._config.allowNegativeNumbers;
    this.leadZeroDateTime = this._config.leadZeroDateTime;
  }

  (0,C_Users_SAAD_Desktop_frontend_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_6__.default)(MaskApplierService, [{
    key: "applyMaskWithPattern",
    value: function applyMaskWithPattern(inputValue, maskAndPattern) {
      var _maskAndPattern = (0,C_Users_SAAD_Desktop_frontend_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_4__.default)(maskAndPattern, 2),
          mask = _maskAndPattern[0],
          customPattern = _maskAndPattern[1];

      this.customPattern = customPattern;
      return this.applyMask(inputValue, mask);
    }
  }, {
    key: "applyMask",
    value: function applyMask(inputValue, maskExpression) {
      var _this2 = this;

      var position = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
      var justPasted = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
      var backspaced = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;
      var cb = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : function () {};

      if (inputValue === undefined || inputValue === null || maskExpression === undefined) {
        return '';
      }

      var cursor = 0;
      var result = '';
      var multi = false;
      var backspaceShift = false;
      var shift = 1;
      var stepBack = false;

      if (inputValue.slice(0, this.prefix.length) === this.prefix) {
        inputValue = inputValue.slice(this.prefix.length, inputValue.length);
      }

      if (!!this.suffix && (inputValue === null || inputValue === void 0 ? void 0 : inputValue.length) > 0) {
        inputValue = this.checkAndRemoveSuffix(inputValue);
      }

      var inputArray = inputValue.toString().split('');

      if (maskExpression === 'IP') {
        this.ipError = !!(inputArray.filter(function (i) {
          return i === '.';
        }).length < 3 && inputArray.length < 7);
        maskExpression = '099.099.099.099';
      }

      var arr = [];

      for (var i = 0; i < inputValue.length; i++) {
        if (inputValue[i].match('\\d')) {
          arr.push(inputValue[i]);
        }
      }

      if (maskExpression === 'CPF_CNPJ') {
        this.cpfCnpjError = !!(arr.length !== 11 && arr.length !== 14);

        if (arr.length > 11) {
          maskExpression = '00.000.000/0000-00';
        } else {
          maskExpression = '000.000.000-00';
        }
      }

      if (maskExpression.startsWith('percent')) {
        if (inputValue.match('[a-z]|[A-Z]') || inputValue.match(/[-!$%^&*()_+|~=`{}\[\]:";'<>?,\/.]/)) {
          inputValue = this._stripToDecimal(inputValue);
          var precision = this.getPrecision(maskExpression);
          inputValue = this.checkInputPrecision(inputValue, precision, this.decimalMarker);
        }

        if (inputValue.indexOf('.') > 0 && !this.percentage(inputValue.substring(0, inputValue.indexOf('.')))) {
          var base = inputValue.substring(0, inputValue.indexOf('.') - 1);
          inputValue = "".concat(base).concat(inputValue.substring(inputValue.indexOf('.'), inputValue.length));
        }

        if (this.percentage(inputValue)) {
          result = inputValue;
        } else {
          result = inputValue.substring(0, inputValue.length - 1);
        }
      } else if (maskExpression.startsWith('separator')) {
        if (inputValue.match('[wа-яА-Я]') || inputValue.match('[ЁёА-я]') || inputValue.match('[a-z]|[A-Z]') || inputValue.match(/[-@#!$%\\^&*()_£¬'+|~=`{}\[\]:";<>.?\/]/) || inputValue.match('[^A-Za-z0-9,]')) {
          inputValue = this._stripToDecimal(inputValue);
        }

        inputValue = inputValue.length > 1 && inputValue[0] === '0' && inputValue[1] !== this.decimalMarker && !backspaced ? inputValue.slice(1, inputValue.length) : inputValue; // TODO: we had different rexexps here for the different cases... but tests dont seam to bother - check this
        //  separator: no COMMA, dot-sep: no SPACE, COMMA OK, comma-sep: no SPACE, COMMA OK

        var thousandSeperatorCharEscaped = this._charToRegExpExpression(this.thousandSeparator);

        var decimalMarkerEscaped = this._charToRegExpExpression(this.decimalMarker);

        var invalidChars = '@#!$%^&*()_+|~=`{}\\[\\]:\\s,\\.";<>?\\/'.replace(thousandSeperatorCharEscaped, '').replace(decimalMarkerEscaped, '');
        var invalidCharRegexp = new RegExp('[' + invalidChars + ']');

        if (inputValue.match(invalidCharRegexp)) {
          inputValue = inputValue.substring(0, inputValue.length - 1);
        }

        var _precision = this.getPrecision(maskExpression);

        inputValue = this.checkInputPrecision(inputValue, _precision, this.decimalMarker);
        var strForSep = inputValue.replace(new RegExp(thousandSeperatorCharEscaped, 'g'), '');
        result = this._formatWithSeparators(strForSep, this.thousandSeparator, this.decimalMarker, _precision);
        var commaShift = result.indexOf(',') - inputValue.indexOf(',');
        var shiftStep = result.length - inputValue.length;

        if (shiftStep > 0 && result[position] !== ',') {
          backspaceShift = true;
          var _shift = 0;

          do {
            this._shift.add(position + _shift);

            _shift++;
          } while (_shift < shiftStep);
        } else if (commaShift !== 0 && position > 0 && !(result.indexOf(',') >= position && position > 3) || !(result.indexOf('.') >= position && position > 3) && shiftStep <= 0) {
          this._shift.clear();

          backspaceShift = true;
          shift = shiftStep;
          position += shiftStep;

          this._shift.add(position);
        } else {
          this._shift.clear();
        }
      } else {
        for ( // tslint:disable-next-line
        var _i = 0, inputSymbol = inputArray[0]; _i < inputArray.length; _i++, inputSymbol = inputArray[_i]) {
          if (cursor === maskExpression.length) {
            break;
          }

          if (this._checkSymbolMask(inputSymbol, maskExpression[cursor]) && maskExpression[cursor + 1] === '?') {
            result += inputSymbol;
            cursor += 2;
          } else if (maskExpression[cursor + 1] === '*' && multi && this._checkSymbolMask(inputSymbol, maskExpression[cursor + 2])) {
            result += inputSymbol;
            cursor += 3;
            multi = false;
          } else if (this._checkSymbolMask(inputSymbol, maskExpression[cursor]) && maskExpression[cursor + 1] === '*') {
            result += inputSymbol;
            multi = true;
          } else if (maskExpression[cursor + 1] === '?' && this._checkSymbolMask(inputSymbol, maskExpression[cursor + 2])) {
            result += inputSymbol;
            cursor += 3;
          } else if (this._checkSymbolMask(inputSymbol, maskExpression[cursor])) {
            if (maskExpression[cursor] === 'H') {
              if (Number(inputSymbol) > 2) {
                cursor += 1;

                this._shiftStep(maskExpression, cursor, inputArray.length);

                _i--;

                if (this.leadZeroDateTime) {
                  result += '0';
                }

                continue;
              }
            }

            if (maskExpression[cursor] === 'h') {
              if (result === '2' && Number(inputSymbol) > 3) {
                cursor += 1;
                _i--;
                continue;
              }
            }

            if (maskExpression[cursor] === 'm') {
              if (Number(inputSymbol) > 5) {
                cursor += 1;

                this._shiftStep(maskExpression, cursor, inputArray.length);

                _i--;

                if (this.leadZeroDateTime) {
                  result += '0';
                }

                continue;
              }
            }

            if (maskExpression[cursor] === 's') {
              if (Number(inputSymbol) > 5) {
                cursor += 1;

                this._shiftStep(maskExpression, cursor, inputArray.length);

                _i--;

                if (this.leadZeroDateTime) {
                  result += '0';
                }

                continue;
              }
            }

            var daysCount = 31;

            if (maskExpression[cursor] === 'd') {
              if (Number(inputSymbol) > 3 && this.leadZeroDateTime || Number(inputValue.slice(cursor, cursor + 2)) > daysCount || inputValue[cursor + 1] === '/') {
                cursor += 1;

                this._shiftStep(maskExpression, cursor, inputArray.length);

                _i--;

                if (this.leadZeroDateTime) {
                  result += '0';
                }

                continue;
              }
            }

            if (maskExpression[cursor] === 'M') {
              var monthsCount = 12; // mask without day

              var withoutDays = cursor === 0 && (Number(inputSymbol) > 2 || Number(inputValue.slice(cursor, cursor + 2)) > monthsCount || inputValue[cursor + 1] === '/'); // day<10 && month<12 for input

              var day1monthInput = inputValue.slice(cursor - 3, cursor - 1).includes('/') && (inputValue[cursor - 2] === '/' && Number(inputValue.slice(cursor - 1, cursor + 1)) > monthsCount && inputValue[cursor] !== '/' || inputValue[cursor] === '/' || inputValue[cursor - 3] === '/' && Number(inputValue.slice(cursor - 2, cursor)) > monthsCount && inputValue[cursor - 1] !== '/' || inputValue[cursor - 1] === '/'); // 10<day<31 && month<12 for input

              var day2monthInput = Number(inputValue.slice(cursor - 3, cursor - 1)) <= daysCount && !inputValue.slice(cursor - 3, cursor - 1).includes('/') && inputValue[cursor - 1] === '/' && (Number(inputValue.slice(cursor, cursor + 2)) > monthsCount || inputValue[cursor + 1] === '/'); // day<10 && month<12 for paste whole data

              var day1monthPaste = Number(inputValue.slice(cursor - 3, cursor - 1)) > daysCount && !inputValue.slice(cursor - 3, cursor - 1).includes('/') && !inputValue.slice(cursor - 2, cursor).includes('/') && Number(inputValue.slice(cursor - 2, cursor)) > monthsCount; // 10<day<31 && month<12 for paste whole data

              var day2monthPaste = Number(inputValue.slice(cursor - 3, cursor - 1)) <= daysCount && !inputValue.slice(cursor - 3, cursor - 1).includes('/') && inputValue[cursor - 1] !== '/' && Number(inputValue.slice(cursor - 1, cursor + 1)) > monthsCount;

              if (Number(inputSymbol) > 1 && this.leadZeroDateTime || withoutDays || day1monthInput || day2monthInput || day1monthPaste || day2monthPaste) {
                cursor += 1;

                this._shiftStep(maskExpression, cursor, inputArray.length);

                _i--;

                if (this.leadZeroDateTime) {
                  result += '0';
                }

                continue;
              }
            }

            result += inputSymbol;
            cursor++;
          } else if (this.maskSpecialCharacters.indexOf(maskExpression[cursor]) !== -1) {
            result += maskExpression[cursor];
            cursor++;

            this._shiftStep(maskExpression, cursor, inputArray.length);

            _i--;
          } else if (this.maskSpecialCharacters.indexOf(inputSymbol) > -1 && this.maskAvailablePatterns[maskExpression[cursor]] && this.maskAvailablePatterns[maskExpression[cursor]].optional) {
            if (!!inputArray[cursor] && maskExpression !== '099.099.099.099' && maskExpression !== '000.000.000-00' && maskExpression !== '00.000.000/0000-00') {
              result += inputArray[cursor];
            }

            cursor++;
            _i--;
          } else if (this.maskExpression[cursor + 1] === '*' && this._findSpecialChar(this.maskExpression[cursor + 2]) && this._findSpecialChar(inputSymbol) === this.maskExpression[cursor + 2] && multi) {
            cursor += 3;
            result += inputSymbol;
          } else if (this.maskExpression[cursor + 1] === '?' && this._findSpecialChar(this.maskExpression[cursor + 2]) && this._findSpecialChar(inputSymbol) === this.maskExpression[cursor + 2] && multi) {
            cursor += 3;
            result += inputSymbol;
          } else if (this.showMaskTyped && this.maskSpecialCharacters.indexOf(inputSymbol) < 0 && inputSymbol !== this.placeHolderCharacter) {
            stepBack = true;
          }
        }
      }

      if (result.length + 1 === maskExpression.length && this.maskSpecialCharacters.indexOf(maskExpression[maskExpression.length - 1]) !== -1) {
        result += maskExpression[maskExpression.length - 1];
      }

      var newPosition = position + 1;

      while (this._shift.has(newPosition)) {
        shift++;
        newPosition++;
      }

      var actualShift = justPasted ? cursor : this._shift.has(position) ? shift : 0;

      if (stepBack) {
        actualShift--;
      }

      cb(actualShift, backspaceShift);

      if (shift < 0) {
        this._shift.clear();
      }

      var onlySpecial = false;

      if (backspaced) {
        onlySpecial = inputArray.every(function (char) {
          return _this2.maskSpecialCharacters.includes(char);
        });
      }

      var res = "".concat(this.prefix).concat(onlySpecial ? '' : result).concat(this.suffix);

      if (result.length === 0) {
        res = "".concat(this.prefix).concat(result);
      }

      return res;
    }
  }, {
    key: "_findSpecialChar",
    value: function _findSpecialChar(inputSymbol) {
      return this.maskSpecialCharacters.find(function (val) {
        return val === inputSymbol;
      });
    }
  }, {
    key: "_checkSymbolMask",
    value: function _checkSymbolMask(inputSymbol, maskSymbol) {
      this.maskAvailablePatterns = this.customPattern ? this.customPattern : this.maskAvailablePatterns;
      return this.maskAvailablePatterns[maskSymbol] && this.maskAvailablePatterns[maskSymbol].pattern && this.maskAvailablePatterns[maskSymbol].pattern.test(inputSymbol);
    }
  }, {
    key: "_stripToDecimal",
    value: function _stripToDecimal(str) {
      var _this3 = this;

      return str.split('').filter(function (i, idx) {
        return i.match('^-?\\d') || i.match('\\s') || i === '.' || i === ',' || i === '-' && idx === 0 && _this3.allowNegativeNumbers;
      }).join('');
    }
  }, {
    key: "_charToRegExpExpression",
    value: function _charToRegExpExpression(char) {
      if (char) {
        var charsToEscape = '[\\^$.|?*+()';
        return char === ' ' ? '\\s' : charsToEscape.indexOf(char) >= 0 ? '\\' + char : char;
      }

      return char;
    }
  }, {
    key: "_shiftStep",
    value: function _shiftStep(maskExpression, cursor, inputLength) {
      var shiftStep = /[*?]/g.test(maskExpression.slice(0, cursor)) ? inputLength : cursor;

      this._shift.add(shiftStep + this.prefix.length || 0);
    }
  }]);

  return MaskApplierService;
}();

MaskApplierService.ɵfac = function MaskApplierService_Factory(t) {
  return new (t || MaskApplierService)(_angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵinject"](config));
};

MaskApplierService.ɵprov = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵdefineInjectable"]({
  token: MaskApplierService,
  factory: MaskApplierService.ɵfac
});

MaskApplierService.ctorParameters = function () {
  return [{
    type: undefined,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Inject,
      args: [config]
    }]
  }];
};

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵsetClassMetadata"](MaskApplierService, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Injectable
  }], function () {
    return [{
      type: undefined,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Inject,
        args: [config]
      }]
    }];
  }, null);
})();

var MaskService = /*#__PURE__*/function (_MaskApplierService) {
  (0,C_Users_SAAD_Desktop_frontend_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_2__.default)(MaskService, _MaskApplierService);

  var _super = (0,C_Users_SAAD_Desktop_frontend_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_3__.default)(MaskService);

  function MaskService(document, _config, _elementRef, _renderer) {
    var _this4;

    (0,C_Users_SAAD_Desktop_frontend_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_5__.default)(this, MaskService);

    _this4 = _super.call(this, _config);
    _this4.document = document;
    _this4._config = _config;
    _this4._elementRef = _elementRef;
    _this4._renderer = _renderer;
    _this4.maskExpression = '';
    _this4.isNumberValue = false;
    _this4.placeHolderCharacter = '_';
    _this4.maskIsShown = '';
    _this4.selStart = null;
    _this4.selEnd = null;
    /**
     * Whether we are currently in writeValue function, in this case when applying the mask we don't want to trigger onChange function,
     * since writeValue should be a one way only process of writing the DOM value based on the Angular model value.
     */

    _this4.writingValue = false;
    _this4.maskChanged = false;

    _this4.onChange = function (_) {};

    return _this4;
  } // tslint:disable-next-line:cyclomatic-complexity


  (0,C_Users_SAAD_Desktop_frontend_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_6__.default)(MaskService, [{
    key: "applyMask",
    value: function applyMask(inputValue, maskExpression) {
      var _this5 = this;

      var position = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
      var justPasted = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
      var backspaced = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;
      var cb = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : function () {};

      if (!maskExpression) {
        return inputValue;
      }

      this.maskIsShown = this.showMaskTyped ? this.showMaskInInput() : '';

      if (this.maskExpression === 'IP' && this.showMaskTyped) {
        this.maskIsShown = this.showMaskInInput(inputValue || '#');
      }

      if (this.maskExpression === 'CPF_CNPJ' && this.showMaskTyped) {
        this.maskIsShown = this.showMaskInInput(inputValue || '#');
      }

      if (!inputValue && this.showMaskTyped) {
        this.formControlResult(this.prefix);
        return this.prefix + this.maskIsShown;
      }

      var getSymbol = !!inputValue && typeof this.selStart === 'number' ? inputValue[this.selStart] : '';
      var newInputValue = '';

      if (this.hiddenInput && !this.writingValue) {
        var actualResult = this.actualValue.split(''); // tslint:disable no-unused-expression

        inputValue !== '' && actualResult.length ? typeof this.selStart === 'number' && typeof this.selEnd === 'number' ? inputValue.length > actualResult.length ? actualResult.splice(this.selStart, 0, getSymbol) : inputValue.length < actualResult.length ? actualResult.length - inputValue.length === 1 ? actualResult.splice(this.selStart - 1, 1) : actualResult.splice(this.selStart, this.selEnd - this.selStart) : null : null : actualResult = []; // tslint:enable no-unused-expression

        newInputValue = this.actualValue.length && actualResult.length <= inputValue.length ? this.shiftTypedSymbols(actualResult.join('')) : inputValue;
      }

      newInputValue = Boolean(newInputValue) && newInputValue.length ? newInputValue : inputValue;

      var result = (0,C_Users_SAAD_Desktop_frontend_node_modules_babel_runtime_helpers_esm_get__WEBPACK_IMPORTED_MODULE_0__.default)((0,C_Users_SAAD_Desktop_frontend_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_1__.default)(MaskService.prototype), "applyMask", this).call(this, newInputValue, maskExpression, position, justPasted, backspaced, cb);

      this.actualValue = this.getActualValue(result); // handle some separator implications:
      // a.) adjust decimalMarker default (. -> ,) if thousandSeparator is a dot

      if (this.thousandSeparator === '.' && this.decimalMarker === '.') {
        this.decimalMarker = ',';
      } // b) remove decimal marker from list of special characters to mask


      if (this.maskExpression.startsWith('separator') && this.dropSpecialCharacters === true) {
        this.maskSpecialCharacters = this.maskSpecialCharacters.filter(function (item) {
          return item !== _this5.decimalMarker;
        });
      }

      this.formControlResult(result);

      if (!this.showMaskTyped) {
        if (this.hiddenInput) {
          return result && result.length ? this.hideInput(result, this.maskExpression) : result;
        }

        return result;
      }

      var resLen = result.length;
      var prefNmask = this.prefix + this.maskIsShown;

      if (this.maskExpression.includes('H')) {
        var countSkipedSymbol = this._numberSkipedSymbols(result);

        return result + prefNmask.slice(resLen + countSkipedSymbol);
      } else if (this.maskExpression === 'IP' || this.maskExpression === 'CPF_CNPJ') {
        return result + prefNmask;
      }

      return result + prefNmask.slice(resLen);
    } // get the number of characters that were shifted

  }, {
    key: "_numberSkipedSymbols",
    value: function _numberSkipedSymbols(value) {
      var regex = /(^|\D)(\d\D)/g;
      var match = regex.exec(value);
      var countSkipedSymbol = 0;

      while (match != null) {
        countSkipedSymbol += 1;
        match = regex.exec(value);
      }

      return countSkipedSymbol;
    }
  }, {
    key: "applyValueChanges",
    value: function applyValueChanges() {
      var position = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
      var justPasted = arguments.length > 1 ? arguments[1] : undefined;
      var backspaced = arguments.length > 2 ? arguments[2] : undefined;
      var cb = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : function () {};
      var formElement = this._elementRef.nativeElement;
      formElement.value = this.applyMask(formElement.value, this.maskExpression, position, justPasted, backspaced, cb);

      if (formElement === this.document.activeElement) {
        return;
      }

      this.clearIfNotMatchFn();
    }
  }, {
    key: "hideInput",
    value: function hideInput(inputValue, maskExpression) {
      var _this6 = this;

      return inputValue.split('').map(function (curr, index) {
        if (_this6.maskAvailablePatterns && _this6.maskAvailablePatterns[maskExpression[index]] && _this6.maskAvailablePatterns[maskExpression[index]].symbol) {
          return _this6.maskAvailablePatterns[maskExpression[index]].symbol;
        }

        return curr;
      }).join('');
    } // this function is not necessary, it checks result against maskExpression

  }, {
    key: "getActualValue",
    value: function getActualValue(res) {
      var _this7 = this;

      var compare = res.split('').filter(function (symbol, i) {
        return _this7._checkSymbolMask(symbol, _this7.maskExpression[i]) || _this7.maskSpecialCharacters.includes(_this7.maskExpression[i]) && symbol === _this7.maskExpression[i];
      });

      if (compare.join('') === res) {
        return compare.join('');
      }

      return res;
    }
  }, {
    key: "shiftTypedSymbols",
    value: function shiftTypedSymbols(inputValue) {
      var _this8 = this;

      var symbolToReplace = '';
      var newInputValue = inputValue && inputValue.split('').map(function (currSymbol, index) {
        if (_this8.maskSpecialCharacters.includes(inputValue[index + 1]) && inputValue[index + 1] !== _this8.maskExpression[index + 1]) {
          symbolToReplace = currSymbol;
          return inputValue[index + 1];
        }

        if (symbolToReplace.length) {
          var replaceSymbol = symbolToReplace;
          symbolToReplace = '';
          return replaceSymbol;
        }

        return currSymbol;
      }) || [];
      return newInputValue.join('');
    }
  }, {
    key: "showMaskInInput",
    value: function showMaskInInput(inputVal) {
      if (this.showMaskTyped && !!this.shownMaskExpression) {
        if (this.maskExpression.length !== this.shownMaskExpression.length) {
          throw new Error('Mask expression must match mask placeholder length');
        } else {
          return this.shownMaskExpression;
        }
      } else if (this.showMaskTyped) {
        if (inputVal) {
          if (this.maskExpression === 'IP') {
            return this._checkForIp(inputVal);
          }

          if (this.maskExpression === 'CPF_CNPJ') {
            return this._checkForCpfCnpj(inputVal);
          }
        }

        return this.maskExpression.replace(/\w/g, this.placeHolderCharacter);
      }

      return '';
    }
  }, {
    key: "clearIfNotMatchFn",
    value: function clearIfNotMatchFn() {
      var formElement = this._elementRef.nativeElement;

      if (this.clearIfNotMatch && this.prefix.length + this.maskExpression.length + this.suffix.length !== formElement.value.replace(/_/g, '').length) {
        this.formElementProperty = ['value', ''];
        this.applyMask(formElement.value, this.maskExpression);
      }
    }
  }, {
    key: "formElementProperty",
    set: function set(_ref) {
      var _this9 = this;

      var _ref2 = (0,C_Users_SAAD_Desktop_frontend_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_4__.default)(_ref, 2),
          name = _ref2[0],
          value = _ref2[1];

      Promise.resolve().then(function () {
        return _this9._renderer.setProperty(_this9._elementRef.nativeElement, name, value);
      });
    }
  }, {
    key: "checkSpecialCharAmount",
    value: function checkSpecialCharAmount(mask) {
      var _this10 = this;

      var chars = mask.split('').filter(function (item) {
        return _this10._findSpecialChar(item);
      });
      return chars.length;
    }
  }, {
    key: "removeMask",
    value: function removeMask(inputValue) {
      return this._removeMask(this._removeSuffix(this._removePrefix(inputValue)), this.maskSpecialCharacters.concat('_').concat(this.placeHolderCharacter));
    }
  }, {
    key: "_checkForIp",
    value: function _checkForIp(inputVal) {
      if (inputVal === '#') {
        return "".concat(this.placeHolderCharacter, ".").concat(this.placeHolderCharacter, ".").concat(this.placeHolderCharacter, ".").concat(this.placeHolderCharacter);
      }

      var arr = [];

      for (var i = 0; i < inputVal.length; i++) {
        if (inputVal[i].match('\\d')) {
          arr.push(inputVal[i]);
        }
      }

      if (arr.length <= 3) {
        return "".concat(this.placeHolderCharacter, ".").concat(this.placeHolderCharacter, ".").concat(this.placeHolderCharacter);
      }

      if (arr.length > 3 && arr.length <= 6) {
        return "".concat(this.placeHolderCharacter, ".").concat(this.placeHolderCharacter);
      }

      if (arr.length > 6 && arr.length <= 9) {
        return this.placeHolderCharacter;
      }

      if (arr.length > 9 && arr.length <= 12) {
        return '';
      }

      return '';
    }
  }, {
    key: "_checkForCpfCnpj",
    value: function _checkForCpfCnpj(inputVal) {
      var cpf = "".concat(this.placeHolderCharacter).concat(this.placeHolderCharacter).concat(this.placeHolderCharacter) + ".".concat(this.placeHolderCharacter).concat(this.placeHolderCharacter).concat(this.placeHolderCharacter) + ".".concat(this.placeHolderCharacter).concat(this.placeHolderCharacter).concat(this.placeHolderCharacter) + "-".concat(this.placeHolderCharacter).concat(this.placeHolderCharacter);
      var cnpj = "".concat(this.placeHolderCharacter).concat(this.placeHolderCharacter) + ".".concat(this.placeHolderCharacter).concat(this.placeHolderCharacter).concat(this.placeHolderCharacter) + ".".concat(this.placeHolderCharacter).concat(this.placeHolderCharacter).concat(this.placeHolderCharacter) + "/".concat(this.placeHolderCharacter).concat(this.placeHolderCharacter).concat(this.placeHolderCharacter).concat(this.placeHolderCharacter) + "-".concat(this.placeHolderCharacter).concat(this.placeHolderCharacter);

      if (inputVal === '#') {
        return cpf;
      }

      var arr = [];

      for (var i = 0; i < inputVal.length; i++) {
        if (inputVal[i].match('\\d')) {
          arr.push(inputVal[i]);
        }
      }

      if (arr.length <= 3) {
        return cpf.slice(arr.length, cpf.length);
      }

      if (arr.length > 3 && arr.length <= 6) {
        return cpf.slice(arr.length + 1, cpf.length);
      }

      if (arr.length > 6 && arr.length <= 9) {
        return cpf.slice(arr.length + 2, cpf.length);
      }

      if (arr.length > 9 && arr.length < 11) {
        return cpf.slice(arr.length + 3, cpf.length);
      }

      if (arr.length === 11) {
        return '';
      }

      if (arr.length === 12) {
        if (inputVal.length === 17) {
          return cnpj.slice(16, cnpj.length);
        }

        return cnpj.slice(15, cnpj.length);
      }

      if (arr.length > 12 && arr.length <= 14) {
        return cnpj.slice(arr.length + 4, cnpj.length);
      }

      return '';
    }
    /**
     * Propogates the input value back to the Angular model by triggering the onChange function. It won't do this if writingValue
     * is true. If that is true it means we are currently in the writeValue function, which is supposed to only update the actual
     * DOM element based on the Angular model value. It should be a one way process, i.e. writeValue should not be modifying the Angular
     * model value too. Therefore, we don't trigger onChange in this scenario.
     * @param inputValue the current form input value
     */

  }, {
    key: "formControlResult",
    value: function formControlResult(inputValue) {
      if (this.writingValue || this.maskChanged) {
        this.maskChanged = false;
        return;
      }

      if (Array.isArray(this.dropSpecialCharacters)) {
        this.onChange(this._toNumber(this._removeMask(this._removeSuffix(this._removePrefix(inputValue)), this.dropSpecialCharacters)));
      } else if (this.dropSpecialCharacters) {
        this.onChange(this._toNumber(this._checkSymbols(inputValue)));
      } else {
        this.onChange(this._removeSuffix(inputValue));
      }
    }
  }, {
    key: "_toNumber",
    value: function _toNumber(value) {
      if (!this.isNumberValue || value === '') {
        return value;
      }

      var num = Number(value);
      return Number.isNaN(num) ? value : num;
    }
  }, {
    key: "_removeMask",
    value: function _removeMask(value, specialCharactersForRemove) {
      return value ? value.replace(this._regExpForRemove(specialCharactersForRemove), '') : value;
    }
  }, {
    key: "_removePrefix",
    value: function _removePrefix(value) {
      if (!this.prefix) {
        return value;
      }

      return value ? value.replace(this.prefix, '') : value;
    }
  }, {
    key: "_removeSuffix",
    value: function _removeSuffix(value) {
      if (!this.suffix) {
        return value;
      }

      return value ? value.replace(this.suffix, '') : value;
    }
  }, {
    key: "_retrieveSeparatorValue",
    value: function _retrieveSeparatorValue(result) {
      return this._removeMask(this._removeSuffix(this._removePrefix(result)), this.maskSpecialCharacters);
    }
  }, {
    key: "_regExpForRemove",
    value: function _regExpForRemove(specialCharactersForRemove) {
      return new RegExp(specialCharactersForRemove.map(function (item) {
        return "\\".concat(item);
      }).join('|'), 'gi');
    }
  }, {
    key: "_checkSymbols",
    value: function _checkSymbols(result) {
      if (result === '') {
        return result;
      }

      var separatorPrecision = this._retrieveSeparatorPrecision(this.maskExpression);

      var separatorValue = this._retrieveSeparatorValue(result);

      if (this.decimalMarker !== '.') {
        separatorValue = separatorValue.replace(this.decimalMarker, '.');
      }

      if (!this.isNumberValue) {
        return separatorValue;
      }

      if (separatorPrecision) {
        if (result === this.decimalMarker) {
          return null;
        }

        return this._checkPrecision(this.maskExpression, separatorValue);
      } else {
        return Number(separatorValue);
      }
    } // TODO should think about helpers or separting decimal precision to own property

  }, {
    key: "_retrieveSeparatorPrecision",
    value: function _retrieveSeparatorPrecision(maskExpretion) {
      var matcher = maskExpretion.match(new RegExp("^separator\\.([^d]*)"));
      return matcher ? Number(matcher[1]) : null;
    }
  }, {
    key: "_checkPrecision",
    value: function _checkPrecision(separatorExpression, separatorValue) {
      if (separatorExpression.indexOf('2') > 0) {
        return Number(separatorValue).toFixed(2);
      }

      return Number(separatorValue);
    }
  }]);

  return MaskService;
}(MaskApplierService);

MaskService.ɵfac = function MaskService_Factory(t) {
  return new (t || MaskService)(_angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵinject"](_angular_common__WEBPACK_IMPORTED_MODULE_9__.DOCUMENT), _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵinject"](config), _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵinject"](_angular_core__WEBPACK_IMPORTED_MODULE_8__.ElementRef), _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵinject"](_angular_core__WEBPACK_IMPORTED_MODULE_8__.Renderer2));
};

MaskService.ɵprov = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵdefineInjectable"]({
  token: MaskService,
  factory: MaskService.ɵfac
});

MaskService.ctorParameters = function () {
  return [{
    type: undefined,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Inject,
      args: [_angular_common__WEBPACK_IMPORTED_MODULE_9__.DOCUMENT]
    }]
  }, {
    type: undefined,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Inject,
      args: [config]
    }]
  }, {
    type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.ElementRef
  }, {
    type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Renderer2
  }];
};

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵsetClassMetadata"](MaskService, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Injectable
  }], function () {
    return [{
      type: undefined,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Inject,
        args: [_angular_common__WEBPACK_IMPORTED_MODULE_9__.DOCUMENT]
      }]
    }, {
      type: undefined,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Inject,
        args: [config]
      }]
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.ElementRef
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Renderer2
    }];
  }, null);
})(); // tslint:disable deprecation
// tslint:disable no-input-rename


var MaskDirective = /*#__PURE__*/function () {
  function MaskDirective(document, _maskService, _config) {
    (0,C_Users_SAAD_Desktop_frontend_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_5__.default)(this, MaskDirective);

    this.document = document;
    this._maskService = _maskService;
    this._config = _config;
    this.maskExpression = '';
    this.specialCharacters = [];
    this.patterns = {};
    this.prefix = '';
    this.suffix = '';
    this.thousandSeparator = ' ';
    this.decimalMarker = '.';
    this.dropSpecialCharacters = null;
    this.hiddenInput = null;
    this.showMaskTyped = null;
    this.placeHolderCharacter = null;
    this.shownMaskExpression = null;
    this.showTemplate = null;
    this.clearIfNotMatch = null;
    this.validation = null;
    this.separatorLimit = null;
    this.allowNegativeNumbers = null;
    this.leadZeroDateTime = null;
    this._maskValue = '';
    this._position = null;
    this._maskExpressionArray = [];
    this._justPasted = false;

    this.onChange = function (_) {};

    this.onTouch = function () {};
  }

  (0,C_Users_SAAD_Desktop_frontend_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_6__.default)(MaskDirective, [{
    key: "ngOnChanges",
    value: function ngOnChanges(changes) {
      var maskExpression = changes.maskExpression,
          specialCharacters = changes.specialCharacters,
          patterns = changes.patterns,
          prefix = changes.prefix,
          suffix = changes.suffix,
          thousandSeparator = changes.thousandSeparator,
          decimalMarker = changes.decimalMarker,
          dropSpecialCharacters = changes.dropSpecialCharacters,
          hiddenInput = changes.hiddenInput,
          showMaskTyped = changes.showMaskTyped,
          placeHolderCharacter = changes.placeHolderCharacter,
          shownMaskExpression = changes.shownMaskExpression,
          showTemplate = changes.showTemplate,
          clearIfNotMatch = changes.clearIfNotMatch,
          validation = changes.validation,
          separatorLimit = changes.separatorLimit,
          allowNegativeNumbers = changes.allowNegativeNumbers,
          leadZeroDateTime = changes.leadZeroDateTime;

      if (maskExpression) {
        if (maskExpression.currentValue !== maskExpression.previousValue && !maskExpression.firstChange) {
          this._maskService.maskChanged = true;
        }

        this._maskValue = maskExpression.currentValue || '';

        if (maskExpression.currentValue && maskExpression.currentValue.split('||').length > 1) {
          this._maskExpressionArray = maskExpression.currentValue.split('||').sort(function (a, b) {
            return a.length - b.length;
          });
          this._maskValue = this._maskExpressionArray[0];
          this.maskExpression = this._maskExpressionArray[0];
          this._maskService.maskExpression = this._maskExpressionArray[0];
        }
      }

      if (specialCharacters) {
        if (!specialCharacters.currentValue || !Array.isArray(specialCharacters.currentValue)) {
          return;
        } else {
          this._maskService.maskSpecialCharacters = specialCharacters.currentValue || [];
        }
      } // Only overwrite the mask available patterns if a pattern has actually been passed in


      if (patterns && patterns.currentValue) {
        this._maskService.maskAvailablePatterns = patterns.currentValue;
      }

      if (prefix) {
        this._maskService.prefix = prefix.currentValue;
      }

      if (suffix) {
        this._maskService.suffix = suffix.currentValue;
      }

      if (thousandSeparator) {
        this._maskService.thousandSeparator = thousandSeparator.currentValue;
      }

      if (decimalMarker) {
        this._maskService.decimalMarker = decimalMarker.currentValue;
      }

      if (dropSpecialCharacters) {
        this._maskService.dropSpecialCharacters = dropSpecialCharacters.currentValue;
      }

      if (hiddenInput) {
        this._maskService.hiddenInput = hiddenInput.currentValue;
      }

      if (showMaskTyped) {
        this._maskService.showMaskTyped = showMaskTyped.currentValue;
      }

      if (placeHolderCharacter) {
        this._maskService.placeHolderCharacter = placeHolderCharacter.currentValue;
      }

      if (shownMaskExpression) {
        this._maskService.shownMaskExpression = shownMaskExpression.currentValue;
      }

      if (showTemplate) {
        this._maskService.showTemplate = showTemplate.currentValue;
      }

      if (clearIfNotMatch) {
        this._maskService.clearIfNotMatch = clearIfNotMatch.currentValue;
      }

      if (validation) {
        this._maskService.validation = validation.currentValue;
      }

      if (separatorLimit) {
        this._maskService.separatorLimit = separatorLimit.currentValue;
      }

      if (allowNegativeNumbers) {
        this._maskService.allowNegativeNumbers = allowNegativeNumbers.currentValue;

        if (this._maskService.allowNegativeNumbers) {
          this._maskService.maskSpecialCharacters = this._maskService.maskSpecialCharacters.filter(function (c) {
            return c !== '-';
          });
        }
      }

      if (leadZeroDateTime) {
        this._maskService.leadZeroDateTime = leadZeroDateTime.currentValue;
      }

      this._applyMask();
    } // tslint:disable-next-line: cyclomatic-complexity

  }, {
    key: "validate",
    value: function validate(_ref3) {
      var _this11 = this;

      var value = _ref3.value;

      if (!this._maskService.validation || !this._maskValue) {
        return null;
      }

      if (this._maskService.ipError) {
        return this._createValidationError(value);
      }

      if (this._maskService.cpfCnpjError) {
        return this._createValidationError(value);
      }

      if (this._maskValue.startsWith('separator')) {
        return null;
      }

      if (withoutValidation.includes(this._maskValue)) {
        return null;
      }

      if (this._maskService.clearIfNotMatch) {
        return null;
      }

      if (timeMasks.includes(this._maskValue)) {
        return this._validateTime(value);
      }

      if (value && value.toString().length >= 1) {
        var counterOfOpt = 0;

        var _loop = function _loop(key) {
          if (_this11._maskService.maskAvailablePatterns[key].optional && _this11._maskService.maskAvailablePatterns[key].optional === true) {
            if (_this11._maskValue.indexOf(key) !== _this11._maskValue.lastIndexOf(key)) {
              var opt = _this11._maskValue.split('').filter(function (i) {
                return i === key;
              }).join('');

              counterOfOpt += opt.length;
            } else if (_this11._maskValue.indexOf(key) !== -1) {
              counterOfOpt++;
            }

            if (_this11._maskValue.indexOf(key) !== -1 && value.toString().length >= _this11._maskValue.indexOf(key)) {
              return {
                v: null
              };
            }

            if (counterOfOpt === _this11._maskValue.length) {
              return {
                v: null
              };
            }
          }
        };

        for (var key in this._maskService.maskAvailablePatterns) {
          var _ret = _loop(key);

          if (typeof _ret === "object") return _ret.v;
        }

        if (this._maskValue.indexOf('{') === 1 && value.toString().length === this._maskValue.length + Number(this._maskValue.split('{')[1].split('}')[0]) - 4) {
          return null;
        }

        if (this._maskValue.indexOf('*') === 1 || this._maskValue.indexOf('?') === 1) {
          return null;
        } else if (this._maskValue.indexOf('*') > 1 && value.toString().length < this._maskValue.indexOf('*') || this._maskValue.indexOf('?') > 1 && value.toString().length < this._maskValue.indexOf('?') || this._maskValue.indexOf('{') === 1) {
          return this._createValidationError(value);
        }

        if (this._maskValue.indexOf('*') === -1 || this._maskValue.indexOf('?') === -1) {
          var length = this._maskService.dropSpecialCharacters ? this._maskValue.length - this._maskService.checkSpecialCharAmount(this._maskValue) - counterOfOpt : this._maskValue.length - counterOfOpt;

          if (value.toString().length < length) {
            return this._createValidationError(value);
          }
        }
      }

      return null;
    }
  }, {
    key: "onPaste",
    value: function onPaste() {
      this._justPasted = true;
    }
  }, {
    key: "onInput",
    value: function onInput(e) {
      var _this12 = this;

      var el = e.target;
      this._inputValue = el.value;

      this._setMask();

      if (!this._maskValue) {
        this.onChange(el.value);
        return;
      }

      var position = el.selectionStart === 1 ? el.selectionStart + this._maskService.prefix.length : el.selectionStart;
      var caretShift = 0;
      var backspaceShift = false;

      this._maskService.applyValueChanges(position, this._justPasted, this._code === 'Backspace' || this._code === 'Delete', function (shift, _backspaceShift) {
        _this12._justPasted = false;
        caretShift = shift;
        backspaceShift = _backspaceShift;
      }); // only set the selection if the element is active


      if (this.document.activeElement !== el) {
        return;
      }

      this._position = this._position === 1 && this._inputValue.length === 1 ? null : this._position;
      var positionToApply = this._position ? this._inputValue.length + position + caretShift : position + (this._code === 'Backspace' && !backspaceShift ? 0 : caretShift);

      if (positionToApply > this._getActualInputLength()) {
        positionToApply = this._getActualInputLength();
      }

      if (positionToApply < 0) {
        positionToApply = 0;
      }

      el.setSelectionRange(positionToApply, positionToApply);
      this._position = null;
    }
  }, {
    key: "onBlur",
    value: function onBlur() {
      if (this._maskValue) {
        this._maskService.clearIfNotMatchFn();
      }

      this.onTouch();
    }
  }, {
    key: "onFocus",
    value: function onFocus(e) {
      if (!this._maskValue) {
        return;
      }

      var el = e.target;
      var posStart = 0;
      var posEnd = 0;

      if (el !== null && el.selectionStart !== null && el.selectionStart === el.selectionEnd && el.selectionStart > this._maskService.prefix.length && // tslint:disable-next-line
      e.keyCode !== 38) {
        if (this._maskService.showMaskTyped) {
          // We are showing the mask in the input
          this._maskService.maskIsShown = this._maskService.showMaskInInput();

          if (el.setSelectionRange && this._maskService.prefix + this._maskService.maskIsShown === el.value) {
            // the input ONLY contains the mask, so position the cursor at the start
            el.focus();
            el.setSelectionRange(posStart, posEnd);
          } else {
            // the input contains some characters already
            if (el.selectionStart > this._maskService.actualValue.length) {
              // if the user clicked beyond our value's length, position the cursor at the end of our value
              el.setSelectionRange(this._maskService.actualValue.length, this._maskService.actualValue.length);
            }
          }
        }
      }

      var nextValue = !el.value || el.value === this._maskService.prefix ? this._maskService.prefix + this._maskService.maskIsShown : el.value;
      /** Fix of cursor position jumping to end in most browsers no matter where cursor is inserted onFocus */

      if (el.value !== nextValue) {
        el.value = nextValue;
      }
      /** fix of cursor position with prefix when mouse click occur */


      if ((el.selectionStart || el.selectionEnd) <= this._maskService.prefix.length) {
        el.selectionStart = this._maskService.prefix.length;
        return;
      }
      /** select only inserted text */


      if (el.selectionEnd > this._getActualInputLength()) {
        el.selectionEnd = this._getActualInputLength();
      }
    } // tslint:disable-next-line: cyclomatic-complexity

  }, {
    key: "onKeyDown",
    value: function onKeyDown(e) {
      var _a;

      if (!this._maskValue) {
        return;
      }

      this._code = e.code ? e.code : e.key;
      var el = e.target;
      this._inputValue = el.value;

      this._setMask();

      if (e.keyCode === 38) {
        e.preventDefault();
      }

      if (e.keyCode === 37 || e.keyCode === 8 || e.keyCode === 46) {
        if (e.keyCode === 8 && el.value.length === 0) {
          el.selectionStart = el.selectionEnd;
        }

        if (e.keyCode === 8 && el.selectionStart !== 0) {
          // If specialChars is false, (shouldn't ever happen) then set to the defaults
          this.specialCharacters = ((_a = this.specialCharacters) === null || _a === void 0 ? void 0 : _a.length) ? this.specialCharacters : this._config.specialCharacters;

          if (this.prefix.length > 1 && el.selectionStart <= this.prefix.length) {
            el.setSelectionRange(this.prefix.length, this.prefix.length);
          } else {
            if (this._inputValue.length !== el.selectionStart && el.selectionStart !== 1) {
              while (this.specialCharacters.includes(this._inputValue[el.selectionStart - 1].toString()) && (this.prefix.length >= 1 && el.selectionStart > this.prefix.length || this.prefix.length === 0)) {
                el.setSelectionRange(el.selectionStart - 1, el.selectionStart - 1);
              }
            }

            this.suffixCheckOnPressDelete(e.keyCode, el);
          }
        }

        this.suffixCheckOnPressDelete(e.keyCode, el);

        if (this._maskService.prefix.length && el.selectionStart <= this._maskService.prefix.length && el.selectionEnd <= this._maskService.prefix.length) {
          e.preventDefault();
        }

        var cursorStart = el.selectionStart; // this.onFocus(e);

        if (e.keyCode === 8 && !el.readOnly && cursorStart === 0 && el.selectionEnd === el.value.length && el.value.length !== 0) {
          this._position = this._maskService.prefix ? this._maskService.prefix.length : 0;

          this._maskService.applyMask(this._maskService.prefix, this._maskService.maskExpression, this._position);
        }
      }

      if (!!this.suffix && this.suffix.length > 1 && this._inputValue.length - this.suffix.length < el.selectionStart) {
        el.setSelectionRange(this._inputValue.length - this.suffix.length, this._inputValue.length);
      } else if (e.keyCode === 65 && e.ctrlKey === true || e.keyCode === 65 && e.metaKey === true // Cmd + A (Mac)
      ) {
        el.setSelectionRange(0, this._getActualInputLength());
        e.preventDefault();
      }

      this._maskService.selStart = el.selectionStart;
      this._maskService.selEnd = el.selectionEnd;
    }
    /** It writes the value in the input */

  }, {
    key: "writeValue",
    value: function writeValue(inputValue) {
      return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, /*#__PURE__*/C_Users_SAAD_Desktop_frontend_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_7___default().mark(function _callee() {
        return C_Users_SAAD_Desktop_frontend_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_7___default().wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if (typeof inputValue === 'object' && inputValue !== null && 'value' in inputValue) {
                  if ('disable' in inputValue) {
                    this.setDisabledState(Boolean(inputValue.disable));
                  }

                  inputValue = inputValue.value;
                }

                if (inputValue === undefined) {
                  inputValue = '';
                }

                if (typeof inputValue === 'number') {
                  inputValue = String(inputValue);
                  inputValue = this.decimalMarker !== '.' ? inputValue.replace('.', this.decimalMarker) : inputValue;
                  this._maskService.isNumberValue = true;
                }

                this._inputValue = inputValue;

                this._setMask();

                if (inputValue && this._maskService.maskExpression || this._maskService.maskExpression && (this._maskService.prefix || this._maskService.showMaskTyped)) {
                  // Let the service we know we are writing value so that triggering onChange function wont happen during applyMask
                  this._maskService.writingValue = true;
                  this._maskService.formElementProperty = ['value', this._maskService.applyMask(inputValue, this._maskService.maskExpression)]; // Let the service know we've finished writing value

                  this._maskService.writingValue = false;
                } else {
                  this._maskService.formElementProperty = ['value', inputValue];
                }

                this._inputValue = inputValue;

              case 7:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));
    }
  }, {
    key: "registerOnChange",
    value: function registerOnChange(fn) {
      this.onChange = fn;
      this._maskService.onChange = this.onChange;
    }
  }, {
    key: "registerOnTouched",
    value: function registerOnTouched(fn) {
      this.onTouch = fn;
    }
  }, {
    key: "suffixCheckOnPressDelete",
    value: function suffixCheckOnPressDelete(keyCode, el) {
      if (keyCode === 46 && this.suffix.length > 0) {
        if (this._inputValue.length - this.suffix.length <= el.selectionStart) {
          el.setSelectionRange(this._inputValue.length - this.suffix.length, this._inputValue.length);
        }
      }

      if (keyCode === 8) {
        if (this.suffix.length > 1 && this._inputValue.length - this.suffix.length < el.selectionStart) {
          el.setSelectionRange(this._inputValue.length - this.suffix.length, this._inputValue.length);
        }

        if (this.suffix.length === 1 && this._inputValue.length === el.selectionStart) {
          el.setSelectionRange(el.selectionStart - 1, el.selectionStart - 1);
        }
      }
    }
    /** It disables the input element */

  }, {
    key: "setDisabledState",
    value: function setDisabledState(isDisabled) {
      this._maskService.formElementProperty = ['disabled', isDisabled];
    }
  }, {
    key: "_repeatPatternSymbols",
    value: function _repeatPatternSymbols(maskExp) {
      var _this13 = this;

      return maskExp.match(/{[0-9]+}/) && maskExp.split('').reduce(function (accum, currval, index) {
        _this13._start = currval === '{' ? index : _this13._start;

        if (currval !== '}') {
          return _this13._maskService._findSpecialChar(currval) ? accum + currval : accum;
        }

        _this13._end = index;
        var repeatNumber = Number(maskExp.slice(_this13._start + 1, _this13._end));
        var replaceWith = new Array(repeatNumber + 1).join(maskExp[_this13._start - 1]);
        return accum + replaceWith;
      }, '') || maskExp;
    } // tslint:disable-next-line:no-any

  }, {
    key: "_applyMask",
    value: function _applyMask() {
      this._maskService.maskExpression = this._repeatPatternSymbols(this._maskValue || '');
      this._maskService.formElementProperty = ['value', this._maskService.applyMask(this._inputValue, this._maskService.maskExpression)];
    }
  }, {
    key: "_validateTime",
    value: function _validateTime(value) {
      var rowMaskLen = this._maskValue.split('').filter(function (s) {
        return s !== ':';
      }).length;

      if (!value) {
        return null; // Don't validate empty values to allow for optional form control
      }

      if (+value[value.length - 1] === 0 && value.length < rowMaskLen || value.length <= rowMaskLen - 2) {
        return this._createValidationError(value);
      }

      return null;
    }
  }, {
    key: "_getActualInputLength",
    value: function _getActualInputLength() {
      return this._maskService.actualValue.length || this._maskService.actualValue.length + this._maskService.prefix.length;
    }
  }, {
    key: "_createValidationError",
    value: function _createValidationError(actualValue) {
      return {
        mask: {
          requiredMask: this._maskValue,
          actualValue: actualValue
        }
      };
    }
  }, {
    key: "_setMask",
    value: function _setMask() {
      var _this14 = this;

      if (this._maskExpressionArray.length > 0) {
        this._maskExpressionArray.some(function (mask) {
          var _a, _b;

          var test = ((_a = _this14._maskService.removeMask(_this14._inputValue)) === null || _a === void 0 ? void 0 : _a.length) <= ((_b = _this14._maskService.removeMask(mask)) === null || _b === void 0 ? void 0 : _b.length);

          if (_this14._inputValue && test) {
            _this14._maskValue = mask;
            _this14.maskExpression = mask;
            _this14._maskService.maskExpression = mask;
            return test;
          } else {
            _this14._maskValue = _this14._maskExpressionArray[_this14._maskExpressionArray.length - 1];
            _this14.maskExpression = _this14._maskExpressionArray[_this14._maskExpressionArray.length - 1];
            _this14._maskService.maskExpression = _this14._maskExpressionArray[_this14._maskExpressionArray.length - 1];
          }
        });
      }
    }
  }]);

  return MaskDirective;
}();

MaskDirective.ɵfac = function MaskDirective_Factory(t) {
  return new (t || MaskDirective)(_angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵdirectiveInject"](_angular_common__WEBPACK_IMPORTED_MODULE_9__.DOCUMENT), _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵdirectiveInject"](MaskService), _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵdirectiveInject"](config));
};

MaskDirective.ɵdir = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵdefineDirective"]({
  type: MaskDirective,
  selectors: [["input", "mask", ""], ["textarea", "mask", ""]],
  hostBindings: function MaskDirective_HostBindings(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵlistener"]("paste", function MaskDirective_paste_HostBindingHandler() {
        return ctx.onPaste();
      })("input", function MaskDirective_input_HostBindingHandler($event) {
        return ctx.onInput($event);
      })("blur", function MaskDirective_blur_HostBindingHandler() {
        return ctx.onBlur();
      })("click", function MaskDirective_click_HostBindingHandler($event) {
        return ctx.onFocus($event);
      })("keydown", function MaskDirective_keydown_HostBindingHandler($event) {
        return ctx.onKeyDown($event);
      });
    }
  },
  inputs: {
    maskExpression: ["mask", "maskExpression"],
    specialCharacters: "specialCharacters",
    patterns: "patterns",
    prefix: "prefix",
    suffix: "suffix",
    thousandSeparator: "thousandSeparator",
    decimalMarker: "decimalMarker",
    dropSpecialCharacters: "dropSpecialCharacters",
    hiddenInput: "hiddenInput",
    showMaskTyped: "showMaskTyped",
    placeHolderCharacter: "placeHolderCharacter",
    shownMaskExpression: "shownMaskExpression",
    showTemplate: "showTemplate",
    clearIfNotMatch: "clearIfNotMatch",
    validation: "validation",
    separatorLimit: "separatorLimit",
    allowNegativeNumbers: "allowNegativeNumbers",
    leadZeroDateTime: "leadZeroDateTime"
  },
  features: [_angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵProvidersFeature"]([{
    provide: _angular_forms__WEBPACK_IMPORTED_MODULE_11__.NG_VALUE_ACCESSOR,
    useExisting: (0,_angular_core__WEBPACK_IMPORTED_MODULE_8__.forwardRef)(function () {
      return MaskDirective;
    }),
    multi: true
  }, {
    provide: _angular_forms__WEBPACK_IMPORTED_MODULE_11__.NG_VALIDATORS,
    useExisting: (0,_angular_core__WEBPACK_IMPORTED_MODULE_8__.forwardRef)(function () {
      return MaskDirective;
    }),
    multi: true
  }, MaskService]), _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵNgOnChangesFeature"]]
});

MaskDirective.ctorParameters = function () {
  return [{
    type: undefined,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Inject,
      args: [_angular_common__WEBPACK_IMPORTED_MODULE_9__.DOCUMENT]
    }]
  }, {
    type: MaskService
  }, {
    type: undefined,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Inject,
      args: [config]
    }]
  }];
};

MaskDirective.propDecorators = {
  maskExpression: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Input,
    args: ['mask']
  }],
  specialCharacters: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Input
  }],
  patterns: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Input
  }],
  prefix: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Input
  }],
  suffix: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Input
  }],
  thousandSeparator: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Input
  }],
  decimalMarker: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Input
  }],
  dropSpecialCharacters: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Input
  }],
  hiddenInput: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Input
  }],
  showMaskTyped: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Input
  }],
  placeHolderCharacter: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Input
  }],
  shownMaskExpression: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Input
  }],
  showTemplate: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Input
  }],
  clearIfNotMatch: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Input
  }],
  validation: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Input
  }],
  separatorLimit: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Input
  }],
  allowNegativeNumbers: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Input
  }],
  leadZeroDateTime: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Input
  }],
  onPaste: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.HostListener,
    args: ['paste']
  }],
  onInput: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.HostListener,
    args: ['input', ['$event']]
  }],
  onBlur: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.HostListener,
    args: ['blur']
  }],
  onFocus: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.HostListener,
    args: ['click', ['$event']]
  }],
  onKeyDown: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.HostListener,
    args: ['keydown', ['$event']]
  }]
};

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵsetClassMetadata"](MaskDirective, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Directive,
    args: [{
      selector: 'input[mask], textarea[mask]',
      providers: [{
        provide: _angular_forms__WEBPACK_IMPORTED_MODULE_11__.NG_VALUE_ACCESSOR,
        useExisting: (0,_angular_core__WEBPACK_IMPORTED_MODULE_8__.forwardRef)(function () {
          return MaskDirective;
        }),
        multi: true
      }, {
        provide: _angular_forms__WEBPACK_IMPORTED_MODULE_11__.NG_VALIDATORS,
        useExisting: (0,_angular_core__WEBPACK_IMPORTED_MODULE_8__.forwardRef)(function () {
          return MaskDirective;
        }),
        multi: true
      }, MaskService]
    }]
  }], function () {
    return [{
      type: undefined,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Inject,
        args: [_angular_common__WEBPACK_IMPORTED_MODULE_9__.DOCUMENT]
      }]
    }, {
      type: MaskService
    }, {
      type: undefined,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Inject,
        args: [config]
      }]
    }];
  }, {
    maskExpression: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Input,
      args: ['mask']
    }],
    specialCharacters: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Input
    }],
    patterns: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Input
    }],
    prefix: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Input
    }],
    suffix: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Input
    }],
    thousandSeparator: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Input
    }],
    decimalMarker: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Input
    }],
    dropSpecialCharacters: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Input
    }],
    hiddenInput: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Input
    }],
    showMaskTyped: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Input
    }],
    placeHolderCharacter: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Input
    }],
    shownMaskExpression: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Input
    }],
    showTemplate: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Input
    }],
    clearIfNotMatch: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Input
    }],
    validation: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Input
    }],
    separatorLimit: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Input
    }],
    allowNegativeNumbers: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Input
    }],
    leadZeroDateTime: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Input
    }],
    onPaste: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.HostListener,
      args: ['paste']
    }],
    onInput: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.HostListener,
      args: ['input', ['$event']]
    }],
    onBlur: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.HostListener,
      args: ['blur']
    }],
    onFocus: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.HostListener,
      args: ['click', ['$event']]
    }],
    // tslint:disable-next-line: cyclomatic-complexity
    onKeyDown: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.HostListener,
      args: ['keydown', ['$event']]
    }]
  });
})();

var MaskPipe = /*#__PURE__*/function () {
  function MaskPipe(_maskService) {
    (0,C_Users_SAAD_Desktop_frontend_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_5__.default)(this, MaskPipe);

    this._maskService = _maskService;
  }

  (0,C_Users_SAAD_Desktop_frontend_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_6__.default)(MaskPipe, [{
    key: "transform",
    value: function transform(value, mask) {
      var thousandSeparator = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

      if (!value && typeof value !== 'number') {
        return '';
      }

      if (thousandSeparator) {
        this._maskService.thousandSeparator = thousandSeparator;
      }

      if (typeof mask === 'string') {
        return this._maskService.applyMask("".concat(value), mask);
      }

      return this._maskService.applyMaskWithPattern("".concat(value), mask);
    }
  }]);

  return MaskPipe;
}();

MaskPipe.ɵfac = function MaskPipe_Factory(t) {
  return new (t || MaskPipe)(_angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵdirectiveInject"](MaskApplierService, 16));
};

MaskPipe.ɵpipe = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵdefinePipe"]({
  name: "mask",
  type: MaskPipe,
  pure: true
});

MaskPipe.ctorParameters = function () {
  return [{
    type: MaskApplierService
  }];
};

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵsetClassMetadata"](MaskPipe, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Pipe,
    args: [{
      name: 'mask',
      pure: true
    }]
  }], function () {
    return [{
      type: MaskApplierService
    }];
  }, null);
})();

var NgxMaskModule = /*#__PURE__*/function () {
  function NgxMaskModule() {
    (0,C_Users_SAAD_Desktop_frontend_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_5__.default)(this, NgxMaskModule);
  }

  (0,C_Users_SAAD_Desktop_frontend_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_6__.default)(NgxMaskModule, null, [{
    key: "forRoot",
    value: function forRoot(configValue) {
      return {
        ngModule: NgxMaskModule,
        providers: [{
          provide: NEW_CONFIG,
          useValue: configValue
        }, {
          provide: INITIAL_CONFIG,
          useValue: initialConfig
        }, {
          provide: config,
          useFactory: _configFactory,
          deps: [INITIAL_CONFIG, NEW_CONFIG]
        }, MaskApplierService]
      };
    }
  }, {
    key: "forChild",
    value: function forChild() {
      return {
        ngModule: NgxMaskModule
      };
    }
  }]);

  return NgxMaskModule;
}();

NgxMaskModule.ɵfac = function NgxMaskModule_Factory(t) {
  return new (t || NgxMaskModule)();
};

NgxMaskModule.ɵmod = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵdefineNgModule"]({
  type: NgxMaskModule
});
NgxMaskModule.ɵinj = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵdefineInjector"]({});

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵsetClassMetadata"](NgxMaskModule, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.NgModule,
    args: [{
      exports: [MaskDirective, MaskPipe],
      declarations: [MaskDirective, MaskPipe]
    }]
  }], null, null);
})();

(function () {
  (typeof ngJitMode === "undefined" || ngJitMode) && _angular_core__WEBPACK_IMPORTED_MODULE_8__["ɵɵsetNgModuleScope"](NgxMaskModule, {
    declarations: [MaskDirective, MaskPipe],
    exports: [MaskDirective, MaskPipe]
  });
})();
/**
 * @internal
 */


function _configFactory(initConfig, configValue) {
  return configValue instanceof Function ? Object.assign(Object.assign({}, initConfig), configValue()) : Object.assign(Object.assign({}, initConfig), configValue);
}

var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

(function () {
  if (!commonjsGlobal.KeyboardEvent) {
    commonjsGlobal.KeyboardEvent = function (_eventType, _init) {};
  }
})();
/**
 * Generated bundle index. Do not edit.
 */


 //# sourceMappingURL=ngx-mask.js.map

/***/ }),

/***/ 67941:
/*!*****************************************************!*\
  !*** ./node_modules/regenerator-runtime/runtime.js ***!
  \*****************************************************/
/***/ (function(module) {

/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var runtime = function (exports) {
  "use strict";

  var Op = Object.prototype;
  var hasOwn = Op.hasOwnProperty;
  var undefined; // More compressible than void 0.

  var $Symbol = typeof Symbol === "function" ? Symbol : {};
  var iteratorSymbol = $Symbol.iterator || "@@iterator";
  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

  function define(obj, key, value) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
    return obj[key];
  }

  try {
    // IE 8 has a broken Object.defineProperty that only works on DOM objects.
    define({}, "");
  } catch (err) {
    define = function define(obj, key, value) {
      return obj[key] = value;
    };
  }

  function wrap(innerFn, outerFn, self, tryLocsList) {
    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
    var generator = Object.create(protoGenerator.prototype);
    var context = new Context(tryLocsList || []); // The ._invoke method unifies the implementations of the .next,
    // .throw, and .return methods.

    generator._invoke = makeInvokeMethod(innerFn, self, context);
    return generator;
  }

  exports.wrap = wrap; // Try/catch helper to minimize deoptimizations. Returns a completion
  // record like context.tryEntries[i].completion. This interface could
  // have been (and was previously) designed to take a closure to be
  // invoked without arguments, but in all the cases we care about we
  // already have an existing method we want to call, so there's no need
  // to create a new function object. We can even get away with assuming
  // the method takes exactly one argument, since that happens to be true
  // in every case, so we don't have to touch the arguments object. The
  // only additional allocation required is the completion record, which
  // has a stable shape and so hopefully should be cheap to allocate.

  function tryCatch(fn, obj, arg) {
    try {
      return {
        type: "normal",
        arg: fn.call(obj, arg)
      };
    } catch (err) {
      return {
        type: "throw",
        arg: err
      };
    }
  }

  var GenStateSuspendedStart = "suspendedStart";
  var GenStateSuspendedYield = "suspendedYield";
  var GenStateExecuting = "executing";
  var GenStateCompleted = "completed"; // Returning this object from the innerFn has the same effect as
  // breaking out of the dispatch switch statement.

  var ContinueSentinel = {}; // Dummy constructor functions that we use as the .constructor and
  // .constructor.prototype properties for functions that return Generator
  // objects. For full spec compliance, you may wish to configure your
  // minifier not to mangle the names of these two functions.

  function Generator() {}

  function GeneratorFunction() {}

  function GeneratorFunctionPrototype() {} // This is a polyfill for %IteratorPrototype% for environments that
  // don't natively support it.


  var IteratorPrototype = {};

  IteratorPrototype[iteratorSymbol] = function () {
    return this;
  };

  var getProto = Object.getPrototypeOf;
  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));

  if (NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
    // This environment has a native %IteratorPrototype%; use it instead
    // of the polyfill.
    IteratorPrototype = NativeIteratorPrototype;
  }

  var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);
  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
  GeneratorFunctionPrototype.constructor = GeneratorFunction;
  GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"); // Helper for defining the .next, .throw, and .return methods of the
  // Iterator interface in terms of a single ._invoke method.

  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function (method) {
      define(prototype, method, function (arg) {
        return this._invoke(method, arg);
      });
    });
  }

  exports.isGeneratorFunction = function (genFun) {
    var ctor = typeof genFun === "function" && genFun.constructor;
    return ctor ? ctor === GeneratorFunction || // For the native GeneratorFunction constructor, the best we can
    // do is to check its .name property.
    (ctor.displayName || ctor.name) === "GeneratorFunction" : false;
  };

  exports.mark = function (genFun) {
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
    } else {
      genFun.__proto__ = GeneratorFunctionPrototype;
      define(genFun, toStringTagSymbol, "GeneratorFunction");
    }

    genFun.prototype = Object.create(Gp);
    return genFun;
  }; // Within the body of any async function, `await x` is transformed to
  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
  // `hasOwn.call(value, "__await")` to determine if the yielded value is
  // meant to be awaited.


  exports.awrap = function (arg) {
    return {
      __await: arg
    };
  };

  function AsyncIterator(generator, PromiseImpl) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);

      if (record.type === "throw") {
        reject(record.arg);
      } else {
        var result = record.arg;
        var value = result.value;

        if (value && typeof value === "object" && hasOwn.call(value, "__await")) {
          return PromiseImpl.resolve(value.__await).then(function (value) {
            invoke("next", value, resolve, reject);
          }, function (err) {
            invoke("throw", err, resolve, reject);
          });
        }

        return PromiseImpl.resolve(value).then(function (unwrapped) {
          // When a yielded Promise is resolved, its final value becomes
          // the .value of the Promise<{value,done}> result for the
          // current iteration.
          result.value = unwrapped;
          resolve(result);
        }, function (error) {
          // If a rejected Promise was yielded, throw the rejection back
          // into the async generator function so it can be handled there.
          return invoke("throw", error, resolve, reject);
        });
      }
    }

    var previousPromise;

    function enqueue(method, arg) {
      function callInvokeWithMethodAndArg() {
        return new PromiseImpl(function (resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }

      return previousPromise = // If enqueue has been called before, then we want to wait until
      // all previous Promises have been resolved before calling invoke,
      // so that results are always delivered in the correct order. If
      // enqueue has not been called before, then it is important to
      // call invoke immediately, without waiting on a callback to fire,
      // so that the async generator function has the opportunity to do
      // any necessary setup in a predictable way. This predictability
      // is why the Promise constructor synchronously invokes its
      // executor callback, and why async functions synchronously
      // execute code before the first await. Since we implement simple
      // async functions in terms of async generators, it is especially
      // important to get this right, even though it requires care.
      previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, // Avoid propagating failures to Promises returned by later
      // invocations of the iterator.
      callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
    } // Define the unified helper method that is used to implement .next,
    // .throw, and .return (see defineIteratorMethods).


    this._invoke = enqueue;
  }

  defineIteratorMethods(AsyncIterator.prototype);

  AsyncIterator.prototype[asyncIteratorSymbol] = function () {
    return this;
  };

  exports.AsyncIterator = AsyncIterator; // Note that simple async functions are implemented on top of
  // AsyncIterator objects; they just return a Promise for the value of
  // the final result produced by the iterator.

  exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {
    if (PromiseImpl === void 0) PromiseImpl = Promise;
    var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);
    return exports.isGeneratorFunction(outerFn) ? iter // If outerFn is a generator, return the full iterator.
    : iter.next().then(function (result) {
      return result.done ? result.value : iter.next();
    });
  };

  function makeInvokeMethod(innerFn, self, context) {
    var state = GenStateSuspendedStart;
    return function invoke(method, arg) {
      if (state === GenStateExecuting) {
        throw new Error("Generator is already running");
      }

      if (state === GenStateCompleted) {
        if (method === "throw") {
          throw arg;
        } // Be forgiving, per 25.3.3.3.3 of the spec:
        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume


        return doneResult();
      }

      context.method = method;
      context.arg = arg;

      while (true) {
        var delegate = context.delegate;

        if (delegate) {
          var delegateResult = maybeInvokeDelegate(delegate, context);

          if (delegateResult) {
            if (delegateResult === ContinueSentinel) continue;
            return delegateResult;
          }
        }

        if (context.method === "next") {
          // Setting context._sent for legacy support of Babel's
          // function.sent implementation.
          context.sent = context._sent = context.arg;
        } else if (context.method === "throw") {
          if (state === GenStateSuspendedStart) {
            state = GenStateCompleted;
            throw context.arg;
          }

          context.dispatchException(context.arg);
        } else if (context.method === "return") {
          context.abrupt("return", context.arg);
        }

        state = GenStateExecuting;
        var record = tryCatch(innerFn, self, context);

        if (record.type === "normal") {
          // If an exception is thrown from innerFn, we leave state ===
          // GenStateExecuting and loop back for another invocation.
          state = context.done ? GenStateCompleted : GenStateSuspendedYield;

          if (record.arg === ContinueSentinel) {
            continue;
          }

          return {
            value: record.arg,
            done: context.done
          };
        } else if (record.type === "throw") {
          state = GenStateCompleted; // Dispatch the exception by looping back around to the
          // context.dispatchException(context.arg) call above.

          context.method = "throw";
          context.arg = record.arg;
        }
      }
    };
  } // Call delegate.iterator[context.method](context.arg) and handle the
  // result, either by returning a { value, done } result from the
  // delegate iterator, or by modifying context.method and context.arg,
  // setting context.delegate to null, and returning the ContinueSentinel.


  function maybeInvokeDelegate(delegate, context) {
    var method = delegate.iterator[context.method];

    if (method === undefined) {
      // A .throw or .return when the delegate iterator has no .throw
      // method always terminates the yield* loop.
      context.delegate = null;

      if (context.method === "throw") {
        // Note: ["return"] must be used for ES3 parsing compatibility.
        if (delegate.iterator["return"]) {
          // If the delegate iterator has a return method, give it a
          // chance to clean up.
          context.method = "return";
          context.arg = undefined;
          maybeInvokeDelegate(delegate, context);

          if (context.method === "throw") {
            // If maybeInvokeDelegate(context) changed context.method from
            // "return" to "throw", let that override the TypeError below.
            return ContinueSentinel;
          }
        }

        context.method = "throw";
        context.arg = new TypeError("The iterator does not provide a 'throw' method");
      }

      return ContinueSentinel;
    }

    var record = tryCatch(method, delegate.iterator, context.arg);

    if (record.type === "throw") {
      context.method = "throw";
      context.arg = record.arg;
      context.delegate = null;
      return ContinueSentinel;
    }

    var info = record.arg;

    if (!info) {
      context.method = "throw";
      context.arg = new TypeError("iterator result is not an object");
      context.delegate = null;
      return ContinueSentinel;
    }

    if (info.done) {
      // Assign the result of the finished delegate to the temporary
      // variable specified by delegate.resultName (see delegateYield).
      context[delegate.resultName] = info.value; // Resume execution at the desired location (see delegateYield).

      context.next = delegate.nextLoc; // If context.method was "throw" but the delegate handled the
      // exception, let the outer generator proceed normally. If
      // context.method was "next", forget context.arg since it has been
      // "consumed" by the delegate iterator. If context.method was
      // "return", allow the original .return call to continue in the
      // outer generator.

      if (context.method !== "return") {
        context.method = "next";
        context.arg = undefined;
      }
    } else {
      // Re-yield the result returned by the delegate method.
      return info;
    } // The delegate iterator is finished, so forget it and continue with
    // the outer generator.


    context.delegate = null;
    return ContinueSentinel;
  } // Define Generator.prototype.{next,throw,return} in terms of the
  // unified ._invoke helper method.


  defineIteratorMethods(Gp);
  define(Gp, toStringTagSymbol, "Generator"); // A Generator should always return itself as the iterator object when the
  // @@iterator function is called on it. Some browsers' implementations of the
  // iterator prototype chain incorrectly implement this, causing the Generator
  // object to not be returned from this call. This ensures that doesn't happen.
  // See https://github.com/facebook/regenerator/issues/274 for more details.

  Gp[iteratorSymbol] = function () {
    return this;
  };

  Gp.toString = function () {
    return "[object Generator]";
  };

  function pushTryEntry(locs) {
    var entry = {
      tryLoc: locs[0]
    };

    if (1 in locs) {
      entry.catchLoc = locs[1];
    }

    if (2 in locs) {
      entry.finallyLoc = locs[2];
      entry.afterLoc = locs[3];
    }

    this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal";
    delete record.arg;
    entry.completion = record;
  }

  function Context(tryLocsList) {
    // The root entry object (effectively a try statement without a catch
    // or a finally block) gives us a place to store values thrown from
    // locations where there is no enclosing try statement.
    this.tryEntries = [{
      tryLoc: "root"
    }];
    tryLocsList.forEach(pushTryEntry, this);
    this.reset(true);
  }

  exports.keys = function (object) {
    var keys = [];

    for (var key in object) {
      keys.push(key);
    }

    keys.reverse(); // Rather than returning an object with a next method, we keep
    // things simple and return the next function itself.

    return function next() {
      while (keys.length) {
        var key = keys.pop();

        if (key in object) {
          next.value = key;
          next.done = false;
          return next;
        }
      } // To avoid creating an additional object, we just hang the .value
      // and .done properties off the next function object itself. This
      // also ensures that the minifier will not anonymize the function.


      next.done = true;
      return next;
    };
  };

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];

      if (iteratorMethod) {
        return iteratorMethod.call(iterable);
      }

      if (typeof iterable.next === "function") {
        return iterable;
      }

      if (!isNaN(iterable.length)) {
        var i = -1,
            next = function next() {
          while (++i < iterable.length) {
            if (hasOwn.call(iterable, i)) {
              next.value = iterable[i];
              next.done = false;
              return next;
            }
          }

          next.value = undefined;
          next.done = true;
          return next;
        };

        return next.next = next;
      }
    } // Return an iterator with no values.


    return {
      next: doneResult
    };
  }

  exports.values = values;

  function doneResult() {
    return {
      value: undefined,
      done: true
    };
  }

  Context.prototype = {
    constructor: Context,
    reset: function reset(skipTempReset) {
      this.prev = 0;
      this.next = 0; // Resetting context._sent for legacy support of Babel's
      // function.sent implementation.

      this.sent = this._sent = undefined;
      this.done = false;
      this.delegate = null;
      this.method = "next";
      this.arg = undefined;
      this.tryEntries.forEach(resetTryEntry);

      if (!skipTempReset) {
        for (var name in this) {
          // Not sure about the optimal order of these conditions:
          if (name.charAt(0) === "t" && hasOwn.call(this, name) && !isNaN(+name.slice(1))) {
            this[name] = undefined;
          }
        }
      }
    },
    stop: function stop() {
      this.done = true;
      var rootEntry = this.tryEntries[0];
      var rootRecord = rootEntry.completion;

      if (rootRecord.type === "throw") {
        throw rootRecord.arg;
      }

      return this.rval;
    },
    dispatchException: function dispatchException(exception) {
      if (this.done) {
        throw exception;
      }

      var context = this;

      function handle(loc, caught) {
        record.type = "throw";
        record.arg = exception;
        context.next = loc;

        if (caught) {
          // If the dispatched exception was caught by a catch block,
          // then let that catch block handle the exception normally.
          context.method = "next";
          context.arg = undefined;
        }

        return !!caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        var record = entry.completion;

        if (entry.tryLoc === "root") {
          // Exception thrown outside of any try block that could handle
          // it, so set the completion value of the entire function to
          // throw the exception.
          return handle("end");
        }

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc");
          var hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            } else if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }
          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            }
          } else if (hasFinally) {
            if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }
          } else {
            throw new Error("try statement without catch or finally");
          }
        }
      }
    },
    abrupt: function abrupt(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];

        if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      if (finallyEntry && (type === "break" || type === "continue") && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc) {
        // Ignore the finally entry if control is not jumping to a
        // location outside the try/catch block.
        finallyEntry = null;
      }

      var record = finallyEntry ? finallyEntry.completion : {};
      record.type = type;
      record.arg = arg;

      if (finallyEntry) {
        this.method = "next";
        this.next = finallyEntry.finallyLoc;
        return ContinueSentinel;
      }

      return this.complete(record);
    },
    complete: function complete(record, afterLoc) {
      if (record.type === "throw") {
        throw record.arg;
      }

      if (record.type === "break" || record.type === "continue") {
        this.next = record.arg;
      } else if (record.type === "return") {
        this.rval = this.arg = record.arg;
        this.method = "return";
        this.next = "end";
      } else if (record.type === "normal" && afterLoc) {
        this.next = afterLoc;
      }

      return ContinueSentinel;
    },
    finish: function finish(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];

        if (entry.finallyLoc === finallyLoc) {
          this.complete(entry.completion, entry.afterLoc);
          resetTryEntry(entry);
          return ContinueSentinel;
        }
      }
    },
    "catch": function _catch(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];

        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;

          if (record.type === "throw") {
            var thrown = record.arg;
            resetTryEntry(entry);
          }

          return thrown;
        }
      } // The context.catch method must only be called with a location
      // argument that corresponds to a known catch block.


      throw new Error("illegal catch attempt");
    },
    delegateYield: function delegateYield(iterable, resultName, nextLoc) {
      this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      };

      if (this.method === "next") {
        // Deliberately forget the last sent value so that we don't
        // accidentally pass it on to the delegate.
        this.arg = undefined;
      }

      return ContinueSentinel;
    }
  }; // Regardless of whether this script is executing as a CommonJS module
  // or not, return the runtime object so that we can declare the variable
  // regeneratorRuntime in the outer scope, which allows this module to be
  // injected easily by `bin/regenerator --include-runtime script.js`.

  return exports;
}( // If this script is executing as a CommonJS module, use module.exports
// as the regeneratorRuntime namespace. Otherwise create a new empty
// object. Either way, the resulting object will be used to initialize
// the regeneratorRuntime variable at the top of this file.
 true ? module.exports : 0);

try {
  regeneratorRuntime = runtime;
} catch (accidentalStrictMode) {
  // This module should not be running in strict mode, so the above
  // assignment should always work unless something is misconfigured. Just
  // in case runtime.js accidentally runs in strict mode, we can escape
  // strict mode using a global Function call. This could conceivably fail
  // if a Content Security Policy forbids using Function, but in that case
  // the proper solution is to fix the accidental strict mode problem. If
  // you've misconfigured your bundler to force strict mode and applied a
  // CSP to forbid Function, and you're not willing to fix either of those
  // problems, please detail your unique predicament in a GitHub issue.
  Function("r", "regeneratorRuntime = r")(runtime);
}

/***/ }),

/***/ 49113:
/*!**********************************************************************************************************!*\
  !*** ./src/app/main/forms/form-elements/date-time-picker/date-picker-i18n/date-picker-i18n.component.ts ***!
  \**********************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DatePickerI18nComponent": function() { return /* binding */ DatePickerI18nComponent; }
/* harmony export */ });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/core */ 37716);
/* harmony import */ var _ng_bootstrap_ng_bootstrap__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @ng-bootstrap/ng-bootstrap */ 12664);
/* harmony import */ var _dateformat__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dateformat */ 95901);
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/forms */ 3679);
/* harmony import */ var _core_directives_core_ripple_effect_core_ripple_effect_directive__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @core/directives/core-ripple-effect/core-ripple-effect.directive */ 75287);







var DatePickerI18nComponent = /** @class */ (function () {
    function DatePickerI18nComponent() {
        this.dateSelectedEvent = new _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter();
        this.finalDate = "07/06/2022";
    }
    DatePickerI18nComponent.prototype.ngOnInit = function () {
    };
    DatePickerI18nComponent.prototype.onDateSelect = function (event) {
        var year = event.year;
        var month = event.month <= 9 ? '0' + event.month : event.month;
        var day = event.day <= 9 ? '0' + event.day : event.day;
        this.finalDate = day + "/" + month + "/" + year;
        this.dateSelectedEvent.emit(event);
        //console.log(this.finalDate)
    };
    DatePickerI18nComponent.ɵfac = function DatePickerI18nComponent_Factory(t) { return new (t || DatePickerI18nComponent)(); };
    DatePickerI18nComponent.ɵcmp = /*@__PURE__*/ _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵdefineComponent"]({ type: DatePickerI18nComponent, selectors: [["date-picker-i18n"]], inputs: { ngbDateStruct: "ngbDateStruct", disabled: "disabled" }, outputs: { dateSelectedEvent: "dateSelectedEvent" }, features: [_angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵProvidersFeature"]([
                { provide: _ng_bootstrap_ng_bootstrap__WEBPACK_IMPORTED_MODULE_3__.NgbDateParserFormatter, useClass: _dateformat__WEBPACK_IMPORTED_MODULE_0__.NgbDateCustomParserFormatter }
            ]
            // providers: [I18n, {provide: NgbDatepickerI18n, useClass: CustomDatepickerI18n}] // define custom NgbDatepickerI18n provider
            )], decls: 7, vars: 3, consts: [[1, "form-inline"], [1, "form-group"], [1, "input-group"], ["type", "text", "placeholder", "jj/mm/aaaa", "name", "i18nDatePicker", "id", "i18nDatePicker", "ngbDatepicker", "", 1, "form-control", 3, "ngModel", "disabled", "ngModelChange", "dateSelect"], ["i18nDP", "ngbDatepicker"], [1, "input-group-append"], ["type", "button", "rippleEffect", "", 1, "btn", "btn-outline-secondary", "feather", "icon-calendar", 3, "disabled", "click"]], template: function DatePickerI18nComponent_Template(rf, ctx) { if (rf & 1) {
            var _r1 = _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵgetCurrentView"]();
            _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelementStart"](0, "form", 0);
            _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelementStart"](1, "div", 1);
            _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelementStart"](2, "div", 2);
            _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelementStart"](3, "input", 3, 4);
            _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵlistener"]("ngModelChange", function DatePickerI18nComponent_Template_input_ngModelChange_3_listener($event) { return ctx.ngbDateStruct = $event; })("dateSelect", function DatePickerI18nComponent_Template_input_dateSelect_3_listener($event) { return ctx.onDateSelect($event); });
            _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelementEnd"]();
            _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelementStart"](5, "div", 5);
            _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelementStart"](6, "button", 6);
            _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵlistener"]("click", function DatePickerI18nComponent_Template_button_click_6_listener() { _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵrestoreView"](_r1); var _r0 = _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵreference"](4); return _r0.toggle(); });
            _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelementEnd"]();
            _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelementEnd"]();
            _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelementEnd"]();
            _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelementEnd"]();
            _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelementEnd"]();
        } if (rf & 2) {
            _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵadvance"](3);
            _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵproperty"]("ngModel", ctx.ngbDateStruct)("disabled", ctx.disabled);
            _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵadvance"](3);
            _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵproperty"]("disabled", ctx.disabled);
        } }, directives: [_angular_forms__WEBPACK_IMPORTED_MODULE_4__["ɵNgNoValidate"], _angular_forms__WEBPACK_IMPORTED_MODULE_4__.NgControlStatusGroup, _angular_forms__WEBPACK_IMPORTED_MODULE_4__.NgForm, _ng_bootstrap_ng_bootstrap__WEBPACK_IMPORTED_MODULE_3__.NgbInputDatepicker, _angular_forms__WEBPACK_IMPORTED_MODULE_4__.DefaultValueAccessor, _angular_forms__WEBPACK_IMPORTED_MODULE_4__.NgControlStatus, _angular_forms__WEBPACK_IMPORTED_MODULE_4__.NgModel, _core_directives_core_ripple_effect_core_ripple_effect_directive__WEBPACK_IMPORTED_MODULE_1__.RippleEffectDirective], encapsulation: 2 });
    return DatePickerI18nComponent;
}());



/***/ }),

/***/ 79669:
/*!*******************************************************************************************************!*\
  !*** ./src/app/main/forms/form-elements/date-time-picker/date-picker-i18n/date-picker-i18n.module.ts ***!
  \*******************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DatePickerI18nModule": function() { return /* binding */ DatePickerI18nModule; }
/* harmony export */ });
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/common */ 38583);
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/forms */ 3679);
/* harmony import */ var _ng_bootstrap_ng_bootstrap__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @ng-bootstrap/ng-bootstrap */ 12664);
/* harmony import */ var _core_common_module__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @core/common.module */ 75078);
/* harmony import */ var _date_picker_i18n_component__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./date-picker-i18n.component */ 49113);
/* harmony import */ var ngx_mask__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ngx-mask */ 69129);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/core */ 37716);







var DatePickerI18nModule = /** @class */ (function () {
    function DatePickerI18nModule() {
    }
    DatePickerI18nModule.ɵfac = function DatePickerI18nModule_Factory(t) { return new (t || DatePickerI18nModule)(); };
    DatePickerI18nModule.ɵmod = /*@__PURE__*/ _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵdefineNgModule"]({ type: DatePickerI18nModule });
    DatePickerI18nModule.ɵinj = /*@__PURE__*/ _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵdefineInjector"]({ imports: [[
                _angular_common__WEBPACK_IMPORTED_MODULE_3__.CommonModule,
                _core_common_module__WEBPACK_IMPORTED_MODULE_0__.CoreCommonModule,
                _ng_bootstrap_ng_bootstrap__WEBPACK_IMPORTED_MODULE_4__.NgbModule,
                _angular_forms__WEBPACK_IMPORTED_MODULE_5__.FormsModule,
                ngx_mask__WEBPACK_IMPORTED_MODULE_6__.NgxMaskModule,
            ]] });
    return DatePickerI18nModule;
}());

(function () { (typeof ngJitMode === "undefined" || ngJitMode) && _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵsetNgModuleScope"](DatePickerI18nModule, { declarations: [_date_picker_i18n_component__WEBPACK_IMPORTED_MODULE_1__.DatePickerI18nComponent], imports: [_angular_common__WEBPACK_IMPORTED_MODULE_3__.CommonModule,
        _core_common_module__WEBPACK_IMPORTED_MODULE_0__.CoreCommonModule,
        _ng_bootstrap_ng_bootstrap__WEBPACK_IMPORTED_MODULE_4__.NgbModule,
        _angular_forms__WEBPACK_IMPORTED_MODULE_5__.FormsModule,
        ngx_mask__WEBPACK_IMPORTED_MODULE_6__.NgxMaskModule], exports: [_date_picker_i18n_component__WEBPACK_IMPORTED_MODULE_1__.DatePickerI18nComponent] }); })();


/***/ }),

/***/ 95901:
/*!******************************************************************************************!*\
  !*** ./src/app/main/forms/form-elements/date-time-picker/date-picker-i18n/dateformat.ts ***!
  \******************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "NgbDateCustomParserFormatter": function() { return /* binding */ NgbDateCustomParserFormatter; }
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ 64762);
/* harmony import */ var _ng_bootstrap_ng_bootstrap__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @ng-bootstrap/ng-bootstrap */ 12664);
/* harmony import */ var rxjs_internal_compatibility__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! rxjs/internal-compatibility */ 26561);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/core */ 37716);




var NgbDateCustomParserFormatter = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(NgbDateCustomParserFormatter, _super);
    function NgbDateCustomParserFormatter() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    NgbDateCustomParserFormatter.prototype.parse = function (value) {
        if (value) {
            var dateParts = value.trim().split('/');
            if (dateParts.length === 1 && (0,rxjs_internal_compatibility__WEBPACK_IMPORTED_MODULE_1__.isNumeric)(dateParts[0])) {
                return { day: parseInt(dateParts[0]), month: null, year: null };
            }
            else if (dateParts.length === 2 && (0,rxjs_internal_compatibility__WEBPACK_IMPORTED_MODULE_1__.isNumeric)(dateParts[0]) && (0,rxjs_internal_compatibility__WEBPACK_IMPORTED_MODULE_1__.isNumeric)(dateParts[1])) {
                return { day: parseInt(dateParts[0]), month: parseInt(dateParts[1]), year: null };
            }
            else if (dateParts.length === 3 && (0,rxjs_internal_compatibility__WEBPACK_IMPORTED_MODULE_1__.isNumeric)(dateParts[0]) && (0,rxjs_internal_compatibility__WEBPACK_IMPORTED_MODULE_1__.isNumeric)(dateParts[1]) && (0,rxjs_internal_compatibility__WEBPACK_IMPORTED_MODULE_1__.isNumeric)(dateParts[2])) {
                return { day: parseInt(dateParts[0]), month: parseInt(dateParts[1]), year: parseInt(dateParts[2]) };
            }
        }
        return null;
    };
    NgbDateCustomParserFormatter.prototype.format = function (date) {
        return date ? (date.day <= 9 ? '0' + date.day : date.day) + "/" + (date.month <= 9 ? '0' + date.month : date.month) + "/" + date.year : '';
    };
    NgbDateCustomParserFormatter.ɵfac = /*@__PURE__*/ function () { var ɵNgbDateCustomParserFormatter_BaseFactory; return function NgbDateCustomParserFormatter_Factory(t) { return (ɵNgbDateCustomParserFormatter_BaseFactory || (ɵNgbDateCustomParserFormatter_BaseFactory = _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵgetInheritedFactory"](NgbDateCustomParserFormatter)))(t || NgbDateCustomParserFormatter); }; }();
    NgbDateCustomParserFormatter.ɵprov = /*@__PURE__*/ _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵdefineInjectable"]({ token: NgbDateCustomParserFormatter, factory: NgbDateCustomParserFormatter.ɵfac });
    return NgbDateCustomParserFormatter;
}(_ng_bootstrap_ng_bootstrap__WEBPACK_IMPORTED_MODULE_3__.NgbDateParserFormatter));



/***/ }),

/***/ 88774:
/*!**********************************************************!*\
  !*** ./node_modules/@babel/runtime/regenerator/index.js ***!
  \**********************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

module.exports = __webpack_require__(/*! regenerator-runtime */ 67941);


/***/ })

}]);
//# sourceMappingURL=default-node_modules_swimlane_ngx-datatable___ivy_ngcc___fesm2015_swimlane-ngx-datatable_js-s-3c42c6.js.map